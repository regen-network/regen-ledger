// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ecocredit

import (
	context "context"
	types "github.com/regen-network/regen-ledger/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// CreateClass creates a new credit class with an approved list of issuers and
	// optional metadata.
	CreateClass(ctx context.Context, in *MsgCreateClassRequest, opts ...grpc.CallOption) (*MsgCreateClassResponse, error)
	// CreateBatch creates a new batch of credits for an existing credit class.
	// This will create a new batch denom with a fixed supply. Issued credits can
	// be distributed to recipients in either tradable or retired form.
	CreateBatch(ctx context.Context, in *MsgCreateBatchRequest, opts ...grpc.CallOption) (*MsgCreateBatchResponse, error)
	// Send sends tradeable credits from one account to another account. Sent
	// credits can either be tradable or retired on receipt.
	Send(ctx context.Context, in *MsgSendRequest, opts ...grpc.CallOption) (*MsgSendResponse, error)
	// Retire retires a specified number of credits in the holder's account.
	Retire(ctx context.Context, in *MsgRetireRequest, opts ...grpc.CallOption) (*MsgRetireResponse, error)
	// SetPrecision allows an issuer to increase the decimal precision of a credit
	// batch. It is an experimental feature to concretely explore an idea proposed
	// in https://github.com/cosmos/cosmos-sdk/issues/7113. The number of decimal
	// places allowed for a credit batch is determined by the original number of
	// decimal places used with calling CreatBatch. SetPrecision allows the number
	// of allowed decimal places to be increased, effectively making the supply
	// more granular without actually changing any balances. It allows asset
	// issuers to be able to issue an asset without needing to think about how
	// many subdivisions are needed upfront. While it may not be relevant for
	// credits which likely have a fairly stable market value, I wanted to
	// experiment a bit and this serves as a proof of concept for a broader bank
	// redesign where say for instance a coin like the ATOM or XRN could be issued
	// in its own units rather than micro or nano-units. Instead an operation like
	// SetPrecision would allow trading in micro, nano or pico in the future based
	// on market demand. Arbitrary, unbounded precision is not desirable because
	// this can lead to spam attacks (like sending
	// 0.000000000000000000000000000001 coins). This is effectively fixed
	// precision so under the hood it is still basically an integer, but the fixed
	// precision can be increased so its more adaptable long term than just an
	// integer.
	SetPrecision(ctx context.Context, in *MsgSetPrecisionRequest, opts ...grpc.CallOption) (*MsgSetPrecisionResponse, error)
}

type msgClient struct {
	cc            grpc.ClientConnInterface
	_CreateClass  types.Invoker
	_CreateBatch  types.Invoker
	_Send         types.Invoker
	_Retire       types.Invoker
	_SetPrecision types.Invoker
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc: cc}
}

func (c *msgClient) CreateClass(ctx context.Context, in *MsgCreateClassRequest, opts ...grpc.CallOption) (*MsgCreateClassResponse, error) {
	if invoker := c._CreateClass; invoker != nil {
		var out MsgCreateClassResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._CreateClass, err = invokerConn.Invoker("/regen.ecocredit.v1alpha1.Msg/CreateClass")
		if err != nil {
			var out MsgCreateClassResponse
			err = c._CreateClass(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgCreateClassResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha1.Msg/CreateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBatch(ctx context.Context, in *MsgCreateBatchRequest, opts ...grpc.CallOption) (*MsgCreateBatchResponse, error) {
	if invoker := c._CreateBatch; invoker != nil {
		var out MsgCreateBatchResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._CreateBatch, err = invokerConn.Invoker("/regen.ecocredit.v1alpha1.Msg/CreateBatch")
		if err != nil {
			var out MsgCreateBatchResponse
			err = c._CreateBatch(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgCreateBatchResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha1.Msg/CreateBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Send(ctx context.Context, in *MsgSendRequest, opts ...grpc.CallOption) (*MsgSendResponse, error) {
	if invoker := c._Send; invoker != nil {
		var out MsgSendResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._Send, err = invokerConn.Invoker("/regen.ecocredit.v1alpha1.Msg/Send")
		if err != nil {
			var out MsgSendResponse
			err = c._Send(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgSendResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha1.Msg/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Retire(ctx context.Context, in *MsgRetireRequest, opts ...grpc.CallOption) (*MsgRetireResponse, error) {
	if invoker := c._Retire; invoker != nil {
		var out MsgRetireResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._Retire, err = invokerConn.Invoker("/regen.ecocredit.v1alpha1.Msg/Retire")
		if err != nil {
			var out MsgRetireResponse
			err = c._Retire(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgRetireResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha1.Msg/Retire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPrecision(ctx context.Context, in *MsgSetPrecisionRequest, opts ...grpc.CallOption) (*MsgSetPrecisionResponse, error) {
	if invoker := c._SetPrecision; invoker != nil {
		var out MsgSetPrecisionResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._SetPrecision, err = invokerConn.Invoker("/regen.ecocredit.v1alpha1.Msg/SetPrecision")
		if err != nil {
			var out MsgSetPrecisionResponse
			err = c._SetPrecision(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgSetPrecisionResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha1.Msg/SetPrecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateClass creates a new credit class with an approved list of issuers and
	// optional metadata.
	CreateClass(types.Context, *MsgCreateClassRequest) (*MsgCreateClassResponse, error)
	// CreateBatch creates a new batch of credits for an existing credit class.
	// This will create a new batch denom with a fixed supply. Issued credits can
	// be distributed to recipients in either tradable or retired form.
	CreateBatch(types.Context, *MsgCreateBatchRequest) (*MsgCreateBatchResponse, error)
	// Send sends tradeable credits from one account to another account. Sent
	// credits can either be tradable or retired on receipt.
	Send(types.Context, *MsgSendRequest) (*MsgSendResponse, error)
	// Retire retires a specified number of credits in the holder's account.
	Retire(types.Context, *MsgRetireRequest) (*MsgRetireResponse, error)
	// SetPrecision allows an issuer to increase the decimal precision of a credit
	// batch. It is an experimental feature to concretely explore an idea proposed
	// in https://github.com/cosmos/cosmos-sdk/issues/7113. The number of decimal
	// places allowed for a credit batch is determined by the original number of
	// decimal places used with calling CreatBatch. SetPrecision allows the number
	// of allowed decimal places to be increased, effectively making the supply
	// more granular without actually changing any balances. It allows asset
	// issuers to be able to issue an asset without needing to think about how
	// many subdivisions are needed upfront. While it may not be relevant for
	// credits which likely have a fairly stable market value, I wanted to
	// experiment a bit and this serves as a proof of concept for a broader bank
	// redesign where say for instance a coin like the ATOM or XRN could be issued
	// in its own units rather than micro or nano-units. Instead an operation like
	// SetPrecision would allow trading in micro, nano or pico in the future based
	// on market demand. Arbitrary, unbounded precision is not desirable because
	// this can lead to spam attacks (like sending
	// 0.000000000000000000000000000001 coins). This is effectively fixed
	// precision so under the hood it is still basically an integer, but the fixed
	// precision can be increased so its more adaptable long term than just an
	// integer.
	SetPrecision(types.Context, *MsgSetPrecisionRequest) (*MsgSetPrecisionResponse, error)
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateClass(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha1.Msg/CreateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateClass(types.UnwrapSDKContext(ctx), req.(*MsgCreateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBatch(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha1.Msg/CreateBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBatch(types.UnwrapSDKContext(ctx), req.(*MsgCreateBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Send(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha1.Msg/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Send(types.UnwrapSDKContext(ctx), req.(*MsgSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Retire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRetireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Retire(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha1.Msg/Retire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Retire(types.UnwrapSDKContext(ctx), req.(*MsgRetireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPrecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPrecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPrecision(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha1.Msg/SetPrecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPrecision(types.UnwrapSDKContext(ctx), req.(*MsgSetPrecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regen.ecocredit.v1alpha1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClass",
			Handler:    _Msg_CreateClass_Handler,
		},
		{
			MethodName: "CreateBatch",
			Handler:    _Msg_CreateBatch_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Msg_Send_Handler,
		},
		{
			MethodName: "Retire",
			Handler:    _Msg_Retire_Handler,
		},
		{
			MethodName: "SetPrecision",
			Handler:    _Msg_SetPrecision_Handler,
		},
	},
	Metadata: "regen/ecocredit/v1alpha1/tx.proto",
}

const (
	MsgCreateClassMethod  = "/regen.ecocredit.v1alpha1.Msg/CreateClass"
	MsgCreateBatchMethod  = "/regen.ecocredit.v1alpha1.Msg/CreateBatch"
	MsgSendMethod         = "/regen.ecocredit.v1alpha1.Msg/Send"
	MsgRetireMethod       = "/regen.ecocredit.v1alpha1.Msg/Retire"
	MsgSetPrecisionMethod = "/regen.ecocredit.v1alpha1.Msg/SetPrecision"
)
