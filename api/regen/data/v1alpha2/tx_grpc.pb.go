// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: regen/data/v1alpha2/tx.proto

package datav1alpha2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// AnchorData "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in AnchorData is not attesting to the veracity of the underlying
	// data. They can simply be a intermediary providing timestamp services.
	// SignData should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	AnchorData(ctx context.Context, in *MsgAnchorData, opts ...grpc.CallOption) (*MsgAnchorDataResponse, error)
	// SignData allows for signing of an arbitrary piece of data on the
	// blockchain. By "signing" data the signers are making a statement about the
	// veracity of the data itself. It is like signing a legal document, meaning
	// that I agree to all conditions and to the best of my knowledge everything
	// is true. When anchoring data, the sender is not attesting to the veracity
	// of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// SignData implicitly calls AnchorData if the data was not already anchored.
	//
	// SignData can be called multiple times for the same content hash with different
	// signers and those signers will be appended to the list of signers.
	SignData(ctx context.Context, in *MsgSignData, opts ...grpc.CallOption) (*MsgSignDataResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AnchorData(ctx context.Context, in *MsgAnchorData, opts ...grpc.CallOption) (*MsgAnchorDataResponse, error) {
	out := new(MsgAnchorDataResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v1alpha2.Msg/AnchorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignData(ctx context.Context, in *MsgSignData, opts ...grpc.CallOption) (*MsgSignDataResponse, error) {
	out := new(MsgSignDataResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v1alpha2.Msg/SignData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// AnchorData "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in AnchorData is not attesting to the veracity of the underlying
	// data. They can simply be a intermediary providing timestamp services.
	// SignData should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	AnchorData(context.Context, *MsgAnchorData) (*MsgAnchorDataResponse, error)
	// SignData allows for signing of an arbitrary piece of data on the
	// blockchain. By "signing" data the signers are making a statement about the
	// veracity of the data itself. It is like signing a legal document, meaning
	// that I agree to all conditions and to the best of my knowledge everything
	// is true. When anchoring data, the sender is not attesting to the veracity
	// of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// SignData implicitly calls AnchorData if the data was not already anchored.
	//
	// SignData can be called multiple times for the same content hash with different
	// signers and those signers will be appended to the list of signers.
	SignData(context.Context, *MsgSignData) (*MsgSignDataResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) AnchorData(context.Context, *MsgAnchorData) (*MsgAnchorDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorData not implemented")
}
func (UnimplementedMsgServer) SignData(context.Context, *MsgSignData) (*MsgSignDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignData not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_AnchorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAnchorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AnchorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v1alpha2.Msg/AnchorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AnchorData(ctx, req.(*MsgAnchorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v1alpha2.Msg/SignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignData(ctx, req.(*MsgSignData))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regen.data.v1alpha2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnchorData",
			Handler:    _Msg_AnchorData_Handler,
		},
		{
			MethodName: "SignData",
			Handler:    _Msg_SignData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/data/v1alpha2/tx.proto",
}
