// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package datav1alpha2

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
)

type StateStore interface {
	DataID() DataIDStore
	DataAnchor() DataAnchorStore
	DataSigner() DataSignerStore
	ResolverURL() ResolverURLStore
	DataResolver() DataResolverStore
}

type DataIDStore interface {
	Insert(ctx context.Context, dataID *DataID) error
	Update(ctx context.Context, dataID *DataID) error
	Save(ctx context.Context, dataID *DataID) error
	Delete(ctx context.Context, dataID *DataID) error
	Has(ctx context.Context, id []byte) (found bool, err error)
	Get(ctx context.Context, id []byte) (*DataID, error)
	List(ctx context.Context, prefixKey DataIDIndexKey, opts ...ormlist.Option) (DataIDIterator, error)
	ListRange(ctx context.Context, from, to DataIDIndexKey, opts ...ormlist.Option) (DataIDIterator, error)
}

type DataIDIterator struct {
	ormtable.Iterator
}

func (i DataIDIterator) Value() (*DataID, error) {
	var dataID DataID
	err := i.UnmarshalMessage(&dataID)
	return &dataID, err
}

type DataIDIndexKey interface {
	id() uint32
	values() []interface{}
	dataIDIndexKey()
}

type DataIDIdIndexKey struct {
	vs []interface{}
}

func (x DataIDIdIndexKey) id() uint32            { return 1 /* primary key */ }
func (x DataIDIdIndexKey) values() []interface{} { return x.vs }
func (x DataIDIdIndexKey) dataIDIndexKey()       {}

var _ DataIDIndexKey = DataIDIdIndexKey{}

func (x DataIDIdIndexKey) WithId(id []byte) DataIDIdIndexKey {
	x.vs = []interface{}{id}
	return x
}

type DataIDIriIndexKey struct {
	vs []interface{}
}

func (x DataIDIriIndexKey) id() uint32            { return 1 /* primary key */ }
func (x DataIDIriIndexKey) values() []interface{} { return x.vs }
func (x DataIDIriIndexKey) dataIDIndexKey()       {}

var _ DataIDIndexKey = DataIDIriIndexKey{}

func (x DataIDIriIndexKey) WithIri(iri string) DataIDIriIndexKey {
	x.vs = []interface{}{iri}
	return x
}

type dataIDStore struct {
	table ormtable.Table
}

func (x dataIDStore) Insert(ctx context.Context, dataID *DataID) error {
	return x.table.Insert(ctx, dataID)
}
func (x dataIDStore) Update(ctx context.Context, dataID *DataID) error {
	return x.table.Update(ctx, dataID)
}
func (x dataIDStore) Save(ctx context.Context, dataID *DataID) error {
	return x.table.Save(ctx, dataID)
}
func (x dataIDStore) Delete(ctx context.Context, dataID *DataID) error {
	return x.table.Delete(ctx, dataID)
}
func (x dataIDStore) Has(ctx context.Context, id []byte) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, id)
}
func (x dataIDStore) Get(ctx context.Context, id []byte) (*DataID, error) {
	var dataID DataID
	found, err := x.table.PrimaryKey().Get(ctx, &dataID, id)
	if !found {
		return nil, err
	}
	return &dataID, err
}
func (x dataIDStore) List(ctx context.Context, prefixKey DataIDIndexKey, opts ...ormlist.Option) (DataIDIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return DataIDIterator{it}, err
}
func (x dataIDStore) ListRange(ctx context.Context, from, to DataIDIndexKey, opts ...ormlist.Option) (DataIDIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return DataIDIterator{it}, err
}

var _ DataIDStore = dataIDStore{}

type DataAnchorStore interface {
	Insert(ctx context.Context, dataAnchor *DataAnchor) error
	Update(ctx context.Context, dataAnchor *DataAnchor) error
	Save(ctx context.Context, dataAnchor *DataAnchor) error
	Delete(ctx context.Context, dataAnchor *DataAnchor) error
	Has(ctx context.Context, id []byte) (found bool, err error)
	Get(ctx context.Context, id []byte) (*DataAnchor, error)
	List(ctx context.Context, prefixKey DataAnchorIndexKey, opts ...ormlist.Option) (DataAnchorIterator, error)
	ListRange(ctx context.Context, from, to DataAnchorIndexKey, opts ...ormlist.Option) (DataAnchorIterator, error)
}

type DataAnchorIterator struct {
	ormtable.Iterator
}

func (i DataAnchorIterator) Value() (*DataAnchor, error) {
	var dataAnchor DataAnchor
	err := i.UnmarshalMessage(&dataAnchor)
	return &dataAnchor, err
}

type DataAnchorIndexKey interface {
	id() uint32
	values() []interface{}
	dataAnchorIndexKey()
}

type DataAnchorIdIndexKey struct {
	vs []interface{}
}

func (x DataAnchorIdIndexKey) id() uint32            { return 2 /* primary key */ }
func (x DataAnchorIdIndexKey) values() []interface{} { return x.vs }
func (x DataAnchorIdIndexKey) dataAnchorIndexKey()   {}

var _ DataAnchorIndexKey = DataAnchorIdIndexKey{}

func (x DataAnchorIdIndexKey) WithId(id []byte) DataAnchorIdIndexKey {
	x.vs = []interface{}{id}
	return x
}

type dataAnchorStore struct {
	table ormtable.Table
}

func (x dataAnchorStore) Insert(ctx context.Context, dataAnchor *DataAnchor) error {
	return x.table.Insert(ctx, dataAnchor)
}
func (x dataAnchorStore) Update(ctx context.Context, dataAnchor *DataAnchor) error {
	return x.table.Update(ctx, dataAnchor)
}
func (x dataAnchorStore) Save(ctx context.Context, dataAnchor *DataAnchor) error {
	return x.table.Save(ctx, dataAnchor)
}
func (x dataAnchorStore) Delete(ctx context.Context, dataAnchor *DataAnchor) error {
	return x.table.Delete(ctx, dataAnchor)
}
func (x dataAnchorStore) Has(ctx context.Context, id []byte) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, id)
}
func (x dataAnchorStore) Get(ctx context.Context, id []byte) (*DataAnchor, error) {
	var dataAnchor DataAnchor
	found, err := x.table.PrimaryKey().Get(ctx, &dataAnchor, id)
	if !found {
		return nil, err
	}
	return &dataAnchor, err
}
func (x dataAnchorStore) List(ctx context.Context, prefixKey DataAnchorIndexKey, opts ...ormlist.Option) (DataAnchorIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return DataAnchorIterator{it}, err
}
func (x dataAnchorStore) ListRange(ctx context.Context, from, to DataAnchorIndexKey, opts ...ormlist.Option) (DataAnchorIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return DataAnchorIterator{it}, err
}

var _ DataAnchorStore = dataAnchorStore{}

type DataSignerStore interface {
	Insert(ctx context.Context, dataSigner *DataSigner) error
	Update(ctx context.Context, dataSigner *DataSigner) error
	Save(ctx context.Context, dataSigner *DataSigner) error
	Delete(ctx context.Context, dataSigner *DataSigner) error
	Has(ctx context.Context, id []byte) (found bool, err error)
	Get(ctx context.Context, id []byte) (*DataSigner, error)
	List(ctx context.Context, prefixKey DataSignerIndexKey, opts ...ormlist.Option) (DataSignerIterator, error)
	ListRange(ctx context.Context, from, to DataSignerIndexKey, opts ...ormlist.Option) (DataSignerIterator, error)
}

type DataSignerIterator struct {
	ormtable.Iterator
}

func (i DataSignerIterator) Value() (*DataSigner, error) {
	var dataSigner DataSigner
	err := i.UnmarshalMessage(&dataSigner)
	return &dataSigner, err
}

type DataSignerIndexKey interface {
	id() uint32
	values() []interface{}
	dataSignerIndexKey()
}

type DataSignerIdIndexKey struct {
	vs []interface{}
}

func (x DataSignerIdIndexKey) id() uint32            { return 3 /* primary key */ }
func (x DataSignerIdIndexKey) values() []interface{} { return x.vs }
func (x DataSignerIdIndexKey) dataSignerIndexKey()   {}

var _ DataSignerIndexKey = DataSignerIdIndexKey{}

func (x DataSignerIdIndexKey) WithId(id []byte) DataSignerIdIndexKey {
	x.vs = []interface{}{id}
	return x
}

type dataSignerStore struct {
	table ormtable.Table
}

func (x dataSignerStore) Insert(ctx context.Context, dataSigner *DataSigner) error {
	return x.table.Insert(ctx, dataSigner)
}
func (x dataSignerStore) Update(ctx context.Context, dataSigner *DataSigner) error {
	return x.table.Update(ctx, dataSigner)
}
func (x dataSignerStore) Save(ctx context.Context, dataSigner *DataSigner) error {
	return x.table.Save(ctx, dataSigner)
}
func (x dataSignerStore) Delete(ctx context.Context, dataSigner *DataSigner) error {
	return x.table.Delete(ctx, dataSigner)
}
func (x dataSignerStore) Has(ctx context.Context, id []byte) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, id)
}
func (x dataSignerStore) Get(ctx context.Context, id []byte) (*DataSigner, error) {
	var dataSigner DataSigner
	found, err := x.table.PrimaryKey().Get(ctx, &dataSigner, id)
	if !found {
		return nil, err
	}
	return &dataSigner, err
}
func (x dataSignerStore) List(ctx context.Context, prefixKey DataSignerIndexKey, opts ...ormlist.Option) (DataSignerIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return DataSignerIterator{it}, err
}
func (x dataSignerStore) ListRange(ctx context.Context, from, to DataSignerIndexKey, opts ...ormlist.Option) (DataSignerIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return DataSignerIterator{it}, err
}

var _ DataSignerStore = dataSignerStore{}

type ResolverURLStore interface {
	Insert(ctx context.Context, resolverURL *ResolverURL) error
	Update(ctx context.Context, resolverURL *ResolverURL) error
	Save(ctx context.Context, resolverURL *ResolverURL) error
	Delete(ctx context.Context, resolverURL *ResolverURL) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	Get(ctx context.Context, id uint64) (*ResolverURL, error)
	List(ctx context.Context, prefixKey ResolverURLIndexKey, opts ...ormlist.Option) (ResolverURLIterator, error)
	ListRange(ctx context.Context, from, to ResolverURLIndexKey, opts ...ormlist.Option) (ResolverURLIterator, error)
}

type ResolverURLIterator struct {
	ormtable.Iterator
}

func (i ResolverURLIterator) Value() (*ResolverURL, error) {
	var resolverURL ResolverURL
	err := i.UnmarshalMessage(&resolverURL)
	return &resolverURL, err
}

type ResolverURLIndexKey interface {
	id() uint32
	values() []interface{}
	resolverURLIndexKey()
}

type ResolverURLIdIndexKey struct {
	vs []interface{}
}

func (x ResolverURLIdIndexKey) id() uint32            { return 4 /* primary key */ }
func (x ResolverURLIdIndexKey) values() []interface{} { return x.vs }
func (x ResolverURLIdIndexKey) resolverURLIndexKey()  {}

var _ ResolverURLIndexKey = ResolverURLIdIndexKey{}

func (x ResolverURLIdIndexKey) WithId(id uint64) ResolverURLIdIndexKey {
	x.vs = []interface{}{id}
	return x
}

type resolverURLStore struct {
	table ormtable.Table
}

func (x resolverURLStore) Insert(ctx context.Context, resolverURL *ResolverURL) error {
	return x.table.Insert(ctx, resolverURL)
}
func (x resolverURLStore) Update(ctx context.Context, resolverURL *ResolverURL) error {
	return x.table.Update(ctx, resolverURL)
}
func (x resolverURLStore) Save(ctx context.Context, resolverURL *ResolverURL) error {
	return x.table.Save(ctx, resolverURL)
}
func (x resolverURLStore) Delete(ctx context.Context, resolverURL *ResolverURL) error {
	return x.table.Delete(ctx, resolverURL)
}
func (x resolverURLStore) Has(ctx context.Context, id uint64) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, id)
}
func (x resolverURLStore) Get(ctx context.Context, id uint64) (*ResolverURL, error) {
	var resolverURL ResolverURL
	found, err := x.table.PrimaryKey().Get(ctx, &resolverURL, id)
	if !found {
		return nil, err
	}
	return &resolverURL, err
}
func (x resolverURLStore) List(ctx context.Context, prefixKey ResolverURLIndexKey, opts ...ormlist.Option) (ResolverURLIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return ResolverURLIterator{it}, err
}
func (x resolverURLStore) ListRange(ctx context.Context, from, to ResolverURLIndexKey, opts ...ormlist.Option) (ResolverURLIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return ResolverURLIterator{it}, err
}

var _ ResolverURLStore = resolverURLStore{}

type DataResolverStore interface {
	Insert(ctx context.Context, dataResolver *DataResolver) error
	Update(ctx context.Context, dataResolver *DataResolver) error
	Save(ctx context.Context, dataResolver *DataResolver) error
	Delete(ctx context.Context, dataResolver *DataResolver) error
	Has(ctx context.Context, data_id uint64, resolver_id uint64) (found bool, err error)
	Get(ctx context.Context, data_id uint64, resolver_id uint64) (*DataResolver, error)
	List(ctx context.Context, prefixKey DataResolverIndexKey, opts ...ormlist.Option) (DataResolverIterator, error)
	ListRange(ctx context.Context, from, to DataResolverIndexKey, opts ...ormlist.Option) (DataResolverIterator, error)
}

type DataResolverIterator struct {
	ormtable.Iterator
}

func (i DataResolverIterator) Value() (*DataResolver, error) {
	var dataResolver DataResolver
	err := i.UnmarshalMessage(&dataResolver)
	return &dataResolver, err
}

type DataResolverIndexKey interface {
	id() uint32
	values() []interface{}
	dataResolverIndexKey()
}

type DataResolverDataIdResolverIdIndexKey struct {
	vs []interface{}
}

func (x DataResolverDataIdResolverIdIndexKey) id() uint32            { return 5 /* primary key */ }
func (x DataResolverDataIdResolverIdIndexKey) values() []interface{} { return x.vs }
func (x DataResolverDataIdResolverIdIndexKey) dataResolverIndexKey() {}

var _ DataResolverIndexKey = DataResolverDataIdResolverIdIndexKey{}

func (x DataResolverDataIdResolverIdIndexKey) WithDataId(data_id uint64) DataResolverDataIdResolverIdIndexKey {
	x.vs = []interface{}{data_id}
	return x
}
func (x DataResolverDataIdResolverIdIndexKey) WithDataIdResolverId(data_id uint64, resolver_id uint64) DataResolverDataIdResolverIdIndexKey {
	x.vs = []interface{}{data_id, resolver_id}
	return x
}

type dataResolverStore struct {
	table ormtable.Table
}

func (x dataResolverStore) Insert(ctx context.Context, dataResolver *DataResolver) error {
	return x.table.Insert(ctx, dataResolver)
}
func (x dataResolverStore) Update(ctx context.Context, dataResolver *DataResolver) error {
	return x.table.Update(ctx, dataResolver)
}
func (x dataResolverStore) Save(ctx context.Context, dataResolver *DataResolver) error {
	return x.table.Save(ctx, dataResolver)
}
func (x dataResolverStore) Delete(ctx context.Context, dataResolver *DataResolver) error {
	return x.table.Delete(ctx, dataResolver)
}
func (x dataResolverStore) Has(ctx context.Context, data_id uint64, resolver_id uint64) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, data_id, resolver_id)
}
func (x dataResolverStore) Get(ctx context.Context, data_id uint64, resolver_id uint64) (*DataResolver, error) {
	var dataResolver DataResolver
	found, err := x.table.PrimaryKey().Get(ctx, &dataResolver, data_id, resolver_id)
	if !found {
		return nil, err
	}
	return &dataResolver, err
}
func (x dataResolverStore) List(ctx context.Context, prefixKey DataResolverIndexKey, opts ...ormlist.Option) (DataResolverIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return DataResolverIterator{it}, err
}
func (x dataResolverStore) ListRange(ctx context.Context, from, to DataResolverIndexKey, opts ...ormlist.Option) (DataResolverIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return DataResolverIterator{it}, err
}

var _ DataResolverStore = dataResolverStore{}

type stateStore struct {
	dataID       *dataIDStore
	dataAnchor   *dataAnchorStore
	dataSigner   *dataSignerStore
	resolverURL  *resolverURLStore
	dataResolver *dataResolverStore
}

func (x stateStore) DataID() DataIDStore {
	return x.dataID
}
func (x stateStore) DataAnchor() DataAnchorStore {
	return x.dataAnchor
}
func (x stateStore) DataSigner() DataSignerStore {
	return x.dataSigner
}
func (x stateStore) ResolverURL() ResolverURLStore {
	return x.resolverURL
}
func (x stateStore) DataResolver() DataResolverStore {
	return x.dataResolver
}

var _ StateStore = stateStore{}
