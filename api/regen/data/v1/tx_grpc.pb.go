// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: regen/data/v1/tx.proto

package datav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_Anchor_FullMethodName           = "/regen.data.v1.Msg/Anchor"
	Msg_Attest_FullMethodName           = "/regen.data.v1.Msg/Attest"
	Msg_DefineResolver_FullMethodName   = "/regen.data.v1.Msg/DefineResolver"
	Msg_RegisterResolver_FullMethodName = "/regen.data.v1.Msg/RegisterResolver"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// Anchor "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in Anchor is not attesting to the veracity of the underlying
	// data. They can simply be an intermediary providing timestamp services.
	// Attest should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	Anchor(ctx context.Context, in *MsgAnchor, opts ...grpc.CallOption) (*MsgAnchorResponse, error)
	// Attest allows for digital signing of an arbitrary piece of data on the
	// blockchain. By attesting to data, the attestor is making a statement about
	// the veracity of the data itself. It is like signing a legal document,
	// meaning that I agree to all conditions and to the best of my knowledge
	// everything is true. When anchoring data, the sender is not attesting to the
	// veracity of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// Attest implicitly calls Anchor if the data was not already anchored.
	//
	// Attest can be called multiple times for the same content hash with
	// different attestors and those attestors will be appended to the list of
	// attestors. If the same attestor attempts to attest to the same piece of
	// data, the attestor will be ignored and a new attestation with a new
	// timestamp will not be added.
	Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error)
	// DefineResolver defines a resolver URL and assigns it a new integer ID
	// that can be used in calls to RegisterResolver.
	DefineResolver(ctx context.Context, in *MsgDefineResolver, opts ...grpc.CallOption) (*MsgDefineResolverResponse, error)
	// RegisterResolver registers data content hashes
	RegisterResolver(ctx context.Context, in *MsgRegisterResolver, opts ...grpc.CallOption) (*MsgRegisterResolverResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Anchor(ctx context.Context, in *MsgAnchor, opts ...grpc.CallOption) (*MsgAnchorResponse, error) {
	out := new(MsgAnchorResponse)
	err := c.cc.Invoke(ctx, Msg_Anchor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error) {
	out := new(MsgAttestResponse)
	err := c.cc.Invoke(ctx, Msg_Attest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DefineResolver(ctx context.Context, in *MsgDefineResolver, opts ...grpc.CallOption) (*MsgDefineResolverResponse, error) {
	out := new(MsgDefineResolverResponse)
	err := c.cc.Invoke(ctx, Msg_DefineResolver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterResolver(ctx context.Context, in *MsgRegisterResolver, opts ...grpc.CallOption) (*MsgRegisterResolverResponse, error) {
	out := new(MsgRegisterResolverResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterResolver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// Anchor "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in Anchor is not attesting to the veracity of the underlying
	// data. They can simply be an intermediary providing timestamp services.
	// Attest should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	Anchor(context.Context, *MsgAnchor) (*MsgAnchorResponse, error)
	// Attest allows for digital signing of an arbitrary piece of data on the
	// blockchain. By attesting to data, the attestor is making a statement about
	// the veracity of the data itself. It is like signing a legal document,
	// meaning that I agree to all conditions and to the best of my knowledge
	// everything is true. When anchoring data, the sender is not attesting to the
	// veracity of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// Attest implicitly calls Anchor if the data was not already anchored.
	//
	// Attest can be called multiple times for the same content hash with
	// different attestors and those attestors will be appended to the list of
	// attestors. If the same attestor attempts to attest to the same piece of
	// data, the attestor will be ignored and a new attestation with a new
	// timestamp will not be added.
	Attest(context.Context, *MsgAttest) (*MsgAttestResponse, error)
	// DefineResolver defines a resolver URL and assigns it a new integer ID
	// that can be used in calls to RegisterResolver.
	DefineResolver(context.Context, *MsgDefineResolver) (*MsgDefineResolverResponse, error)
	// RegisterResolver registers data content hashes
	RegisterResolver(context.Context, *MsgRegisterResolver) (*MsgRegisterResolverResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) Anchor(context.Context, *MsgAnchor) (*MsgAnchorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Anchor not implemented")
}
func (UnimplementedMsgServer) Attest(context.Context, *MsgAttest) (*MsgAttestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attest not implemented")
}
func (UnimplementedMsgServer) DefineResolver(context.Context, *MsgDefineResolver) (*MsgDefineResolverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineResolver not implemented")
}
func (UnimplementedMsgServer) RegisterResolver(context.Context, *MsgRegisterResolver) (*MsgRegisterResolverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResolver not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_Anchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAnchor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Anchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Anchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Anchor(ctx, req.(*MsgAnchor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAttest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Attest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Attest(ctx, req.(*MsgAttest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DefineResolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDefineResolver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DefineResolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DefineResolver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DefineResolver(ctx, req.(*MsgDefineResolver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterResolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterResolver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterResolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterResolver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterResolver(ctx, req.(*MsgRegisterResolver))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regen.data.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Anchor",
			Handler:    _Msg_Anchor_Handler,
		},
		{
			MethodName: "Attest",
			Handler:    _Msg_Attest_Handler,
		},
		{
			MethodName: "DefineResolver",
			Handler:    _Msg_DefineResolver_Handler,
		},
		{
			MethodName: "RegisterResolver",
			Handler:    _Msg_RegisterResolver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/data/v1/tx.proto",
}
