// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: regen/ecocredit/curation/v1beta1/tx.proto

package curationv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_DefineTag_FullMethodName      = "/regen.ecocredit.curation.v1beta1.Msg/DefineTag"
	Msg_Tag_FullMethodName            = "/regen.ecocredit.curation.v1beta1.Msg/Tag"
	Msg_Untag_FullMethodName          = "/regen.ecocredit.curation.v1beta1.Msg/Untag"
	Msg_UpdateCurator_FullMethodName  = "/regen.ecocredit.curation.v1beta1.Msg/UpdateCurator"
	Msg_UpdateMetadata_FullMethodName = "/regen.ecocredit.curation.v1beta1.Msg/UpdateMetadata"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// DefineTag defines a new tag.
	DefineTag(ctx context.Context, in *MsgDefineTag, opts ...grpc.CallOption) (*MsgDefineTagResponse, error)
	// Tag tags a target with a tag.
	Tag(ctx context.Context, in *MsgTag, opts ...grpc.CallOption) (*MsgTagResponse, error)
	// Untag removes a tag from a target.
	Untag(ctx context.Context, in *MsgUntag, opts ...grpc.CallOption) (*MsgUntagResponse, error)
	// UpdateCurator updates the curator of a tag.
	UpdateCurator(ctx context.Context, in *MsgUpdateCurator, opts ...grpc.CallOption) (*MsgUpdateCuratorResponse, error)
	// UpdateMetadata updates the metadata of a tag.
	UpdateMetadata(ctx context.Context, in *MsgUpdateMetadata, opts ...grpc.CallOption) (*MsgUpdateMetadataResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DefineTag(ctx context.Context, in *MsgDefineTag, opts ...grpc.CallOption) (*MsgDefineTagResponse, error) {
	out := new(MsgDefineTagResponse)
	err := c.cc.Invoke(ctx, Msg_DefineTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Tag(ctx context.Context, in *MsgTag, opts ...grpc.CallOption) (*MsgTagResponse, error) {
	out := new(MsgTagResponse)
	err := c.cc.Invoke(ctx, Msg_Tag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Untag(ctx context.Context, in *MsgUntag, opts ...grpc.CallOption) (*MsgUntagResponse, error) {
	out := new(MsgUntagResponse)
	err := c.cc.Invoke(ctx, Msg_Untag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCurator(ctx context.Context, in *MsgUpdateCurator, opts ...grpc.CallOption) (*MsgUpdateCuratorResponse, error) {
	out := new(MsgUpdateCuratorResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCurator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMetadata(ctx context.Context, in *MsgUpdateMetadata, opts ...grpc.CallOption) (*MsgUpdateMetadataResponse, error) {
	out := new(MsgUpdateMetadataResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// DefineTag defines a new tag.
	DefineTag(context.Context, *MsgDefineTag) (*MsgDefineTagResponse, error)
	// Tag tags a target with a tag.
	Tag(context.Context, *MsgTag) (*MsgTagResponse, error)
	// Untag removes a tag from a target.
	Untag(context.Context, *MsgUntag) (*MsgUntagResponse, error)
	// UpdateCurator updates the curator of a tag.
	UpdateCurator(context.Context, *MsgUpdateCurator) (*MsgUpdateCuratorResponse, error)
	// UpdateMetadata updates the metadata of a tag.
	UpdateMetadata(context.Context, *MsgUpdateMetadata) (*MsgUpdateMetadataResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) DefineTag(context.Context, *MsgDefineTag) (*MsgDefineTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineTag not implemented")
}
func (UnimplementedMsgServer) Tag(context.Context, *MsgTag) (*MsgTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (UnimplementedMsgServer) Untag(context.Context, *MsgUntag) (*MsgUntagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Untag not implemented")
}
func (UnimplementedMsgServer) UpdateCurator(context.Context, *MsgUpdateCurator) (*MsgUpdateCuratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurator not implemented")
}
func (UnimplementedMsgServer) UpdateMetadata(context.Context, *MsgUpdateMetadata) (*MsgUpdateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_DefineTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDefineTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DefineTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DefineTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DefineTag(ctx, req.(*MsgDefineTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Tag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Tag(ctx, req.(*MsgTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Untag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUntag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Untag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Untag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Untag(ctx, req.(*MsgUntag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCurator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCurator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCurator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCurator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCurator(ctx, req.(*MsgUpdateCurator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMetadata(ctx, req.(*MsgUpdateMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regen.ecocredit.curation.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefineTag",
			Handler:    _Msg_DefineTag_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _Msg_Tag_Handler,
		},
		{
			MethodName: "Untag",
			Handler:    _Msg_Untag_Handler,
		},
		{
			MethodName: "UpdateCurator",
			Handler:    _Msg_UpdateCurator_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _Msg_UpdateMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/ecocredit/curation/v1beta1/tx.proto",
}
