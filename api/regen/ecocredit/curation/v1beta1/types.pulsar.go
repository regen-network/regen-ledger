// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package curationv1beta1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_TagTarget            protoreflect.MessageDescriptor
	fd_TagTarget_address    protoreflect.FieldDescriptor
	fd_TagTarget_class_id   protoreflect.FieldDescriptor
	fd_TagTarget_project_id protoreflect.FieldDescriptor
	fd_TagTarget_batch_id   protoreflect.FieldDescriptor
)

func init() {
	file_regen_ecocredit_curation_v1beta1_types_proto_init()
	md_TagTarget = File_regen_ecocredit_curation_v1beta1_types_proto.Messages().ByName("TagTarget")
	fd_TagTarget_address = md_TagTarget.Fields().ByName("address")
	fd_TagTarget_class_id = md_TagTarget.Fields().ByName("class_id")
	fd_TagTarget_project_id = md_TagTarget.Fields().ByName("project_id")
	fd_TagTarget_batch_id = md_TagTarget.Fields().ByName("batch_id")
}

var _ protoreflect.Message = (*fastReflection_TagTarget)(nil)

type fastReflection_TagTarget TagTarget

func (x *TagTarget) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TagTarget)(x)
}

func (x *TagTarget) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TagTarget_messageType fastReflection_TagTarget_messageType
var _ protoreflect.MessageType = fastReflection_TagTarget_messageType{}

type fastReflection_TagTarget_messageType struct{}

func (x fastReflection_TagTarget_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TagTarget)(nil)
}
func (x fastReflection_TagTarget_messageType) New() protoreflect.Message {
	return new(fastReflection_TagTarget)
}
func (x fastReflection_TagTarget_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TagTarget
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TagTarget) Descriptor() protoreflect.MessageDescriptor {
	return md_TagTarget
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TagTarget) Type() protoreflect.MessageType {
	return _fastReflection_TagTarget_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TagTarget) New() protoreflect.Message {
	return new(fastReflection_TagTarget)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TagTarget) Interface() protoreflect.ProtoMessage {
	return (*TagTarget)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TagTarget) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sum != nil {
		switch o := x.Sum.(type) {
		case *TagTarget_Address:
			v := o.Address
			value := protoreflect.ValueOfString(v)
			if !f(fd_TagTarget_address, value) {
				return
			}
		case *TagTarget_ClassId:
			v := o.ClassId
			value := protoreflect.ValueOfString(v)
			if !f(fd_TagTarget_class_id, value) {
				return
			}
		case *TagTarget_ProjectId:
			v := o.ProjectId
			value := protoreflect.ValueOfString(v)
			if !f(fd_TagTarget_project_id, value) {
				return
			}
		case *TagTarget_BatchId:
			v := o.BatchId
			value := protoreflect.ValueOfString(v)
			if !f(fd_TagTarget_batch_id, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TagTarget) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagTarget.address":
		if x.Sum == nil {
			return false
		} else if _, ok := x.Sum.(*TagTarget_Address); ok {
			return true
		} else {
			return false
		}
	case "regen.ecocredit.curation.v1beta1.TagTarget.class_id":
		if x.Sum == nil {
			return false
		} else if _, ok := x.Sum.(*TagTarget_ClassId); ok {
			return true
		} else {
			return false
		}
	case "regen.ecocredit.curation.v1beta1.TagTarget.project_id":
		if x.Sum == nil {
			return false
		} else if _, ok := x.Sum.(*TagTarget_ProjectId); ok {
			return true
		} else {
			return false
		}
	case "regen.ecocredit.curation.v1beta1.TagTarget.batch_id":
		if x.Sum == nil {
			return false
		} else if _, ok := x.Sum.(*TagTarget_BatchId); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTarget"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTarget does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTarget) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagTarget.address":
		x.Sum = nil
	case "regen.ecocredit.curation.v1beta1.TagTarget.class_id":
		x.Sum = nil
	case "regen.ecocredit.curation.v1beta1.TagTarget.project_id":
		x.Sum = nil
	case "regen.ecocredit.curation.v1beta1.TagTarget.batch_id":
		x.Sum = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTarget"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTarget does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TagTarget) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagTarget.address":
		if x.Sum == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Sum.(*TagTarget_Address); ok {
			return protoreflect.ValueOfString(v.Address)
		} else {
			return protoreflect.ValueOfString("")
		}
	case "regen.ecocredit.curation.v1beta1.TagTarget.class_id":
		if x.Sum == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Sum.(*TagTarget_ClassId); ok {
			return protoreflect.ValueOfString(v.ClassId)
		} else {
			return protoreflect.ValueOfString("")
		}
	case "regen.ecocredit.curation.v1beta1.TagTarget.project_id":
		if x.Sum == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Sum.(*TagTarget_ProjectId); ok {
			return protoreflect.ValueOfString(v.ProjectId)
		} else {
			return protoreflect.ValueOfString("")
		}
	case "regen.ecocredit.curation.v1beta1.TagTarget.batch_id":
		if x.Sum == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Sum.(*TagTarget_BatchId); ok {
			return protoreflect.ValueOfString(v.BatchId)
		} else {
			return protoreflect.ValueOfString("")
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTarget"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTarget does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTarget) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagTarget.address":
		cv := value.Interface().(string)
		x.Sum = &TagTarget_Address{Address: cv}
	case "regen.ecocredit.curation.v1beta1.TagTarget.class_id":
		cv := value.Interface().(string)
		x.Sum = &TagTarget_ClassId{ClassId: cv}
	case "regen.ecocredit.curation.v1beta1.TagTarget.project_id":
		cv := value.Interface().(string)
		x.Sum = &TagTarget_ProjectId{ProjectId: cv}
	case "regen.ecocredit.curation.v1beta1.TagTarget.batch_id":
		cv := value.Interface().(string)
		x.Sum = &TagTarget_BatchId{BatchId: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTarget"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTarget does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTarget) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagTarget.address":
		panic(fmt.Errorf("field address of message regen.ecocredit.curation.v1beta1.TagTarget is not mutable"))
	case "regen.ecocredit.curation.v1beta1.TagTarget.class_id":
		panic(fmt.Errorf("field class_id of message regen.ecocredit.curation.v1beta1.TagTarget is not mutable"))
	case "regen.ecocredit.curation.v1beta1.TagTarget.project_id":
		panic(fmt.Errorf("field project_id of message regen.ecocredit.curation.v1beta1.TagTarget is not mutable"))
	case "regen.ecocredit.curation.v1beta1.TagTarget.batch_id":
		panic(fmt.Errorf("field batch_id of message regen.ecocredit.curation.v1beta1.TagTarget is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTarget"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTarget does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TagTarget) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagTarget.address":
		return protoreflect.ValueOfString("")
	case "regen.ecocredit.curation.v1beta1.TagTarget.class_id":
		return protoreflect.ValueOfString("")
	case "regen.ecocredit.curation.v1beta1.TagTarget.project_id":
		return protoreflect.ValueOfString("")
	case "regen.ecocredit.curation.v1beta1.TagTarget.batch_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTarget"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTarget does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TagTarget) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagTarget.sum":
		if x.Sum == nil {
			return nil
		}
		switch x.Sum.(type) {
		case *TagTarget_Address:
			return x.Descriptor().Fields().ByName("address")
		case *TagTarget_ClassId:
			return x.Descriptor().Fields().ByName("class_id")
		case *TagTarget_ProjectId:
			return x.Descriptor().Fields().ByName("project_id")
		case *TagTarget_BatchId:
			return x.Descriptor().Fields().ByName("batch_id")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.ecocredit.curation.v1beta1.TagTarget", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TagTarget) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTarget) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TagTarget) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TagTarget) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TagTarget)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Sum.(type) {
		case *TagTarget_Address:
			if x == nil {
				break
			}
			l = len(x.Address)
			n += 1 + l + runtime.Sov(uint64(l))
		case *TagTarget_ClassId:
			if x == nil {
				break
			}
			l = len(x.ClassId)
			n += 1 + l + runtime.Sov(uint64(l))
		case *TagTarget_ProjectId:
			if x == nil {
				break
			}
			l = len(x.ProjectId)
			n += 1 + l + runtime.Sov(uint64(l))
		case *TagTarget_BatchId:
			if x == nil {
				break
			}
			l = len(x.BatchId)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TagTarget)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Sum.(type) {
		case *TagTarget_Address:
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		case *TagTarget_ClassId:
			i -= len(x.ClassId)
			copy(dAtA[i:], x.ClassId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ClassId)))
			i--
			dAtA[i] = 0x12
		case *TagTarget_ProjectId:
			i -= len(x.ProjectId)
			copy(dAtA[i:], x.ProjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProjectId)))
			i--
			dAtA[i] = 0x1a
		case *TagTarget_BatchId:
			i -= len(x.BatchId)
			copy(dAtA[i:], x.BatchId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BatchId)))
			i--
			dAtA[i] = 0x22
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TagTarget)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagTarget: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagTarget: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sum = &TagTarget_Address{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sum = &TagTarget_ClassId{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sum = &TagTarget_ProjectId{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sum = &TagTarget_BatchId{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AllowedTagTargets         protoreflect.MessageDescriptor
	fd_AllowedTagTargets_address protoreflect.FieldDescriptor
	fd_AllowedTagTargets_class   protoreflect.FieldDescriptor
	fd_AllowedTagTargets_project protoreflect.FieldDescriptor
	fd_AllowedTagTargets_batch   protoreflect.FieldDescriptor
)

func init() {
	file_regen_ecocredit_curation_v1beta1_types_proto_init()
	md_AllowedTagTargets = File_regen_ecocredit_curation_v1beta1_types_proto.Messages().ByName("AllowedTagTargets")
	fd_AllowedTagTargets_address = md_AllowedTagTargets.Fields().ByName("address")
	fd_AllowedTagTargets_class = md_AllowedTagTargets.Fields().ByName("class")
	fd_AllowedTagTargets_project = md_AllowedTagTargets.Fields().ByName("project")
	fd_AllowedTagTargets_batch = md_AllowedTagTargets.Fields().ByName("batch")
}

var _ protoreflect.Message = (*fastReflection_AllowedTagTargets)(nil)

type fastReflection_AllowedTagTargets AllowedTagTargets

func (x *AllowedTagTargets) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AllowedTagTargets)(x)
}

func (x *AllowedTagTargets) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AllowedTagTargets_messageType fastReflection_AllowedTagTargets_messageType
var _ protoreflect.MessageType = fastReflection_AllowedTagTargets_messageType{}

type fastReflection_AllowedTagTargets_messageType struct{}

func (x fastReflection_AllowedTagTargets_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AllowedTagTargets)(nil)
}
func (x fastReflection_AllowedTagTargets_messageType) New() protoreflect.Message {
	return new(fastReflection_AllowedTagTargets)
}
func (x fastReflection_AllowedTagTargets_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AllowedTagTargets
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AllowedTagTargets) Descriptor() protoreflect.MessageDescriptor {
	return md_AllowedTagTargets
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AllowedTagTargets) Type() protoreflect.MessageType {
	return _fastReflection_AllowedTagTargets_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AllowedTagTargets) New() protoreflect.Message {
	return new(fastReflection_AllowedTagTargets)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AllowedTagTargets) Interface() protoreflect.ProtoMessage {
	return (*AllowedTagTargets)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AllowedTagTargets) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != false {
		value := protoreflect.ValueOfBool(x.Address)
		if !f(fd_AllowedTagTargets_address, value) {
			return
		}
	}
	if x.Class != false {
		value := protoreflect.ValueOfBool(x.Class)
		if !f(fd_AllowedTagTargets_class, value) {
			return
		}
	}
	if x.Project != false {
		value := protoreflect.ValueOfBool(x.Project)
		if !f(fd_AllowedTagTargets_project, value) {
			return
		}
	}
	if x.Batch != false {
		value := protoreflect.ValueOfBool(x.Batch)
		if !f(fd_AllowedTagTargets_batch, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AllowedTagTargets) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.address":
		return x.Address != false
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.class":
		return x.Class != false
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.project":
		return x.Project != false
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.batch":
		return x.Batch != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.AllowedTagTargets"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.AllowedTagTargets does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AllowedTagTargets) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.address":
		x.Address = false
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.class":
		x.Class = false
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.project":
		x.Project = false
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.batch":
		x.Batch = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.AllowedTagTargets"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.AllowedTagTargets does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AllowedTagTargets) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.address":
		value := x.Address
		return protoreflect.ValueOfBool(value)
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.class":
		value := x.Class
		return protoreflect.ValueOfBool(value)
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.project":
		value := x.Project
		return protoreflect.ValueOfBool(value)
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.batch":
		value := x.Batch
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.AllowedTagTargets"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.AllowedTagTargets does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AllowedTagTargets) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.address":
		x.Address = value.Bool()
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.class":
		x.Class = value.Bool()
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.project":
		x.Project = value.Bool()
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.batch":
		x.Batch = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.AllowedTagTargets"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.AllowedTagTargets does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AllowedTagTargets) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.address":
		panic(fmt.Errorf("field address of message regen.ecocredit.curation.v1beta1.AllowedTagTargets is not mutable"))
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.class":
		panic(fmt.Errorf("field class of message regen.ecocredit.curation.v1beta1.AllowedTagTargets is not mutable"))
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.project":
		panic(fmt.Errorf("field project of message regen.ecocredit.curation.v1beta1.AllowedTagTargets is not mutable"))
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.batch":
		panic(fmt.Errorf("field batch of message regen.ecocredit.curation.v1beta1.AllowedTagTargets is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.AllowedTagTargets"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.AllowedTagTargets does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AllowedTagTargets) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.address":
		return protoreflect.ValueOfBool(false)
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.class":
		return protoreflect.ValueOfBool(false)
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.project":
		return protoreflect.ValueOfBool(false)
	case "regen.ecocredit.curation.v1beta1.AllowedTagTargets.batch":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.AllowedTagTargets"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.AllowedTagTargets does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AllowedTagTargets) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.ecocredit.curation.v1beta1.AllowedTagTargets", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AllowedTagTargets) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AllowedTagTargets) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AllowedTagTargets) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AllowedTagTargets) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AllowedTagTargets)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Address {
			n += 2
		}
		if x.Class {
			n += 2
		}
		if x.Project {
			n += 2
		}
		if x.Batch {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AllowedTagTargets)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Batch {
			i--
			if x.Batch {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if x.Project {
			i--
			if x.Project {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.Class {
			i--
			if x.Class {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if x.Address {
			i--
			if x.Address {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AllowedTagTargets)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AllowedTagTargets: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AllowedTagTargets: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Address = bool(v != 0)
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Class = bool(v != 0)
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Project = bool(v != 0)
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Batch = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TagMeta                 protoreflect.MessageDescriptor
	fd_TagMeta_name            protoreflect.FieldDescriptor
	fd_TagMeta_description     protoreflect.FieldDescriptor
	fd_TagMeta_allowed_targets protoreflect.FieldDescriptor
)

func init() {
	file_regen_ecocredit_curation_v1beta1_types_proto_init()
	md_TagMeta = File_regen_ecocredit_curation_v1beta1_types_proto.Messages().ByName("TagMeta")
	fd_TagMeta_name = md_TagMeta.Fields().ByName("name")
	fd_TagMeta_description = md_TagMeta.Fields().ByName("description")
	fd_TagMeta_allowed_targets = md_TagMeta.Fields().ByName("allowed_targets")
}

var _ protoreflect.Message = (*fastReflection_TagMeta)(nil)

type fastReflection_TagMeta TagMeta

func (x *TagMeta) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TagMeta)(x)
}

func (x *TagMeta) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TagMeta_messageType fastReflection_TagMeta_messageType
var _ protoreflect.MessageType = fastReflection_TagMeta_messageType{}

type fastReflection_TagMeta_messageType struct{}

func (x fastReflection_TagMeta_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TagMeta)(nil)
}
func (x fastReflection_TagMeta_messageType) New() protoreflect.Message {
	return new(fastReflection_TagMeta)
}
func (x fastReflection_TagMeta_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TagMeta
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TagMeta) Descriptor() protoreflect.MessageDescriptor {
	return md_TagMeta
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TagMeta) Type() protoreflect.MessageType {
	return _fastReflection_TagMeta_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TagMeta) New() protoreflect.Message {
	return new(fastReflection_TagMeta)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TagMeta) Interface() protoreflect.ProtoMessage {
	return (*TagMeta)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TagMeta) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_TagMeta_name, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_TagMeta_description, value) {
			return
		}
	}
	if x.AllowedTargets != nil {
		value := protoreflect.ValueOfMessage(x.AllowedTargets.ProtoReflect())
		if !f(fd_TagMeta_allowed_targets, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TagMeta) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagMeta.name":
		return x.Name != ""
	case "regen.ecocredit.curation.v1beta1.TagMeta.description":
		return x.Description != ""
	case "regen.ecocredit.curation.v1beta1.TagMeta.allowed_targets":
		return x.AllowedTargets != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagMeta"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagMeta does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagMeta) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagMeta.name":
		x.Name = ""
	case "regen.ecocredit.curation.v1beta1.TagMeta.description":
		x.Description = ""
	case "regen.ecocredit.curation.v1beta1.TagMeta.allowed_targets":
		x.AllowedTargets = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagMeta"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagMeta does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TagMeta) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagMeta.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "regen.ecocredit.curation.v1beta1.TagMeta.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "regen.ecocredit.curation.v1beta1.TagMeta.allowed_targets":
		value := x.AllowedTargets
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagMeta"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagMeta does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagMeta) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagMeta.name":
		x.Name = value.Interface().(string)
	case "regen.ecocredit.curation.v1beta1.TagMeta.description":
		x.Description = value.Interface().(string)
	case "regen.ecocredit.curation.v1beta1.TagMeta.allowed_targets":
		x.AllowedTargets = value.Message().Interface().(*AllowedTagTargets)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagMeta"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagMeta does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagMeta) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagMeta.allowed_targets":
		if x.AllowedTargets == nil {
			x.AllowedTargets = new(AllowedTagTargets)
		}
		return protoreflect.ValueOfMessage(x.AllowedTargets.ProtoReflect())
	case "regen.ecocredit.curation.v1beta1.TagMeta.name":
		panic(fmt.Errorf("field name of message regen.ecocredit.curation.v1beta1.TagMeta is not mutable"))
	case "regen.ecocredit.curation.v1beta1.TagMeta.description":
		panic(fmt.Errorf("field description of message regen.ecocredit.curation.v1beta1.TagMeta is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagMeta"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagMeta does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TagMeta) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagMeta.name":
		return protoreflect.ValueOfString("")
	case "regen.ecocredit.curation.v1beta1.TagMeta.description":
		return protoreflect.ValueOfString("")
	case "regen.ecocredit.curation.v1beta1.TagMeta.allowed_targets":
		m := new(AllowedTagTargets)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagMeta"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagMeta does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TagMeta) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.ecocredit.curation.v1beta1.TagMeta", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TagMeta) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagMeta) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TagMeta) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TagMeta) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TagMeta)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AllowedTargets != nil {
			l = options.Size(x.AllowedTargets)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TagMeta)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AllowedTargets != nil {
			encoded, err := options.Marshal(x.AllowedTargets)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TagMeta)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagMeta: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagMeta: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AllowedTargets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AllowedTargets == nil {
					x.AllowedTargets = &AllowedTagTargets{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AllowedTargets); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TagType         protoreflect.MessageDescriptor
	fd_TagType_tag     protoreflect.FieldDescriptor
	fd_TagType_numeric protoreflect.FieldDescriptor
)

func init() {
	file_regen_ecocredit_curation_v1beta1_types_proto_init()
	md_TagType = File_regen_ecocredit_curation_v1beta1_types_proto.Messages().ByName("TagType")
	fd_TagType_tag = md_TagType.Fields().ByName("tag")
	fd_TagType_numeric = md_TagType.Fields().ByName("numeric")
}

var _ protoreflect.Message = (*fastReflection_TagType)(nil)

type fastReflection_TagType TagType

func (x *TagType) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TagType)(x)
}

func (x *TagType) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TagType_messageType fastReflection_TagType_messageType
var _ protoreflect.MessageType = fastReflection_TagType_messageType{}

type fastReflection_TagType_messageType struct{}

func (x fastReflection_TagType_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TagType)(nil)
}
func (x fastReflection_TagType_messageType) New() protoreflect.Message {
	return new(fastReflection_TagType)
}
func (x fastReflection_TagType_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TagType
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TagType) Descriptor() protoreflect.MessageDescriptor {
	return md_TagType
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TagType) Type() protoreflect.MessageType {
	return _fastReflection_TagType_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TagType) New() protoreflect.Message {
	return new(fastReflection_TagType)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TagType) Interface() protoreflect.ProtoMessage {
	return (*TagType)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TagType) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sum != nil {
		switch o := x.Sum.(type) {
		case *TagType_Tag:
			v := o.Tag
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_TagType_tag, value) {
				return
			}
		case *TagType_Numeric:
			v := o.Numeric
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_TagType_numeric, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TagType) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagType.tag":
		if x.Sum == nil {
			return false
		} else if _, ok := x.Sum.(*TagType_Tag); ok {
			return true
		} else {
			return false
		}
	case "regen.ecocredit.curation.v1beta1.TagType.numeric":
		if x.Sum == nil {
			return false
		} else if _, ok := x.Sum.(*TagType_Numeric); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagType does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagType) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagType.tag":
		x.Sum = nil
	case "regen.ecocredit.curation.v1beta1.TagType.numeric":
		x.Sum = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagType does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TagType) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagType.tag":
		if x.Sum == nil {
			return protoreflect.ValueOfMessage((*TagTagType)(nil).ProtoReflect())
		} else if v, ok := x.Sum.(*TagType_Tag); ok {
			return protoreflect.ValueOfMessage(v.Tag.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*TagTagType)(nil).ProtoReflect())
		}
	case "regen.ecocredit.curation.v1beta1.TagType.numeric":
		if x.Sum == nil {
			return protoreflect.ValueOfMessage((*NumericTagType)(nil).ProtoReflect())
		} else if v, ok := x.Sum.(*TagType_Numeric); ok {
			return protoreflect.ValueOfMessage(v.Numeric.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*NumericTagType)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagType does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagType) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagType.tag":
		cv := value.Message().Interface().(*TagTagType)
		x.Sum = &TagType_Tag{Tag: cv}
	case "regen.ecocredit.curation.v1beta1.TagType.numeric":
		cv := value.Message().Interface().(*NumericTagType)
		x.Sum = &TagType_Numeric{Numeric: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagType does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagType) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagType.tag":
		if x.Sum == nil {
			value := &TagTagType{}
			oneofValue := &TagType_Tag{Tag: value}
			x.Sum = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Sum.(type) {
		case *TagType_Tag:
			return protoreflect.ValueOfMessage(m.Tag.ProtoReflect())
		default:
			value := &TagTagType{}
			oneofValue := &TagType_Tag{Tag: value}
			x.Sum = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "regen.ecocredit.curation.v1beta1.TagType.numeric":
		if x.Sum == nil {
			value := &NumericTagType{}
			oneofValue := &TagType_Numeric{Numeric: value}
			x.Sum = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Sum.(type) {
		case *TagType_Numeric:
			return protoreflect.ValueOfMessage(m.Numeric.ProtoReflect())
		default:
			value := &NumericTagType{}
			oneofValue := &TagType_Numeric{Numeric: value}
			x.Sum = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagType does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TagType) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagType.tag":
		value := &TagTagType{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "regen.ecocredit.curation.v1beta1.TagType.numeric":
		value := &NumericTagType{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagType does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TagType) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "regen.ecocredit.curation.v1beta1.TagType.sum":
		if x.Sum == nil {
			return nil
		}
		switch x.Sum.(type) {
		case *TagType_Tag:
			return x.Descriptor().Fields().ByName("tag")
		case *TagType_Numeric:
			return x.Descriptor().Fields().ByName("numeric")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.ecocredit.curation.v1beta1.TagType", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TagType) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagType) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TagType) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TagType) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TagType)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Sum.(type) {
		case *TagType_Tag:
			if x == nil {
				break
			}
			l = options.Size(x.Tag)
			n += 1 + l + runtime.Sov(uint64(l))
		case *TagType_Numeric:
			if x == nil {
				break
			}
			l = options.Size(x.Numeric)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TagType)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Sum.(type) {
		case *TagType_Tag:
			encoded, err := options.Marshal(x.Tag)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *TagType_Numeric:
			encoded, err := options.Marshal(x.Numeric)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TagType)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagType: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagType: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &TagTagType{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Sum = &TagType_Tag{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &NumericTagType{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Sum = &TagType_Numeric{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TagTagType protoreflect.MessageDescriptor
)

func init() {
	file_regen_ecocredit_curation_v1beta1_types_proto_init()
	md_TagTagType = File_regen_ecocredit_curation_v1beta1_types_proto.Messages().ByName("TagTagType")
}

var _ protoreflect.Message = (*fastReflection_TagTagType)(nil)

type fastReflection_TagTagType TagTagType

func (x *TagTagType) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TagTagType)(x)
}

func (x *TagTagType) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TagTagType_messageType fastReflection_TagTagType_messageType
var _ protoreflect.MessageType = fastReflection_TagTagType_messageType{}

type fastReflection_TagTagType_messageType struct{}

func (x fastReflection_TagTagType_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TagTagType)(nil)
}
func (x fastReflection_TagTagType_messageType) New() protoreflect.Message {
	return new(fastReflection_TagTagType)
}
func (x fastReflection_TagTagType_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TagTagType
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TagTagType) Descriptor() protoreflect.MessageDescriptor {
	return md_TagTagType
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TagTagType) Type() protoreflect.MessageType {
	return _fastReflection_TagTagType_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TagTagType) New() protoreflect.Message {
	return new(fastReflection_TagTagType)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TagTagType) Interface() protoreflect.ProtoMessage {
	return (*TagTagType)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TagTagType) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TagTagType) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTagType does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTagType) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTagType does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TagTagType) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTagType does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTagType) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTagType does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTagType) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTagType does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TagTagType) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.TagTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.TagTagType does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TagTagType) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.ecocredit.curation.v1beta1.TagTagType", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TagTagType) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TagTagType) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TagTagType) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TagTagType) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TagTagType)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TagTagType)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TagTagType)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagTagType: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TagTagType: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_NumericTagType           protoreflect.MessageDescriptor
	fd_NumericTagType_min       protoreflect.FieldDescriptor
	fd_NumericTagType_max       protoreflect.FieldDescriptor
	fd_NumericTagType_precision protoreflect.FieldDescriptor
)

func init() {
	file_regen_ecocredit_curation_v1beta1_types_proto_init()
	md_NumericTagType = File_regen_ecocredit_curation_v1beta1_types_proto.Messages().ByName("NumericTagType")
	fd_NumericTagType_min = md_NumericTagType.Fields().ByName("min")
	fd_NumericTagType_max = md_NumericTagType.Fields().ByName("max")
	fd_NumericTagType_precision = md_NumericTagType.Fields().ByName("precision")
}

var _ protoreflect.Message = (*fastReflection_NumericTagType)(nil)

type fastReflection_NumericTagType NumericTagType

func (x *NumericTagType) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NumericTagType)(x)
}

func (x *NumericTagType) slowProtoReflect() protoreflect.Message {
	mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NumericTagType_messageType fastReflection_NumericTagType_messageType
var _ protoreflect.MessageType = fastReflection_NumericTagType_messageType{}

type fastReflection_NumericTagType_messageType struct{}

func (x fastReflection_NumericTagType_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NumericTagType)(nil)
}
func (x fastReflection_NumericTagType_messageType) New() protoreflect.Message {
	return new(fastReflection_NumericTagType)
}
func (x fastReflection_NumericTagType_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NumericTagType
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NumericTagType) Descriptor() protoreflect.MessageDescriptor {
	return md_NumericTagType
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NumericTagType) Type() protoreflect.MessageType {
	return _fastReflection_NumericTagType_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NumericTagType) New() protoreflect.Message {
	return new(fastReflection_NumericTagType)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NumericTagType) Interface() protoreflect.ProtoMessage {
	return (*NumericTagType)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NumericTagType) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Min != "" {
		value := protoreflect.ValueOfString(x.Min)
		if !f(fd_NumericTagType_min, value) {
			return
		}
	}
	if x.Max != "" {
		value := protoreflect.ValueOfString(x.Max)
		if !f(fd_NumericTagType_max, value) {
			return
		}
	}
	if x.Precision != int32(0) {
		value := protoreflect.ValueOfInt32(x.Precision)
		if !f(fd_NumericTagType_precision, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NumericTagType) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.NumericTagType.min":
		return x.Min != ""
	case "regen.ecocredit.curation.v1beta1.NumericTagType.max":
		return x.Max != ""
	case "regen.ecocredit.curation.v1beta1.NumericTagType.precision":
		return x.Precision != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.NumericTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.NumericTagType does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NumericTagType) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.NumericTagType.min":
		x.Min = ""
	case "regen.ecocredit.curation.v1beta1.NumericTagType.max":
		x.Max = ""
	case "regen.ecocredit.curation.v1beta1.NumericTagType.precision":
		x.Precision = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.NumericTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.NumericTagType does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NumericTagType) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "regen.ecocredit.curation.v1beta1.NumericTagType.min":
		value := x.Min
		return protoreflect.ValueOfString(value)
	case "regen.ecocredit.curation.v1beta1.NumericTagType.max":
		value := x.Max
		return protoreflect.ValueOfString(value)
	case "regen.ecocredit.curation.v1beta1.NumericTagType.precision":
		value := x.Precision
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.NumericTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.NumericTagType does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NumericTagType) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.NumericTagType.min":
		x.Min = value.Interface().(string)
	case "regen.ecocredit.curation.v1beta1.NumericTagType.max":
		x.Max = value.Interface().(string)
	case "regen.ecocredit.curation.v1beta1.NumericTagType.precision":
		x.Precision = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.NumericTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.NumericTagType does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NumericTagType) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.NumericTagType.min":
		panic(fmt.Errorf("field min of message regen.ecocredit.curation.v1beta1.NumericTagType is not mutable"))
	case "regen.ecocredit.curation.v1beta1.NumericTagType.max":
		panic(fmt.Errorf("field max of message regen.ecocredit.curation.v1beta1.NumericTagType is not mutable"))
	case "regen.ecocredit.curation.v1beta1.NumericTagType.precision":
		panic(fmt.Errorf("field precision of message regen.ecocredit.curation.v1beta1.NumericTagType is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.NumericTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.NumericTagType does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NumericTagType) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "regen.ecocredit.curation.v1beta1.NumericTagType.min":
		return protoreflect.ValueOfString("")
	case "regen.ecocredit.curation.v1beta1.NumericTagType.max":
		return protoreflect.ValueOfString("")
	case "regen.ecocredit.curation.v1beta1.NumericTagType.precision":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: regen.ecocredit.curation.v1beta1.NumericTagType"))
		}
		panic(fmt.Errorf("message regen.ecocredit.curation.v1beta1.NumericTagType does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NumericTagType) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in regen.ecocredit.curation.v1beta1.NumericTagType", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NumericTagType) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NumericTagType) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NumericTagType) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NumericTagType) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NumericTagType)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Min)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Max)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Precision != 0 {
			n += 1 + runtime.Sov(uint64(x.Precision))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NumericTagType)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Precision != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Precision))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Max) > 0 {
			i -= len(x.Max)
			copy(dAtA[i:], x.Max)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Max)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Min) > 0 {
			i -= len(x.Min)
			copy(dAtA[i:], x.Min)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Min)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NumericTagType)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NumericTagType: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NumericTagType: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Min = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Max = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Precision", wireType)
				}
				x.Precision = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Precision |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: regen/ecocredit/curation/v1beta1/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TagTarget represents the target of a tag.
type TagTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sum is the target of the tag.
	//
	// Types that are assignable to Sum:
	//	*TagTarget_Address
	//	*TagTarget_ClassId
	//	*TagTarget_ProjectId
	//	*TagTarget_BatchId
	Sum isTagTarget_Sum `protobuf_oneof:"sum"`
}

func (x *TagTarget) Reset() {
	*x = TagTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagTarget) ProtoMessage() {}

// Deprecated: Use TagTarget.ProtoReflect.Descriptor instead.
func (*TagTarget) Descriptor() ([]byte, []int) {
	return file_regen_ecocredit_curation_v1beta1_types_proto_rawDescGZIP(), []int{0}
}

func (x *TagTarget) GetSum() isTagTarget_Sum {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *TagTarget) GetAddress() string {
	if x, ok := x.GetSum().(*TagTarget_Address); ok {
		return x.Address
	}
	return ""
}

func (x *TagTarget) GetClassId() string {
	if x, ok := x.GetSum().(*TagTarget_ClassId); ok {
		return x.ClassId
	}
	return ""
}

func (x *TagTarget) GetProjectId() string {
	if x, ok := x.GetSum().(*TagTarget_ProjectId); ok {
		return x.ProjectId
	}
	return ""
}

func (x *TagTarget) GetBatchId() string {
	if x, ok := x.GetSum().(*TagTarget_BatchId); ok {
		return x.BatchId
	}
	return ""
}

type isTagTarget_Sum interface {
	isTagTarget_Sum()
}

type TagTarget_Address struct {
	// address indicates that this tag targets the address of an account such as a credit class admin
	// or a project admin.
	Address string `protobuf:"bytes,1,opt,name=address,proto3,oneof"`
}

type TagTarget_ClassId struct {
	// class_id indicates that this tag targets all the credits within a given class.
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3,oneof"`
}

type TagTarget_ProjectId struct {
	// project_id indicates that this tag targets all the credits within a given project.
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3,oneof"`
}

type TagTarget_BatchId struct {
	// batch_id indicates that this tag targets the credits within a batch.
	BatchId string `protobuf:"bytes,4,opt,name=batch_id,json=batchId,proto3,oneof"`
}

func (*TagTarget_Address) isTagTarget_Sum() {}

func (*TagTarget_ClassId) isTagTarget_Sum() {}

func (*TagTarget_ProjectId) isTagTarget_Sum() {}

func (*TagTarget_BatchId) isTagTarget_Sum() {}

// AllowedTagTargets represents the targets that a tag can be applied to.
type AllowedTagTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address indicates that this tag can be applied to the address of an account such as a credit class admin.
	Address bool `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	// class indicates that this tag can be applied to all the credits within a given class.
	Class bool `protobuf:"varint,2,opt,name=class,proto3" json:"class,omitempty"`
	// project indicates that this tag can be applied to all the credits within a given project.
	Project bool `protobuf:"varint,3,opt,name=project,proto3" json:"project,omitempty"`
	// batch indicates that this tag can be applied to the credits within a batch.
	Batch bool `protobuf:"varint,4,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *AllowedTagTargets) Reset() {
	*x = AllowedTagTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedTagTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedTagTargets) ProtoMessage() {}

// Deprecated: Use AllowedTagTargets.ProtoReflect.Descriptor instead.
func (*AllowedTagTargets) Descriptor() ([]byte, []int) {
	return file_regen_ecocredit_curation_v1beta1_types_proto_rawDescGZIP(), []int{1}
}

func (x *AllowedTagTargets) GetAddress() bool {
	if x != nil {
		return x.Address
	}
	return false
}

func (x *AllowedTagTargets) GetClass() bool {
	if x != nil {
		return x.Class
	}
	return false
}

func (x *AllowedTagTargets) GetProject() bool {
	if x != nil {
		return x.Project
	}
	return false
}

func (x *AllowedTagTargets) GetBatch() bool {
	if x != nil {
		return x.Batch
	}
	return false
}

// TagMeta represents the metadata of a tag.
type TagMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the tag. It is not considered unique among tags and is informational only.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description is a description of the tag. It is informational only.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// allowed_targets is the targets that this tag can be applied to.
	AllowedTargets *AllowedTagTargets `protobuf:"bytes,3,opt,name=allowed_targets,json=allowedTargets,proto3" json:"allowed_targets,omitempty"`
}

func (x *TagMeta) Reset() {
	*x = TagMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMeta) ProtoMessage() {}

// Deprecated: Use TagMeta.ProtoReflect.Descriptor instead.
func (*TagMeta) Descriptor() ([]byte, []int) {
	return file_regen_ecocredit_curation_v1beta1_types_proto_rawDescGZIP(), []int{2}
}

func (x *TagMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TagMeta) GetAllowedTargets() *AllowedTagTargets {
	if x != nil {
		return x.AllowedTargets
	}
	return nil
}

// TagType represents the type of a tag.
type TagType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sum is the type of the tag.
	//
	// Types that are assignable to Sum:
	//	*TagType_Tag
	//	*TagType_Numeric
	Sum isTagType_Sum `protobuf_oneof:"sum"`
}

func (x *TagType) Reset() {
	*x = TagType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagType) ProtoMessage() {}

// Deprecated: Use TagType.ProtoReflect.Descriptor instead.
func (*TagType) Descriptor() ([]byte, []int) {
	return file_regen_ecocredit_curation_v1beta1_types_proto_rawDescGZIP(), []int{3}
}

func (x *TagType) GetSum() isTagType_Sum {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *TagType) GetTag() *TagTagType {
	if x, ok := x.GetSum().(*TagType_Tag); ok {
		return x.Tag
	}
	return nil
}

func (x *TagType) GetNumeric() *NumericTagType {
	if x, ok := x.GetSum().(*TagType_Numeric); ok {
		return x.Numeric
	}
	return nil
}

type isTagType_Sum interface {
	isTagType_Sum()
}

type TagType_Tag struct {
	// tag indicates that this tag is a tag that can either be present or not present.
	Tag *TagTagType `protobuf:"bytes,1,opt,name=tag,proto3,oneof"`
}

type TagType_Numeric struct {
	// numeric indicates that this tag is a tag that can have a numeric value.
	Numeric *NumericTagType `protobuf:"bytes,2,opt,name=numeric,proto3,oneof"`
}

func (*TagType_Tag) isTagType_Sum() {}

func (*TagType_Numeric) isTagType_Sum() {}

// TagTagType represents a tag that can either be present or not present.
type TagTagType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TagTagType) Reset() {
	*x = TagTagType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagTagType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagTagType) ProtoMessage() {}

// Deprecated: Use TagTagType.ProtoReflect.Descriptor instead.
func (*TagTagType) Descriptor() ([]byte, []int) {
	return file_regen_ecocredit_curation_v1beta1_types_proto_rawDescGZIP(), []int{4}
}

// NumericTagType represents a tag that can have a numeric value. Numeric values are represented as
// uint64s in storage and have a fixed precision. They are not considered floating point values.
// The range of numeric values must be representable within the range of a uint64 given the provided
// min, max and precision.
type NumericTagType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// min is the minimum value of the attribute as a decimal string. It is required.
	Min string `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	// max is the maximum value of the attribute as a decimal string. It is required.
	Max string `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	// precision is the number of significant decimal places after the decimal point if it is a positive value.
	// For instance 1 indicates that 3.54 would be an invalid value and that 3.5 is the most precise value
	// that could be submitted.
	// If it is a negative value, it is the number of non-significant digits after the decimal point.
	// For instance -1 indicates that 34 would be an invalid value and that 30 is the most precise value
	// that could be submitted.
	// A value of 0 indicates an integer value.
	Precision int32 `protobuf:"varint,3,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *NumericTagType) Reset() {
	*x = NumericTagType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericTagType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericTagType) ProtoMessage() {}

// Deprecated: Use NumericTagType.ProtoReflect.Descriptor instead.
func (*NumericTagType) Descriptor() ([]byte, []int) {
	return file_regen_ecocredit_curation_v1beta1_types_proto_rawDescGZIP(), []int{5}
}

func (x *NumericTagType) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *NumericTagType) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *NumericTagType) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

var File_regen_ecocredit_curation_v1beta1_types_proto protoreflect.FileDescriptor

var file_regen_ecocredit_curation_v1beta1_types_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x63, 0x6f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x2f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x65, 0x63, 0x6f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e,
	0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x22, 0x89, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x73, 0x0a, 0x11,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x65, 0x63, 0x6f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x63,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x22, 0xa0, 0x01, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x65, 0x63, 0x6f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x63, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x4c, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x65, 0x63, 0x6f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x42, 0x05, 0x0a,
	0x03, 0x73, 0x75, 0x6d, 0x22, 0x0c, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x54, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x52, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0xb1, 0x02, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x72,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x65, 0x63, 0x6f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x63,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42,
	0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2d, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x65,
	0x63, 0x6f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x45, 0x43, 0xaa,
	0x02, 0x20, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x63, 0x6f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x2e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0xca, 0x02, 0x20, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x5c, 0x45, 0x63, 0x6f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5c, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x2c, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x5c, 0x45, 0x63,
	0x6f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5c, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x23, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x3a, 0x3a, 0x45, 0x63,
	0x6f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x3a, 0x3a, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_regen_ecocredit_curation_v1beta1_types_proto_rawDescOnce sync.Once
	file_regen_ecocredit_curation_v1beta1_types_proto_rawDescData = file_regen_ecocredit_curation_v1beta1_types_proto_rawDesc
)

func file_regen_ecocredit_curation_v1beta1_types_proto_rawDescGZIP() []byte {
	file_regen_ecocredit_curation_v1beta1_types_proto_rawDescOnce.Do(func() {
		file_regen_ecocredit_curation_v1beta1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_regen_ecocredit_curation_v1beta1_types_proto_rawDescData)
	})
	return file_regen_ecocredit_curation_v1beta1_types_proto_rawDescData
}

var file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_regen_ecocredit_curation_v1beta1_types_proto_goTypes = []interface{}{
	(*TagTarget)(nil),         // 0: regen.ecocredit.curation.v1beta1.TagTarget
	(*AllowedTagTargets)(nil), // 1: regen.ecocredit.curation.v1beta1.AllowedTagTargets
	(*TagMeta)(nil),           // 2: regen.ecocredit.curation.v1beta1.TagMeta
	(*TagType)(nil),           // 3: regen.ecocredit.curation.v1beta1.TagType
	(*TagTagType)(nil),        // 4: regen.ecocredit.curation.v1beta1.TagTagType
	(*NumericTagType)(nil),    // 5: regen.ecocredit.curation.v1beta1.NumericTagType
}
var file_regen_ecocredit_curation_v1beta1_types_proto_depIdxs = []int32{
	1, // 0: regen.ecocredit.curation.v1beta1.TagMeta.allowed_targets:type_name -> regen.ecocredit.curation.v1beta1.AllowedTagTargets
	4, // 1: regen.ecocredit.curation.v1beta1.TagType.tag:type_name -> regen.ecocredit.curation.v1beta1.TagTagType
	5, // 2: regen.ecocredit.curation.v1beta1.TagType.numeric:type_name -> regen.ecocredit.curation.v1beta1.NumericTagType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_regen_ecocredit_curation_v1beta1_types_proto_init() }
func file_regen_ecocredit_curation_v1beta1_types_proto_init() {
	if File_regen_ecocredit_curation_v1beta1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedTagTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagTagType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericTagType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TagTarget_Address)(nil),
		(*TagTarget_ClassId)(nil),
		(*TagTarget_ProjectId)(nil),
		(*TagTarget_BatchId)(nil),
	}
	file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TagType_Tag)(nil),
		(*TagType_Numeric)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_regen_ecocredit_curation_v1beta1_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_regen_ecocredit_curation_v1beta1_types_proto_goTypes,
		DependencyIndexes: file_regen_ecocredit_curation_v1beta1_types_proto_depIdxs,
		MessageInfos:      file_regen_ecocredit_curation_v1beta1_types_proto_msgTypes,
	}.Build()
	File_regen_ecocredit_curation_v1beta1_types_proto = out.File
	file_regen_ecocredit_curation_v1beta1_types_proto_rawDesc = nil
	file_regen_ecocredit_curation_v1beta1_types_proto_goTypes = nil
	file_regen_ecocredit_curation_v1beta1_types_proto_depIdxs = nil
}
