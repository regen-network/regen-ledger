// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package curationv1beta1

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type TagDefinitionTable interface {
	Insert(ctx context.Context, tagDefinition *TagDefinition) error
	InsertReturningID(ctx context.Context, tagDefinition *TagDefinition) (uint64, error)
	Update(ctx context.Context, tagDefinition *TagDefinition) error
	Save(ctx context.Context, tagDefinition *TagDefinition) error
	Delete(ctx context.Context, tagDefinition *TagDefinition) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*TagDefinition, error)
	List(ctx context.Context, prefixKey TagDefinitionIndexKey, opts ...ormlist.Option) (TagDefinitionIterator, error)
	ListRange(ctx context.Context, from, to TagDefinitionIndexKey, opts ...ormlist.Option) (TagDefinitionIterator, error)
	DeleteBy(ctx context.Context, prefixKey TagDefinitionIndexKey) error
	DeleteRange(ctx context.Context, from, to TagDefinitionIndexKey) error

	doNotImplement()
}

type TagDefinitionIterator struct {
	ormtable.Iterator
}

func (i TagDefinitionIterator) Value() (*TagDefinition, error) {
	var tagDefinition TagDefinition
	err := i.UnmarshalMessage(&tagDefinition)
	return &tagDefinition, err
}

type TagDefinitionIndexKey interface {
	id() uint32
	values() []interface{}
	tagDefinitionIndexKey()
}

// primary key starting index..
type TagDefinitionPrimaryKey = TagDefinitionIdIndexKey

type TagDefinitionIdIndexKey struct {
	vs []interface{}
}

func (x TagDefinitionIdIndexKey) id() uint32             { return 0 }
func (x TagDefinitionIdIndexKey) values() []interface{}  { return x.vs }
func (x TagDefinitionIdIndexKey) tagDefinitionIndexKey() {}

func (this TagDefinitionIdIndexKey) WithId(id uint64) TagDefinitionIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type tagDefinitionTable struct {
	table ormtable.AutoIncrementTable
}

func (this tagDefinitionTable) Insert(ctx context.Context, tagDefinition *TagDefinition) error {
	return this.table.Insert(ctx, tagDefinition)
}

func (this tagDefinitionTable) Update(ctx context.Context, tagDefinition *TagDefinition) error {
	return this.table.Update(ctx, tagDefinition)
}

func (this tagDefinitionTable) Save(ctx context.Context, tagDefinition *TagDefinition) error {
	return this.table.Save(ctx, tagDefinition)
}

func (this tagDefinitionTable) Delete(ctx context.Context, tagDefinition *TagDefinition) error {
	return this.table.Delete(ctx, tagDefinition)
}

func (this tagDefinitionTable) InsertReturningID(ctx context.Context, tagDefinition *TagDefinition) (uint64, error) {
	return this.table.InsertReturningID(ctx, tagDefinition)
}

func (this tagDefinitionTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this tagDefinitionTable) Get(ctx context.Context, id uint64) (*TagDefinition, error) {
	var tagDefinition TagDefinition
	found, err := this.table.PrimaryKey().Get(ctx, &tagDefinition, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &tagDefinition, nil
}

func (this tagDefinitionTable) List(ctx context.Context, prefixKey TagDefinitionIndexKey, opts ...ormlist.Option) (TagDefinitionIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return TagDefinitionIterator{it}, err
}

func (this tagDefinitionTable) ListRange(ctx context.Context, from, to TagDefinitionIndexKey, opts ...ormlist.Option) (TagDefinitionIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return TagDefinitionIterator{it}, err
}

func (this tagDefinitionTable) DeleteBy(ctx context.Context, prefixKey TagDefinitionIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this tagDefinitionTable) DeleteRange(ctx context.Context, from, to TagDefinitionIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this tagDefinitionTable) doNotImplement() {}

var _ TagDefinitionTable = tagDefinitionTable{}

func NewTagDefinitionTable(db ormtable.Schema) (TagDefinitionTable, error) {
	table := db.GetTable(&TagDefinition{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&TagDefinition{}).ProtoReflect().Descriptor().FullName()))
	}
	return tagDefinitionTable{table.(ormtable.AutoIncrementTable)}, nil
}

type AddressTagEntryTable interface {
	Insert(ctx context.Context, addressTagEntry *AddressTagEntry) error
	Update(ctx context.Context, addressTagEntry *AddressTagEntry) error
	Save(ctx context.Context, addressTagEntry *AddressTagEntry) error
	Delete(ctx context.Context, addressTagEntry *AddressTagEntry) error
	Has(ctx context.Context, address []byte, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address []byte, tag_id uint64) (*AddressTagEntry, error)
	List(ctx context.Context, prefixKey AddressTagEntryIndexKey, opts ...ormlist.Option) (AddressTagEntryIterator, error)
	ListRange(ctx context.Context, from, to AddressTagEntryIndexKey, opts ...ormlist.Option) (AddressTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey AddressTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to AddressTagEntryIndexKey) error

	doNotImplement()
}

type AddressTagEntryIterator struct {
	ormtable.Iterator
}

func (i AddressTagEntryIterator) Value() (*AddressTagEntry, error) {
	var addressTagEntry AddressTagEntry
	err := i.UnmarshalMessage(&addressTagEntry)
	return &addressTagEntry, err
}

type AddressTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	addressTagEntryIndexKey()
}

// primary key starting index..
type AddressTagEntryPrimaryKey = AddressTagEntryAddressTagIdIndexKey

type AddressTagEntryAddressTagIdIndexKey struct {
	vs []interface{}
}

func (x AddressTagEntryAddressTagIdIndexKey) id() uint32               { return 0 }
func (x AddressTagEntryAddressTagIdIndexKey) values() []interface{}    { return x.vs }
func (x AddressTagEntryAddressTagIdIndexKey) addressTagEntryIndexKey() {}

func (this AddressTagEntryAddressTagIdIndexKey) WithAddress(address []byte) AddressTagEntryAddressTagIdIndexKey {
	this.vs = []interface{}{address}
	return this
}

func (this AddressTagEntryAddressTagIdIndexKey) WithAddressTagId(address []byte, tag_id uint64) AddressTagEntryAddressTagIdIndexKey {
	this.vs = []interface{}{address, tag_id}
	return this
}

type AddressTagEntryTagIdAddressIndexKey struct {
	vs []interface{}
}

func (x AddressTagEntryTagIdAddressIndexKey) id() uint32               { return 1 }
func (x AddressTagEntryTagIdAddressIndexKey) values() []interface{}    { return x.vs }
func (x AddressTagEntryTagIdAddressIndexKey) addressTagEntryIndexKey() {}

func (this AddressTagEntryTagIdAddressIndexKey) WithTagId(tag_id uint64) AddressTagEntryTagIdAddressIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this AddressTagEntryTagIdAddressIndexKey) WithTagIdAddress(tag_id uint64, address []byte) AddressTagEntryTagIdAddressIndexKey {
	this.vs = []interface{}{tag_id, address}
	return this
}

type addressTagEntryTable struct {
	table ormtable.Table
}

func (this addressTagEntryTable) Insert(ctx context.Context, addressTagEntry *AddressTagEntry) error {
	return this.table.Insert(ctx, addressTagEntry)
}

func (this addressTagEntryTable) Update(ctx context.Context, addressTagEntry *AddressTagEntry) error {
	return this.table.Update(ctx, addressTagEntry)
}

func (this addressTagEntryTable) Save(ctx context.Context, addressTagEntry *AddressTagEntry) error {
	return this.table.Save(ctx, addressTagEntry)
}

func (this addressTagEntryTable) Delete(ctx context.Context, addressTagEntry *AddressTagEntry) error {
	return this.table.Delete(ctx, addressTagEntry)
}

func (this addressTagEntryTable) Has(ctx context.Context, address []byte, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, address, tag_id)
}

func (this addressTagEntryTable) Get(ctx context.Context, address []byte, tag_id uint64) (*AddressTagEntry, error) {
	var addressTagEntry AddressTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &addressTagEntry, address, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &addressTagEntry, nil
}

func (this addressTagEntryTable) List(ctx context.Context, prefixKey AddressTagEntryIndexKey, opts ...ormlist.Option) (AddressTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AddressTagEntryIterator{it}, err
}

func (this addressTagEntryTable) ListRange(ctx context.Context, from, to AddressTagEntryIndexKey, opts ...ormlist.Option) (AddressTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AddressTagEntryIterator{it}, err
}

func (this addressTagEntryTable) DeleteBy(ctx context.Context, prefixKey AddressTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this addressTagEntryTable) DeleteRange(ctx context.Context, from, to AddressTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this addressTagEntryTable) doNotImplement() {}

var _ AddressTagEntryTable = addressTagEntryTable{}

func NewAddressTagEntryTable(db ormtable.Schema) (AddressTagEntryTable, error) {
	table := db.GetTable(&AddressTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&AddressTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return addressTagEntryTable{table}, nil
}

type AddressNumericTagEntryTable interface {
	Insert(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error
	Update(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error
	Save(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error
	Delete(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error
	Has(ctx context.Context, address []byte, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address []byte, tag_id uint64) (*AddressNumericTagEntry, error)
	List(ctx context.Context, prefixKey AddressNumericTagEntryIndexKey, opts ...ormlist.Option) (AddressNumericTagEntryIterator, error)
	ListRange(ctx context.Context, from, to AddressNumericTagEntryIndexKey, opts ...ormlist.Option) (AddressNumericTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey AddressNumericTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to AddressNumericTagEntryIndexKey) error

	doNotImplement()
}

type AddressNumericTagEntryIterator struct {
	ormtable.Iterator
}

func (i AddressNumericTagEntryIterator) Value() (*AddressNumericTagEntry, error) {
	var addressNumericTagEntry AddressNumericTagEntry
	err := i.UnmarshalMessage(&addressNumericTagEntry)
	return &addressNumericTagEntry, err
}

type AddressNumericTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	addressNumericTagEntryIndexKey()
}

// primary key starting index..
type AddressNumericTagEntryPrimaryKey = AddressNumericTagEntryAddressTagIdIndexKey

type AddressNumericTagEntryAddressTagIdIndexKey struct {
	vs []interface{}
}

func (x AddressNumericTagEntryAddressTagIdIndexKey) id() uint32                      { return 0 }
func (x AddressNumericTagEntryAddressTagIdIndexKey) values() []interface{}           { return x.vs }
func (x AddressNumericTagEntryAddressTagIdIndexKey) addressNumericTagEntryIndexKey() {}

func (this AddressNumericTagEntryAddressTagIdIndexKey) WithAddress(address []byte) AddressNumericTagEntryAddressTagIdIndexKey {
	this.vs = []interface{}{address}
	return this
}

func (this AddressNumericTagEntryAddressTagIdIndexKey) WithAddressTagId(address []byte, tag_id uint64) AddressNumericTagEntryAddressTagIdIndexKey {
	this.vs = []interface{}{address, tag_id}
	return this
}

type AddressNumericTagEntryTagIdAddressIndexKey struct {
	vs []interface{}
}

func (x AddressNumericTagEntryTagIdAddressIndexKey) id() uint32                      { return 1 }
func (x AddressNumericTagEntryTagIdAddressIndexKey) values() []interface{}           { return x.vs }
func (x AddressNumericTagEntryTagIdAddressIndexKey) addressNumericTagEntryIndexKey() {}

func (this AddressNumericTagEntryTagIdAddressIndexKey) WithTagId(tag_id uint64) AddressNumericTagEntryTagIdAddressIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this AddressNumericTagEntryTagIdAddressIndexKey) WithTagIdAddress(tag_id uint64, address []byte) AddressNumericTagEntryTagIdAddressIndexKey {
	this.vs = []interface{}{tag_id, address}
	return this
}

type AddressNumericTagEntryTagIdValueIndexKey struct {
	vs []interface{}
}

func (x AddressNumericTagEntryTagIdValueIndexKey) id() uint32                      { return 2 }
func (x AddressNumericTagEntryTagIdValueIndexKey) values() []interface{}           { return x.vs }
func (x AddressNumericTagEntryTagIdValueIndexKey) addressNumericTagEntryIndexKey() {}

func (this AddressNumericTagEntryTagIdValueIndexKey) WithTagId(tag_id uint64) AddressNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this AddressNumericTagEntryTagIdValueIndexKey) WithTagIdValue(tag_id uint64, value uint64) AddressNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id, value}
	return this
}

type addressNumericTagEntryTable struct {
	table ormtable.Table
}

func (this addressNumericTagEntryTable) Insert(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error {
	return this.table.Insert(ctx, addressNumericTagEntry)
}

func (this addressNumericTagEntryTable) Update(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error {
	return this.table.Update(ctx, addressNumericTagEntry)
}

func (this addressNumericTagEntryTable) Save(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error {
	return this.table.Save(ctx, addressNumericTagEntry)
}

func (this addressNumericTagEntryTable) Delete(ctx context.Context, addressNumericTagEntry *AddressNumericTagEntry) error {
	return this.table.Delete(ctx, addressNumericTagEntry)
}

func (this addressNumericTagEntryTable) Has(ctx context.Context, address []byte, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, address, tag_id)
}

func (this addressNumericTagEntryTable) Get(ctx context.Context, address []byte, tag_id uint64) (*AddressNumericTagEntry, error) {
	var addressNumericTagEntry AddressNumericTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &addressNumericTagEntry, address, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &addressNumericTagEntry, nil
}

func (this addressNumericTagEntryTable) List(ctx context.Context, prefixKey AddressNumericTagEntryIndexKey, opts ...ormlist.Option) (AddressNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AddressNumericTagEntryIterator{it}, err
}

func (this addressNumericTagEntryTable) ListRange(ctx context.Context, from, to AddressNumericTagEntryIndexKey, opts ...ormlist.Option) (AddressNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AddressNumericTagEntryIterator{it}, err
}

func (this addressNumericTagEntryTable) DeleteBy(ctx context.Context, prefixKey AddressNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this addressNumericTagEntryTable) DeleteRange(ctx context.Context, from, to AddressNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this addressNumericTagEntryTable) doNotImplement() {}

var _ AddressNumericTagEntryTable = addressNumericTagEntryTable{}

func NewAddressNumericTagEntryTable(db ormtable.Schema) (AddressNumericTagEntryTable, error) {
	table := db.GetTable(&AddressNumericTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&AddressNumericTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return addressNumericTagEntryTable{table}, nil
}

type ClassTagEntryTable interface {
	Insert(ctx context.Context, classTagEntry *ClassTagEntry) error
	Update(ctx context.Context, classTagEntry *ClassTagEntry) error
	Save(ctx context.Context, classTagEntry *ClassTagEntry) error
	Delete(ctx context.Context, classTagEntry *ClassTagEntry) error
	Has(ctx context.Context, class_id uint64, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, class_id uint64, tag_id uint64) (*ClassTagEntry, error)
	List(ctx context.Context, prefixKey ClassTagEntryIndexKey, opts ...ormlist.Option) (ClassTagEntryIterator, error)
	ListRange(ctx context.Context, from, to ClassTagEntryIndexKey, opts ...ormlist.Option) (ClassTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey ClassTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to ClassTagEntryIndexKey) error

	doNotImplement()
}

type ClassTagEntryIterator struct {
	ormtable.Iterator
}

func (i ClassTagEntryIterator) Value() (*ClassTagEntry, error) {
	var classTagEntry ClassTagEntry
	err := i.UnmarshalMessage(&classTagEntry)
	return &classTagEntry, err
}

type ClassTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	classTagEntryIndexKey()
}

// primary key starting index..
type ClassTagEntryPrimaryKey = ClassTagEntryClassIdTagIdIndexKey

type ClassTagEntryClassIdTagIdIndexKey struct {
	vs []interface{}
}

func (x ClassTagEntryClassIdTagIdIndexKey) id() uint32             { return 0 }
func (x ClassTagEntryClassIdTagIdIndexKey) values() []interface{}  { return x.vs }
func (x ClassTagEntryClassIdTagIdIndexKey) classTagEntryIndexKey() {}

func (this ClassTagEntryClassIdTagIdIndexKey) WithClassId(class_id uint64) ClassTagEntryClassIdTagIdIndexKey {
	this.vs = []interface{}{class_id}
	return this
}

func (this ClassTagEntryClassIdTagIdIndexKey) WithClassIdTagId(class_id uint64, tag_id uint64) ClassTagEntryClassIdTagIdIndexKey {
	this.vs = []interface{}{class_id, tag_id}
	return this
}

type ClassTagEntryTagIdClassIdIndexKey struct {
	vs []interface{}
}

func (x ClassTagEntryTagIdClassIdIndexKey) id() uint32             { return 1 }
func (x ClassTagEntryTagIdClassIdIndexKey) values() []interface{}  { return x.vs }
func (x ClassTagEntryTagIdClassIdIndexKey) classTagEntryIndexKey() {}

func (this ClassTagEntryTagIdClassIdIndexKey) WithTagId(tag_id uint64) ClassTagEntryTagIdClassIdIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this ClassTagEntryTagIdClassIdIndexKey) WithTagIdClassId(tag_id uint64, class_id uint64) ClassTagEntryTagIdClassIdIndexKey {
	this.vs = []interface{}{tag_id, class_id}
	return this
}

type classTagEntryTable struct {
	table ormtable.Table
}

func (this classTagEntryTable) Insert(ctx context.Context, classTagEntry *ClassTagEntry) error {
	return this.table.Insert(ctx, classTagEntry)
}

func (this classTagEntryTable) Update(ctx context.Context, classTagEntry *ClassTagEntry) error {
	return this.table.Update(ctx, classTagEntry)
}

func (this classTagEntryTable) Save(ctx context.Context, classTagEntry *ClassTagEntry) error {
	return this.table.Save(ctx, classTagEntry)
}

func (this classTagEntryTable) Delete(ctx context.Context, classTagEntry *ClassTagEntry) error {
	return this.table.Delete(ctx, classTagEntry)
}

func (this classTagEntryTable) Has(ctx context.Context, class_id uint64, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, class_id, tag_id)
}

func (this classTagEntryTable) Get(ctx context.Context, class_id uint64, tag_id uint64) (*ClassTagEntry, error) {
	var classTagEntry ClassTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &classTagEntry, class_id, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &classTagEntry, nil
}

func (this classTagEntryTable) List(ctx context.Context, prefixKey ClassTagEntryIndexKey, opts ...ormlist.Option) (ClassTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ClassTagEntryIterator{it}, err
}

func (this classTagEntryTable) ListRange(ctx context.Context, from, to ClassTagEntryIndexKey, opts ...ormlist.Option) (ClassTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ClassTagEntryIterator{it}, err
}

func (this classTagEntryTable) DeleteBy(ctx context.Context, prefixKey ClassTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this classTagEntryTable) DeleteRange(ctx context.Context, from, to ClassTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this classTagEntryTable) doNotImplement() {}

var _ ClassTagEntryTable = classTagEntryTable{}

func NewClassTagEntryTable(db ormtable.Schema) (ClassTagEntryTable, error) {
	table := db.GetTable(&ClassTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ClassTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return classTagEntryTable{table}, nil
}

type ClassNumericTagEntryTable interface {
	Insert(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error
	Update(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error
	Save(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error
	Delete(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error
	Has(ctx context.Context, class_id uint64, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, class_id uint64, tag_id uint64) (*ClassNumericTagEntry, error)
	List(ctx context.Context, prefixKey ClassNumericTagEntryIndexKey, opts ...ormlist.Option) (ClassNumericTagEntryIterator, error)
	ListRange(ctx context.Context, from, to ClassNumericTagEntryIndexKey, opts ...ormlist.Option) (ClassNumericTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey ClassNumericTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to ClassNumericTagEntryIndexKey) error

	doNotImplement()
}

type ClassNumericTagEntryIterator struct {
	ormtable.Iterator
}

func (i ClassNumericTagEntryIterator) Value() (*ClassNumericTagEntry, error) {
	var classNumericTagEntry ClassNumericTagEntry
	err := i.UnmarshalMessage(&classNumericTagEntry)
	return &classNumericTagEntry, err
}

type ClassNumericTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	classNumericTagEntryIndexKey()
}

// primary key starting index..
type ClassNumericTagEntryPrimaryKey = ClassNumericTagEntryClassIdTagIdIndexKey

type ClassNumericTagEntryClassIdTagIdIndexKey struct {
	vs []interface{}
}

func (x ClassNumericTagEntryClassIdTagIdIndexKey) id() uint32                    { return 0 }
func (x ClassNumericTagEntryClassIdTagIdIndexKey) values() []interface{}         { return x.vs }
func (x ClassNumericTagEntryClassIdTagIdIndexKey) classNumericTagEntryIndexKey() {}

func (this ClassNumericTagEntryClassIdTagIdIndexKey) WithClassId(class_id uint64) ClassNumericTagEntryClassIdTagIdIndexKey {
	this.vs = []interface{}{class_id}
	return this
}

func (this ClassNumericTagEntryClassIdTagIdIndexKey) WithClassIdTagId(class_id uint64, tag_id uint64) ClassNumericTagEntryClassIdTagIdIndexKey {
	this.vs = []interface{}{class_id, tag_id}
	return this
}

type ClassNumericTagEntryTagIdClassIdIndexKey struct {
	vs []interface{}
}

func (x ClassNumericTagEntryTagIdClassIdIndexKey) id() uint32                    { return 1 }
func (x ClassNumericTagEntryTagIdClassIdIndexKey) values() []interface{}         { return x.vs }
func (x ClassNumericTagEntryTagIdClassIdIndexKey) classNumericTagEntryIndexKey() {}

func (this ClassNumericTagEntryTagIdClassIdIndexKey) WithTagId(tag_id uint64) ClassNumericTagEntryTagIdClassIdIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this ClassNumericTagEntryTagIdClassIdIndexKey) WithTagIdClassId(tag_id uint64, class_id uint64) ClassNumericTagEntryTagIdClassIdIndexKey {
	this.vs = []interface{}{tag_id, class_id}
	return this
}

type ClassNumericTagEntryTagIdValueIndexKey struct {
	vs []interface{}
}

func (x ClassNumericTagEntryTagIdValueIndexKey) id() uint32                    { return 2 }
func (x ClassNumericTagEntryTagIdValueIndexKey) values() []interface{}         { return x.vs }
func (x ClassNumericTagEntryTagIdValueIndexKey) classNumericTagEntryIndexKey() {}

func (this ClassNumericTagEntryTagIdValueIndexKey) WithTagId(tag_id uint64) ClassNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this ClassNumericTagEntryTagIdValueIndexKey) WithTagIdValue(tag_id uint64, value uint64) ClassNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id, value}
	return this
}

type classNumericTagEntryTable struct {
	table ormtable.Table
}

func (this classNumericTagEntryTable) Insert(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error {
	return this.table.Insert(ctx, classNumericTagEntry)
}

func (this classNumericTagEntryTable) Update(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error {
	return this.table.Update(ctx, classNumericTagEntry)
}

func (this classNumericTagEntryTable) Save(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error {
	return this.table.Save(ctx, classNumericTagEntry)
}

func (this classNumericTagEntryTable) Delete(ctx context.Context, classNumericTagEntry *ClassNumericTagEntry) error {
	return this.table.Delete(ctx, classNumericTagEntry)
}

func (this classNumericTagEntryTable) Has(ctx context.Context, class_id uint64, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, class_id, tag_id)
}

func (this classNumericTagEntryTable) Get(ctx context.Context, class_id uint64, tag_id uint64) (*ClassNumericTagEntry, error) {
	var classNumericTagEntry ClassNumericTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &classNumericTagEntry, class_id, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &classNumericTagEntry, nil
}

func (this classNumericTagEntryTable) List(ctx context.Context, prefixKey ClassNumericTagEntryIndexKey, opts ...ormlist.Option) (ClassNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ClassNumericTagEntryIterator{it}, err
}

func (this classNumericTagEntryTable) ListRange(ctx context.Context, from, to ClassNumericTagEntryIndexKey, opts ...ormlist.Option) (ClassNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ClassNumericTagEntryIterator{it}, err
}

func (this classNumericTagEntryTable) DeleteBy(ctx context.Context, prefixKey ClassNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this classNumericTagEntryTable) DeleteRange(ctx context.Context, from, to ClassNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this classNumericTagEntryTable) doNotImplement() {}

var _ ClassNumericTagEntryTable = classNumericTagEntryTable{}

func NewClassNumericTagEntryTable(db ormtable.Schema) (ClassNumericTagEntryTable, error) {
	table := db.GetTable(&ClassNumericTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ClassNumericTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return classNumericTagEntryTable{table}, nil
}

type ProjectTagEntryTable interface {
	Insert(ctx context.Context, projectTagEntry *ProjectTagEntry) error
	Update(ctx context.Context, projectTagEntry *ProjectTagEntry) error
	Save(ctx context.Context, projectTagEntry *ProjectTagEntry) error
	Delete(ctx context.Context, projectTagEntry *ProjectTagEntry) error
	Has(ctx context.Context, project_id uint64, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, project_id uint64, tag_id uint64) (*ProjectTagEntry, error)
	List(ctx context.Context, prefixKey ProjectTagEntryIndexKey, opts ...ormlist.Option) (ProjectTagEntryIterator, error)
	ListRange(ctx context.Context, from, to ProjectTagEntryIndexKey, opts ...ormlist.Option) (ProjectTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey ProjectTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to ProjectTagEntryIndexKey) error

	doNotImplement()
}

type ProjectTagEntryIterator struct {
	ormtable.Iterator
}

func (i ProjectTagEntryIterator) Value() (*ProjectTagEntry, error) {
	var projectTagEntry ProjectTagEntry
	err := i.UnmarshalMessage(&projectTagEntry)
	return &projectTagEntry, err
}

type ProjectTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	projectTagEntryIndexKey()
}

// primary key starting index..
type ProjectTagEntryPrimaryKey = ProjectTagEntryProjectIdTagIdIndexKey

type ProjectTagEntryProjectIdTagIdIndexKey struct {
	vs []interface{}
}

func (x ProjectTagEntryProjectIdTagIdIndexKey) id() uint32               { return 0 }
func (x ProjectTagEntryProjectIdTagIdIndexKey) values() []interface{}    { return x.vs }
func (x ProjectTagEntryProjectIdTagIdIndexKey) projectTagEntryIndexKey() {}

func (this ProjectTagEntryProjectIdTagIdIndexKey) WithProjectId(project_id uint64) ProjectTagEntryProjectIdTagIdIndexKey {
	this.vs = []interface{}{project_id}
	return this
}

func (this ProjectTagEntryProjectIdTagIdIndexKey) WithProjectIdTagId(project_id uint64, tag_id uint64) ProjectTagEntryProjectIdTagIdIndexKey {
	this.vs = []interface{}{project_id, tag_id}
	return this
}

type ProjectTagEntryTagIdProjectIdIndexKey struct {
	vs []interface{}
}

func (x ProjectTagEntryTagIdProjectIdIndexKey) id() uint32               { return 1 }
func (x ProjectTagEntryTagIdProjectIdIndexKey) values() []interface{}    { return x.vs }
func (x ProjectTagEntryTagIdProjectIdIndexKey) projectTagEntryIndexKey() {}

func (this ProjectTagEntryTagIdProjectIdIndexKey) WithTagId(tag_id uint64) ProjectTagEntryTagIdProjectIdIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this ProjectTagEntryTagIdProjectIdIndexKey) WithTagIdProjectId(tag_id uint64, project_id uint64) ProjectTagEntryTagIdProjectIdIndexKey {
	this.vs = []interface{}{tag_id, project_id}
	return this
}

type projectTagEntryTable struct {
	table ormtable.Table
}

func (this projectTagEntryTable) Insert(ctx context.Context, projectTagEntry *ProjectTagEntry) error {
	return this.table.Insert(ctx, projectTagEntry)
}

func (this projectTagEntryTable) Update(ctx context.Context, projectTagEntry *ProjectTagEntry) error {
	return this.table.Update(ctx, projectTagEntry)
}

func (this projectTagEntryTable) Save(ctx context.Context, projectTagEntry *ProjectTagEntry) error {
	return this.table.Save(ctx, projectTagEntry)
}

func (this projectTagEntryTable) Delete(ctx context.Context, projectTagEntry *ProjectTagEntry) error {
	return this.table.Delete(ctx, projectTagEntry)
}

func (this projectTagEntryTable) Has(ctx context.Context, project_id uint64, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, project_id, tag_id)
}

func (this projectTagEntryTable) Get(ctx context.Context, project_id uint64, tag_id uint64) (*ProjectTagEntry, error) {
	var projectTagEntry ProjectTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &projectTagEntry, project_id, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &projectTagEntry, nil
}

func (this projectTagEntryTable) List(ctx context.Context, prefixKey ProjectTagEntryIndexKey, opts ...ormlist.Option) (ProjectTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ProjectTagEntryIterator{it}, err
}

func (this projectTagEntryTable) ListRange(ctx context.Context, from, to ProjectTagEntryIndexKey, opts ...ormlist.Option) (ProjectTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ProjectTagEntryIterator{it}, err
}

func (this projectTagEntryTable) DeleteBy(ctx context.Context, prefixKey ProjectTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this projectTagEntryTable) DeleteRange(ctx context.Context, from, to ProjectTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this projectTagEntryTable) doNotImplement() {}

var _ ProjectTagEntryTable = projectTagEntryTable{}

func NewProjectTagEntryTable(db ormtable.Schema) (ProjectTagEntryTable, error) {
	table := db.GetTable(&ProjectTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ProjectTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return projectTagEntryTable{table}, nil
}

type ProjectNumericTagEntryTable interface {
	Insert(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error
	Update(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error
	Save(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error
	Delete(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error
	Has(ctx context.Context, project_id uint64, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, project_id uint64, tag_id uint64) (*ProjectNumericTagEntry, error)
	List(ctx context.Context, prefixKey ProjectNumericTagEntryIndexKey, opts ...ormlist.Option) (ProjectNumericTagEntryIterator, error)
	ListRange(ctx context.Context, from, to ProjectNumericTagEntryIndexKey, opts ...ormlist.Option) (ProjectNumericTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey ProjectNumericTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to ProjectNumericTagEntryIndexKey) error

	doNotImplement()
}

type ProjectNumericTagEntryIterator struct {
	ormtable.Iterator
}

func (i ProjectNumericTagEntryIterator) Value() (*ProjectNumericTagEntry, error) {
	var projectNumericTagEntry ProjectNumericTagEntry
	err := i.UnmarshalMessage(&projectNumericTagEntry)
	return &projectNumericTagEntry, err
}

type ProjectNumericTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	projectNumericTagEntryIndexKey()
}

// primary key starting index..
type ProjectNumericTagEntryPrimaryKey = ProjectNumericTagEntryProjectIdTagIdIndexKey

type ProjectNumericTagEntryProjectIdTagIdIndexKey struct {
	vs []interface{}
}

func (x ProjectNumericTagEntryProjectIdTagIdIndexKey) id() uint32                      { return 0 }
func (x ProjectNumericTagEntryProjectIdTagIdIndexKey) values() []interface{}           { return x.vs }
func (x ProjectNumericTagEntryProjectIdTagIdIndexKey) projectNumericTagEntryIndexKey() {}

func (this ProjectNumericTagEntryProjectIdTagIdIndexKey) WithProjectId(project_id uint64) ProjectNumericTagEntryProjectIdTagIdIndexKey {
	this.vs = []interface{}{project_id}
	return this
}

func (this ProjectNumericTagEntryProjectIdTagIdIndexKey) WithProjectIdTagId(project_id uint64, tag_id uint64) ProjectNumericTagEntryProjectIdTagIdIndexKey {
	this.vs = []interface{}{project_id, tag_id}
	return this
}

type ProjectNumericTagEntryTagIdProjectIdIndexKey struct {
	vs []interface{}
}

func (x ProjectNumericTagEntryTagIdProjectIdIndexKey) id() uint32                      { return 1 }
func (x ProjectNumericTagEntryTagIdProjectIdIndexKey) values() []interface{}           { return x.vs }
func (x ProjectNumericTagEntryTagIdProjectIdIndexKey) projectNumericTagEntryIndexKey() {}

func (this ProjectNumericTagEntryTagIdProjectIdIndexKey) WithTagId(tag_id uint64) ProjectNumericTagEntryTagIdProjectIdIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this ProjectNumericTagEntryTagIdProjectIdIndexKey) WithTagIdProjectId(tag_id uint64, project_id uint64) ProjectNumericTagEntryTagIdProjectIdIndexKey {
	this.vs = []interface{}{tag_id, project_id}
	return this
}

type ProjectNumericTagEntryTagIdValueIndexKey struct {
	vs []interface{}
}

func (x ProjectNumericTagEntryTagIdValueIndexKey) id() uint32                      { return 2 }
func (x ProjectNumericTagEntryTagIdValueIndexKey) values() []interface{}           { return x.vs }
func (x ProjectNumericTagEntryTagIdValueIndexKey) projectNumericTagEntryIndexKey() {}

func (this ProjectNumericTagEntryTagIdValueIndexKey) WithTagId(tag_id uint64) ProjectNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this ProjectNumericTagEntryTagIdValueIndexKey) WithTagIdValue(tag_id uint64, value uint64) ProjectNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id, value}
	return this
}

type projectNumericTagEntryTable struct {
	table ormtable.Table
}

func (this projectNumericTagEntryTable) Insert(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error {
	return this.table.Insert(ctx, projectNumericTagEntry)
}

func (this projectNumericTagEntryTable) Update(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error {
	return this.table.Update(ctx, projectNumericTagEntry)
}

func (this projectNumericTagEntryTable) Save(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error {
	return this.table.Save(ctx, projectNumericTagEntry)
}

func (this projectNumericTagEntryTable) Delete(ctx context.Context, projectNumericTagEntry *ProjectNumericTagEntry) error {
	return this.table.Delete(ctx, projectNumericTagEntry)
}

func (this projectNumericTagEntryTable) Has(ctx context.Context, project_id uint64, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, project_id, tag_id)
}

func (this projectNumericTagEntryTable) Get(ctx context.Context, project_id uint64, tag_id uint64) (*ProjectNumericTagEntry, error) {
	var projectNumericTagEntry ProjectNumericTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &projectNumericTagEntry, project_id, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &projectNumericTagEntry, nil
}

func (this projectNumericTagEntryTable) List(ctx context.Context, prefixKey ProjectNumericTagEntryIndexKey, opts ...ormlist.Option) (ProjectNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ProjectNumericTagEntryIterator{it}, err
}

func (this projectNumericTagEntryTable) ListRange(ctx context.Context, from, to ProjectNumericTagEntryIndexKey, opts ...ormlist.Option) (ProjectNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ProjectNumericTagEntryIterator{it}, err
}

func (this projectNumericTagEntryTable) DeleteBy(ctx context.Context, prefixKey ProjectNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this projectNumericTagEntryTable) DeleteRange(ctx context.Context, from, to ProjectNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this projectNumericTagEntryTable) doNotImplement() {}

var _ ProjectNumericTagEntryTable = projectNumericTagEntryTable{}

func NewProjectNumericTagEntryTable(db ormtable.Schema) (ProjectNumericTagEntryTable, error) {
	table := db.GetTable(&ProjectNumericTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ProjectNumericTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return projectNumericTagEntryTable{table}, nil
}

type BatchTagEntryTable interface {
	Insert(ctx context.Context, batchTagEntry *BatchTagEntry) error
	Update(ctx context.Context, batchTagEntry *BatchTagEntry) error
	Save(ctx context.Context, batchTagEntry *BatchTagEntry) error
	Delete(ctx context.Context, batchTagEntry *BatchTagEntry) error
	Has(ctx context.Context, batch_id uint64, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, batch_id uint64, tag_id uint64) (*BatchTagEntry, error)
	List(ctx context.Context, prefixKey BatchTagEntryIndexKey, opts ...ormlist.Option) (BatchTagEntryIterator, error)
	ListRange(ctx context.Context, from, to BatchTagEntryIndexKey, opts ...ormlist.Option) (BatchTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey BatchTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to BatchTagEntryIndexKey) error

	doNotImplement()
}

type BatchTagEntryIterator struct {
	ormtable.Iterator
}

func (i BatchTagEntryIterator) Value() (*BatchTagEntry, error) {
	var batchTagEntry BatchTagEntry
	err := i.UnmarshalMessage(&batchTagEntry)
	return &batchTagEntry, err
}

type BatchTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	batchTagEntryIndexKey()
}

// primary key starting index..
type BatchTagEntryPrimaryKey = BatchTagEntryBatchIdTagIdIndexKey

type BatchTagEntryBatchIdTagIdIndexKey struct {
	vs []interface{}
}

func (x BatchTagEntryBatchIdTagIdIndexKey) id() uint32             { return 0 }
func (x BatchTagEntryBatchIdTagIdIndexKey) values() []interface{}  { return x.vs }
func (x BatchTagEntryBatchIdTagIdIndexKey) batchTagEntryIndexKey() {}

func (this BatchTagEntryBatchIdTagIdIndexKey) WithBatchId(batch_id uint64) BatchTagEntryBatchIdTagIdIndexKey {
	this.vs = []interface{}{batch_id}
	return this
}

func (this BatchTagEntryBatchIdTagIdIndexKey) WithBatchIdTagId(batch_id uint64, tag_id uint64) BatchTagEntryBatchIdTagIdIndexKey {
	this.vs = []interface{}{batch_id, tag_id}
	return this
}

type BatchTagEntryTagIdBatchIdIndexKey struct {
	vs []interface{}
}

func (x BatchTagEntryTagIdBatchIdIndexKey) id() uint32             { return 1 }
func (x BatchTagEntryTagIdBatchIdIndexKey) values() []interface{}  { return x.vs }
func (x BatchTagEntryTagIdBatchIdIndexKey) batchTagEntryIndexKey() {}

func (this BatchTagEntryTagIdBatchIdIndexKey) WithTagId(tag_id uint64) BatchTagEntryTagIdBatchIdIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this BatchTagEntryTagIdBatchIdIndexKey) WithTagIdBatchId(tag_id uint64, batch_id uint64) BatchTagEntryTagIdBatchIdIndexKey {
	this.vs = []interface{}{tag_id, batch_id}
	return this
}

type batchTagEntryTable struct {
	table ormtable.Table
}

func (this batchTagEntryTable) Insert(ctx context.Context, batchTagEntry *BatchTagEntry) error {
	return this.table.Insert(ctx, batchTagEntry)
}

func (this batchTagEntryTable) Update(ctx context.Context, batchTagEntry *BatchTagEntry) error {
	return this.table.Update(ctx, batchTagEntry)
}

func (this batchTagEntryTable) Save(ctx context.Context, batchTagEntry *BatchTagEntry) error {
	return this.table.Save(ctx, batchTagEntry)
}

func (this batchTagEntryTable) Delete(ctx context.Context, batchTagEntry *BatchTagEntry) error {
	return this.table.Delete(ctx, batchTagEntry)
}

func (this batchTagEntryTable) Has(ctx context.Context, batch_id uint64, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, batch_id, tag_id)
}

func (this batchTagEntryTable) Get(ctx context.Context, batch_id uint64, tag_id uint64) (*BatchTagEntry, error) {
	var batchTagEntry BatchTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &batchTagEntry, batch_id, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &batchTagEntry, nil
}

func (this batchTagEntryTable) List(ctx context.Context, prefixKey BatchTagEntryIndexKey, opts ...ormlist.Option) (BatchTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return BatchTagEntryIterator{it}, err
}

func (this batchTagEntryTable) ListRange(ctx context.Context, from, to BatchTagEntryIndexKey, opts ...ormlist.Option) (BatchTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return BatchTagEntryIterator{it}, err
}

func (this batchTagEntryTable) DeleteBy(ctx context.Context, prefixKey BatchTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this batchTagEntryTable) DeleteRange(ctx context.Context, from, to BatchTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this batchTagEntryTable) doNotImplement() {}

var _ BatchTagEntryTable = batchTagEntryTable{}

func NewBatchTagEntryTable(db ormtable.Schema) (BatchTagEntryTable, error) {
	table := db.GetTable(&BatchTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&BatchTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return batchTagEntryTable{table}, nil
}

type BatchNumericTagEntryTable interface {
	Insert(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error
	Update(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error
	Save(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error
	Delete(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error
	Has(ctx context.Context, batch_id uint64, tag_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, batch_id uint64, tag_id uint64) (*BatchNumericTagEntry, error)
	List(ctx context.Context, prefixKey BatchNumericTagEntryIndexKey, opts ...ormlist.Option) (BatchNumericTagEntryIterator, error)
	ListRange(ctx context.Context, from, to BatchNumericTagEntryIndexKey, opts ...ormlist.Option) (BatchNumericTagEntryIterator, error)
	DeleteBy(ctx context.Context, prefixKey BatchNumericTagEntryIndexKey) error
	DeleteRange(ctx context.Context, from, to BatchNumericTagEntryIndexKey) error

	doNotImplement()
}

type BatchNumericTagEntryIterator struct {
	ormtable.Iterator
}

func (i BatchNumericTagEntryIterator) Value() (*BatchNumericTagEntry, error) {
	var batchNumericTagEntry BatchNumericTagEntry
	err := i.UnmarshalMessage(&batchNumericTagEntry)
	return &batchNumericTagEntry, err
}

type BatchNumericTagEntryIndexKey interface {
	id() uint32
	values() []interface{}
	batchNumericTagEntryIndexKey()
}

// primary key starting index..
type BatchNumericTagEntryPrimaryKey = BatchNumericTagEntryBatchIdTagIdIndexKey

type BatchNumericTagEntryBatchIdTagIdIndexKey struct {
	vs []interface{}
}

func (x BatchNumericTagEntryBatchIdTagIdIndexKey) id() uint32                    { return 0 }
func (x BatchNumericTagEntryBatchIdTagIdIndexKey) values() []interface{}         { return x.vs }
func (x BatchNumericTagEntryBatchIdTagIdIndexKey) batchNumericTagEntryIndexKey() {}

func (this BatchNumericTagEntryBatchIdTagIdIndexKey) WithBatchId(batch_id uint64) BatchNumericTagEntryBatchIdTagIdIndexKey {
	this.vs = []interface{}{batch_id}
	return this
}

func (this BatchNumericTagEntryBatchIdTagIdIndexKey) WithBatchIdTagId(batch_id uint64, tag_id uint64) BatchNumericTagEntryBatchIdTagIdIndexKey {
	this.vs = []interface{}{batch_id, tag_id}
	return this
}

type BatchNumericTagEntryTagIdBatchIdIndexKey struct {
	vs []interface{}
}

func (x BatchNumericTagEntryTagIdBatchIdIndexKey) id() uint32                    { return 1 }
func (x BatchNumericTagEntryTagIdBatchIdIndexKey) values() []interface{}         { return x.vs }
func (x BatchNumericTagEntryTagIdBatchIdIndexKey) batchNumericTagEntryIndexKey() {}

func (this BatchNumericTagEntryTagIdBatchIdIndexKey) WithTagId(tag_id uint64) BatchNumericTagEntryTagIdBatchIdIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this BatchNumericTagEntryTagIdBatchIdIndexKey) WithTagIdBatchId(tag_id uint64, batch_id uint64) BatchNumericTagEntryTagIdBatchIdIndexKey {
	this.vs = []interface{}{tag_id, batch_id}
	return this
}

type BatchNumericTagEntryTagIdValueIndexKey struct {
	vs []interface{}
}

func (x BatchNumericTagEntryTagIdValueIndexKey) id() uint32                    { return 2 }
func (x BatchNumericTagEntryTagIdValueIndexKey) values() []interface{}         { return x.vs }
func (x BatchNumericTagEntryTagIdValueIndexKey) batchNumericTagEntryIndexKey() {}

func (this BatchNumericTagEntryTagIdValueIndexKey) WithTagId(tag_id uint64) BatchNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id}
	return this
}

func (this BatchNumericTagEntryTagIdValueIndexKey) WithTagIdValue(tag_id uint64, value uint64) BatchNumericTagEntryTagIdValueIndexKey {
	this.vs = []interface{}{tag_id, value}
	return this
}

type batchNumericTagEntryTable struct {
	table ormtable.Table
}

func (this batchNumericTagEntryTable) Insert(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error {
	return this.table.Insert(ctx, batchNumericTagEntry)
}

func (this batchNumericTagEntryTable) Update(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error {
	return this.table.Update(ctx, batchNumericTagEntry)
}

func (this batchNumericTagEntryTable) Save(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error {
	return this.table.Save(ctx, batchNumericTagEntry)
}

func (this batchNumericTagEntryTable) Delete(ctx context.Context, batchNumericTagEntry *BatchNumericTagEntry) error {
	return this.table.Delete(ctx, batchNumericTagEntry)
}

func (this batchNumericTagEntryTable) Has(ctx context.Context, batch_id uint64, tag_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, batch_id, tag_id)
}

func (this batchNumericTagEntryTable) Get(ctx context.Context, batch_id uint64, tag_id uint64) (*BatchNumericTagEntry, error) {
	var batchNumericTagEntry BatchNumericTagEntry
	found, err := this.table.PrimaryKey().Get(ctx, &batchNumericTagEntry, batch_id, tag_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &batchNumericTagEntry, nil
}

func (this batchNumericTagEntryTable) List(ctx context.Context, prefixKey BatchNumericTagEntryIndexKey, opts ...ormlist.Option) (BatchNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return BatchNumericTagEntryIterator{it}, err
}

func (this batchNumericTagEntryTable) ListRange(ctx context.Context, from, to BatchNumericTagEntryIndexKey, opts ...ormlist.Option) (BatchNumericTagEntryIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return BatchNumericTagEntryIterator{it}, err
}

func (this batchNumericTagEntryTable) DeleteBy(ctx context.Context, prefixKey BatchNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this batchNumericTagEntryTable) DeleteRange(ctx context.Context, from, to BatchNumericTagEntryIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this batchNumericTagEntryTable) doNotImplement() {}

var _ BatchNumericTagEntryTable = batchNumericTagEntryTable{}

func NewBatchNumericTagEntryTable(db ormtable.Schema) (BatchNumericTagEntryTable, error) {
	table := db.GetTable(&BatchNumericTagEntry{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&BatchNumericTagEntry{}).ProtoReflect().Descriptor().FullName()))
	}
	return batchNumericTagEntryTable{table}, nil
}

type StateStore interface {
	TagDefinitionTable() TagDefinitionTable
	AddressTagEntryTable() AddressTagEntryTable
	AddressNumericTagEntryTable() AddressNumericTagEntryTable
	ClassTagEntryTable() ClassTagEntryTable
	ClassNumericTagEntryTable() ClassNumericTagEntryTable
	ProjectTagEntryTable() ProjectTagEntryTable
	ProjectNumericTagEntryTable() ProjectNumericTagEntryTable
	BatchTagEntryTable() BatchTagEntryTable
	BatchNumericTagEntryTable() BatchNumericTagEntryTable

	doNotImplement()
}

type stateStore struct {
	tagDefinition          TagDefinitionTable
	addressTagEntry        AddressTagEntryTable
	addressNumericTagEntry AddressNumericTagEntryTable
	classTagEntry          ClassTagEntryTable
	classNumericTagEntry   ClassNumericTagEntryTable
	projectTagEntry        ProjectTagEntryTable
	projectNumericTagEntry ProjectNumericTagEntryTable
	batchTagEntry          BatchTagEntryTable
	batchNumericTagEntry   BatchNumericTagEntryTable
}

func (x stateStore) TagDefinitionTable() TagDefinitionTable {
	return x.tagDefinition
}

func (x stateStore) AddressTagEntryTable() AddressTagEntryTable {
	return x.addressTagEntry
}

func (x stateStore) AddressNumericTagEntryTable() AddressNumericTagEntryTable {
	return x.addressNumericTagEntry
}

func (x stateStore) ClassTagEntryTable() ClassTagEntryTable {
	return x.classTagEntry
}

func (x stateStore) ClassNumericTagEntryTable() ClassNumericTagEntryTable {
	return x.classNumericTagEntry
}

func (x stateStore) ProjectTagEntryTable() ProjectTagEntryTable {
	return x.projectTagEntry
}

func (x stateStore) ProjectNumericTagEntryTable() ProjectNumericTagEntryTable {
	return x.projectNumericTagEntry
}

func (x stateStore) BatchTagEntryTable() BatchTagEntryTable {
	return x.batchTagEntry
}

func (x stateStore) BatchNumericTagEntryTable() BatchNumericTagEntryTable {
	return x.batchNumericTagEntry
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	tagDefinitionTable, err := NewTagDefinitionTable(db)
	if err != nil {
		return nil, err
	}

	addressTagEntryTable, err := NewAddressTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	addressNumericTagEntryTable, err := NewAddressNumericTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	classTagEntryTable, err := NewClassTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	classNumericTagEntryTable, err := NewClassNumericTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	projectTagEntryTable, err := NewProjectTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	projectNumericTagEntryTable, err := NewProjectNumericTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	batchTagEntryTable, err := NewBatchTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	batchNumericTagEntryTable, err := NewBatchNumericTagEntryTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		tagDefinitionTable,
		addressTagEntryTable,
		addressNumericTagEntryTable,
		classTagEntryTable,
		classNumericTagEntryTable,
		projectTagEntryTable,
		projectNumericTagEntryTable,
		batchTagEntryTable,
		batchNumericTagEntryTable,
	}, nil
}
