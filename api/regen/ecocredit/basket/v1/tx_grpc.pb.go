// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: regen/ecocredit/basket/v1/tx.proto

package basketv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_Create_FullMethodName             = "/regen.ecocredit.basket.v1.Msg/Create"
	Msg_Put_FullMethodName                = "/regen.ecocredit.basket.v1.Msg/Put"
	Msg_Take_FullMethodName               = "/regen.ecocredit.basket.v1.Msg/Take"
	Msg_UpdateBasketFee_FullMethodName    = "/regen.ecocredit.basket.v1.Msg/UpdateBasketFee"
	Msg_UpdateCurator_FullMethodName      = "/regen.ecocredit.basket.v1.Msg/UpdateCurator"
	Msg_UpdateDateCriteria_FullMethodName = "/regen.ecocredit.basket.v1.Msg/UpdateDateCriteria"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// Create creates a basket that can hold different types of ecocredits that
	// meet the basket's criteria. Upon depositing ecocredits into the basket,
	// basket tokens are minted and sent to depositor using the Cosmos SDK Bank
	// module. This allows basket tokens to be utilized within IBC. Basket tokens
	// are fully fungible with other basket tokens from the same basket. The
	// basket token denom is derived from the basket name, credit type
	// abbreviation, and credit type precision (i.e. basket name "foo", credit
	// type exponent 6, and credit type abbreviation "C" generates the denom
	// eco.uC.foo). Baskets can limit credit acceptance criteria based on a
	// combination of credit type, credit classes, and credit batch start date.
	// Credits can be taken from the basket in exchange for basket tokens. Taken
	// credits will be immediately retired, unless disable_auto_retire is set to
	// true. When set to true, credits may be received in either a tradable or
	// retired state, depending on the taker's request. If the basket fee
	// governance parameter is set, a fee of equal or greater value must be
	// provided in the request. Only the amount specified in the fee parameter
	// will be charged, even if a greater value fee is provided. Fees from
	// creating a basket are burned.
	Create(ctx context.Context, in *MsgCreate, opts ...grpc.CallOption) (*MsgCreateResponse, error)
	// Put deposits credits into the basket from the holder's tradable balance in
	// exchange for basket tokens. The amount of tokens received is calculated by
	// the following formula: sum(credits_deposited) * 10^credit_type_exponent.
	// The credits being deposited MUST adhere to the criteria of the basket.
	Put(ctx context.Context, in *MsgPut, opts ...grpc.CallOption) (*MsgPutResponse, error)
	// Take exchanges basket tokens for credits from the specified basket. Credits
	// are taken deterministically, ordered by oldest batch start date to the most
	// recent batch start date. If the basket has disable_auto_retire set to
	// false, both retirement_jurisdiction and retire_on_take must be set, and the
	// taken credits will be retired immediately upon receipt. Otherwise, credits
	// may be received as tradable or retired, based on the request.
	Take(ctx context.Context, in *MsgTake, opts ...grpc.CallOption) (*MsgTakeResponse, error)
	// UpdateBasketFee is a governance method that allows for updating the basket
	// creation fee. If not set, the basket creation fee will be removed and no
	// fee will be required to create a basket.
	//
	// Since Revision 2
	UpdateBasketFee(ctx context.Context, in *MsgUpdateBasketFee, opts ...grpc.CallOption) (*MsgUpdateBasketFeeResponse, error)
	// UpdateCurator updates basket curator.
	//
	// Since Revision 2
	UpdateCurator(ctx context.Context, in *MsgUpdateCurator, opts ...grpc.CallOption) (*MsgUpdateCuratorResponse, error)
	// UpdateDateCriteria is a governance method that allows for updating the date
	// criteria of a basket. Updating basket date criteria could affect the value
	// of basket tokens and therefore requires a network-wide governance process.
	//
	// Since Revision 3
	UpdateDateCriteria(ctx context.Context, in *MsgUpdateDateCriteria, opts ...grpc.CallOption) (*MsgUpdateDateCriteriaResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Create(ctx context.Context, in *MsgCreate, opts ...grpc.CallOption) (*MsgCreateResponse, error) {
	out := new(MsgCreateResponse)
	err := c.cc.Invoke(ctx, Msg_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Put(ctx context.Context, in *MsgPut, opts ...grpc.CallOption) (*MsgPutResponse, error) {
	out := new(MsgPutResponse)
	err := c.cc.Invoke(ctx, Msg_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Take(ctx context.Context, in *MsgTake, opts ...grpc.CallOption) (*MsgTakeResponse, error) {
	out := new(MsgTakeResponse)
	err := c.cc.Invoke(ctx, Msg_Take_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBasketFee(ctx context.Context, in *MsgUpdateBasketFee, opts ...grpc.CallOption) (*MsgUpdateBasketFeeResponse, error) {
	out := new(MsgUpdateBasketFeeResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateBasketFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCurator(ctx context.Context, in *MsgUpdateCurator, opts ...grpc.CallOption) (*MsgUpdateCuratorResponse, error) {
	out := new(MsgUpdateCuratorResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCurator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDateCriteria(ctx context.Context, in *MsgUpdateDateCriteria, opts ...grpc.CallOption) (*MsgUpdateDateCriteriaResponse, error) {
	out := new(MsgUpdateDateCriteriaResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateDateCriteria_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// Create creates a basket that can hold different types of ecocredits that
	// meet the basket's criteria. Upon depositing ecocredits into the basket,
	// basket tokens are minted and sent to depositor using the Cosmos SDK Bank
	// module. This allows basket tokens to be utilized within IBC. Basket tokens
	// are fully fungible with other basket tokens from the same basket. The
	// basket token denom is derived from the basket name, credit type
	// abbreviation, and credit type precision (i.e. basket name "foo", credit
	// type exponent 6, and credit type abbreviation "C" generates the denom
	// eco.uC.foo). Baskets can limit credit acceptance criteria based on a
	// combination of credit type, credit classes, and credit batch start date.
	// Credits can be taken from the basket in exchange for basket tokens. Taken
	// credits will be immediately retired, unless disable_auto_retire is set to
	// true. When set to true, credits may be received in either a tradable or
	// retired state, depending on the taker's request. If the basket fee
	// governance parameter is set, a fee of equal or greater value must be
	// provided in the request. Only the amount specified in the fee parameter
	// will be charged, even if a greater value fee is provided. Fees from
	// creating a basket are burned.
	Create(context.Context, *MsgCreate) (*MsgCreateResponse, error)
	// Put deposits credits into the basket from the holder's tradable balance in
	// exchange for basket tokens. The amount of tokens received is calculated by
	// the following formula: sum(credits_deposited) * 10^credit_type_exponent.
	// The credits being deposited MUST adhere to the criteria of the basket.
	Put(context.Context, *MsgPut) (*MsgPutResponse, error)
	// Take exchanges basket tokens for credits from the specified basket. Credits
	// are taken deterministically, ordered by oldest batch start date to the most
	// recent batch start date. If the basket has disable_auto_retire set to
	// false, both retirement_jurisdiction and retire_on_take must be set, and the
	// taken credits will be retired immediately upon receipt. Otherwise, credits
	// may be received as tradable or retired, based on the request.
	Take(context.Context, *MsgTake) (*MsgTakeResponse, error)
	// UpdateBasketFee is a governance method that allows for updating the basket
	// creation fee. If not set, the basket creation fee will be removed and no
	// fee will be required to create a basket.
	//
	// Since Revision 2
	UpdateBasketFee(context.Context, *MsgUpdateBasketFee) (*MsgUpdateBasketFeeResponse, error)
	// UpdateCurator updates basket curator.
	//
	// Since Revision 2
	UpdateCurator(context.Context, *MsgUpdateCurator) (*MsgUpdateCuratorResponse, error)
	// UpdateDateCriteria is a governance method that allows for updating the date
	// criteria of a basket. Updating basket date criteria could affect the value
	// of basket tokens and therefore requires a network-wide governance process.
	//
	// Since Revision 3
	UpdateDateCriteria(context.Context, *MsgUpdateDateCriteria) (*MsgUpdateDateCriteriaResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) Create(context.Context, *MsgCreate) (*MsgCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMsgServer) Put(context.Context, *MsgPut) (*MsgPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedMsgServer) Take(context.Context, *MsgTake) (*MsgTakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Take not implemented")
}
func (UnimplementedMsgServer) UpdateBasketFee(context.Context, *MsgUpdateBasketFee) (*MsgUpdateBasketFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasketFee not implemented")
}
func (UnimplementedMsgServer) UpdateCurator(context.Context, *MsgUpdateCurator) (*MsgUpdateCuratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurator not implemented")
}
func (UnimplementedMsgServer) UpdateDateCriteria(context.Context, *MsgUpdateDateCriteria) (*MsgUpdateDateCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDateCriteria not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Create(ctx, req.(*MsgCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Put(ctx, req.(*MsgPut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Take_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Take(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Take_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Take(ctx, req.(*MsgTake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBasketFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBasketFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBasketFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateBasketFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBasketFee(ctx, req.(*MsgUpdateBasketFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCurator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCurator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCurator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCurator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCurator(ctx, req.(*MsgUpdateCurator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDateCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDateCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDateCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDateCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDateCriteria(ctx, req.(*MsgUpdateDateCriteria))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regen.ecocredit.basket.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Msg_Create_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Msg_Put_Handler,
		},
		{
			MethodName: "Take",
			Handler:    _Msg_Take_Handler,
		},
		{
			MethodName: "UpdateBasketFee",
			Handler:    _Msg_UpdateBasketFee_Handler,
		},
		{
			MethodName: "UpdateCurator",
			Handler:    _Msg_UpdateCurator_Handler,
		},
		{
			MethodName: "UpdateDateCriteria",
			Handler:    _Msg_UpdateDateCriteria_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/ecocredit/basket/v1/tx.proto",
}
