// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package basketv1beta1

import (
	context "context"
	ormdb "github.com/cosmos/cosmos-sdk/orm/model/ormdb"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type BasketBalanceStore interface {
	Insert(ctx context.Context, basketBalance *BasketBalance) error
	Update(ctx context.Context, basketBalance *BasketBalance) error
	Save(ctx context.Context, basketBalance *BasketBalance) error
	Delete(ctx context.Context, basketBalance *BasketBalance) error
	Has(ctx context.Context, basket_denom string, batch_id uint64) (found bool, err error)
	Get(ctx context.Context, basket_denom string, batch_id uint64) (*BasketBalance, error)
	List(ctx context.Context, prefixKey BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error)
	ListRange(ctx context.Context, from, to BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error)

	doNotImplement()
}

type BasketBalanceIterator struct {
	ormtable.Iterator
}

func (i BasketBalanceIterator) Value() (*BasketBalance, error) {
	var basketBalance BasketBalance
	err := i.UnmarshalMessage(&basketBalance)
	return &basketBalance, err
}

type BasketBalanceIndexKey interface {
	id() uint32
	values() []interface{}
	basketBalanceIndexKey()
}

// primary key starting index..
type BasketBalancePrimaryKey = BasketBalanceBasketDenomBatchIdIndexKey

type BasketBalanceBasketDenomBatchIdIndexKey struct {
	vs []interface{}
}

func (x BasketBalanceBasketDenomBatchIdIndexKey) id() uint32             { return 0 }
func (x BasketBalanceBasketDenomBatchIdIndexKey) values() []interface{}  { return x.vs }
func (x BasketBalanceBasketDenomBatchIdIndexKey) basketBalanceIndexKey() {}

func (this BasketBalanceBasketDenomBatchIdIndexKey) WithBasketDenom(basket_denom string) BasketBalanceBasketDenomBatchIdIndexKey {
	this.vs = []interface{}{basket_denom}
	return this
}

func (this BasketBalanceBasketDenomBatchIdIndexKey) WithBasketDenomBatchId(basket_denom string, batch_id uint64) BasketBalanceBasketDenomBatchIdIndexKey {
	this.vs = []interface{}{basket_denom, batch_id}
	return this
}

type basketBalanceStore struct {
	table ormtable.Table
}

func (this basketBalanceStore) Insert(ctx context.Context, basketBalance *BasketBalance) error {
	return this.table.Insert(ctx, basketBalance)
}

func (this basketBalanceStore) Update(ctx context.Context, basketBalance *BasketBalance) error {
	return this.table.Update(ctx, basketBalance)
}

func (this basketBalanceStore) Save(ctx context.Context, basketBalance *BasketBalance) error {
	return this.table.Save(ctx, basketBalance)
}

func (this basketBalanceStore) Delete(ctx context.Context, basketBalance *BasketBalance) error {
	return this.table.Delete(ctx, basketBalance)
}

func (this basketBalanceStore) Has(ctx context.Context, basket_denom string, batch_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, basket_denom, batch_id)
}

func (this basketBalanceStore) Get(ctx context.Context, basket_denom string, batch_id uint64) (*BasketBalance, error) {
	var basketBalance BasketBalance
	found, err := this.table.PrimaryKey().Get(ctx, &basketBalance, basket_denom, batch_id)
	if !found {
		return nil, err
	}
	return &basketBalance, err
}

func (this basketBalanceStore) List(ctx context.Context, prefixKey BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()...))
	it, err := this.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return BasketBalanceIterator{it}, err
}

func (this basketBalanceStore) ListRange(ctx context.Context, from, to BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error) {
	opts = append(opts, ormlist.Start(from.values()...), ormlist.End(to.values()...))
	it, err := this.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return BasketBalanceIterator{it}, err
}

func (this basketBalanceStore) doNotImplement() {}

var _ BasketBalanceStore = basketBalanceStore{}

func NewBasketBalanceStore(db ormdb.ModuleDB) (BasketBalanceStore, error) {
	table := db.GetTable(&BasketBalance{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&BasketBalance{}).ProtoReflect().Descriptor().FullName()))
	}
	return basketBalanceStore{table}, nil
}

type StateStore interface {
	BasketBalanceStore() BasketBalanceStore

	doNotImplement()
}

type stateStore struct {
	basketBalance BasketBalanceStore
}

func (x stateStore) BasketBalanceStore() BasketBalanceStore {
	return x.basketBalance
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormdb.ModuleDB) (StateStore, error) {
	basketBalanceStore, err := NewBasketBalanceStore(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		basketBalanceStore,
	}, nil
}
