// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package marketplace

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type StateStore interface {
	SellOrder() SellOrderStore
	BuyOrder() BuyOrderStore
	AskDenom() AskDenomStore
}

type SellOrderStore interface {
	Insert(ctx context.Context, sellOrder *SellOrder) error
	Update(ctx context.Context, sellOrder *SellOrder) error
	Save(ctx context.Context, sellOrder *SellOrder) error
	Delete(ctx context.Context, sellOrder *SellOrder) error
	Has(ctx context.Context, order_id uint64) (found bool, err error)
	Get(ctx context.Context, order_id uint64) (*SellOrder, error)
	List(ctx context.Context, prefixKey SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error)
	ListRange(ctx context.Context, from, to SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error)
}

type SellOrderIterator struct {
	ormtable.Iterator
}

func (i SellOrderIterator) Value() (*SellOrder, error) {
	var sellOrder SellOrder
	err := i.UnmarshalMessage(&sellOrder)
	return &sellOrder, err
}

type SellOrderIndexKey interface {
	id() uint32
	values() []interface{}
	sellOrderIndexKey()
}

type SellOrderOrderIdIndexKey struct {
	vs []interface{}
}

func (x SellOrderOrderIdIndexKey) id() uint32            { return 1 /* primary key */ }
func (x SellOrderOrderIdIndexKey) values() []interface{} { return x.vs }
func (x SellOrderOrderIdIndexKey) sellOrderIndexKey()    {}

var _ SellOrderIndexKey = SellOrderOrderIdIndexKey{}

func (x SellOrderOrderIdIndexKey) WithOrderId(order_id uint64) SellOrderOrderIdIndexKey {
	x.vs = []interface{}{order_id}
	return x
}

type SellOrderBatchDenomOrderIdIndexKey struct {
	vs []interface{}
}

func (x SellOrderBatchDenomOrderIdIndexKey) id() uint32            { return 1 /* primary key */ }
func (x SellOrderBatchDenomOrderIdIndexKey) values() []interface{} { return x.vs }
func (x SellOrderBatchDenomOrderIdIndexKey) sellOrderIndexKey()    {}

var _ SellOrderIndexKey = SellOrderBatchDenomOrderIdIndexKey{}

func (x SellOrderBatchDenomOrderIdIndexKey) WithBatchDenom(batch_denom string) SellOrderBatchDenomOrderIdIndexKey {
	x.vs = []interface{}{batch_denom}
	return x
}
func (x SellOrderBatchDenomOrderIdIndexKey) WithBatchDenomOrderId(batch_denom string, order_id uint64) SellOrderBatchDenomOrderIdIndexKey {
	x.vs = []interface{}{batch_denom, order_id}
	return x
}

type SellOrderOwnerOrderIdIndexKey struct {
	vs []interface{}
}

func (x SellOrderOwnerOrderIdIndexKey) id() uint32            { return 1 /* primary key */ }
func (x SellOrderOwnerOrderIdIndexKey) values() []interface{} { return x.vs }
func (x SellOrderOwnerOrderIdIndexKey) sellOrderIndexKey()    {}

var _ SellOrderIndexKey = SellOrderOwnerOrderIdIndexKey{}

func (x SellOrderOwnerOrderIdIndexKey) WithOwner(owner string) SellOrderOwnerOrderIdIndexKey {
	x.vs = []interface{}{owner}
	return x
}
func (x SellOrderOwnerOrderIdIndexKey) WithOwnerOrderId(owner string, order_id uint64) SellOrderOwnerOrderIdIndexKey {
	x.vs = []interface{}{owner, order_id}
	return x
}

type SellOrderExpirationOrderIdIndexKey struct {
	vs []interface{}
}

func (x SellOrderExpirationOrderIdIndexKey) id() uint32            { return 1 /* primary key */ }
func (x SellOrderExpirationOrderIdIndexKey) values() []interface{} { return x.vs }
func (x SellOrderExpirationOrderIdIndexKey) sellOrderIndexKey()    {}

var _ SellOrderIndexKey = SellOrderExpirationOrderIdIndexKey{}

func (x SellOrderExpirationOrderIdIndexKey) WithExpiration(expiration *timestamppb.Timestamp) SellOrderExpirationOrderIdIndexKey {
	x.vs = []interface{}{expiration}
	return x
}
func (x SellOrderExpirationOrderIdIndexKey) WithExpirationOrderId(expiration *timestamppb.Timestamp, order_id uint64) SellOrderExpirationOrderIdIndexKey {
	x.vs = []interface{}{expiration, order_id}
	return x
}

type sellOrderStore struct {
	table ormtable.Table
}

func (x sellOrderStore) Insert(ctx context.Context, sellOrder *SellOrder) error {
	return x.table.Insert(ctx, sellOrder)
}
func (x sellOrderStore) Update(ctx context.Context, sellOrder *SellOrder) error {
	return x.table.Update(ctx, sellOrder)
}
func (x sellOrderStore) Save(ctx context.Context, sellOrder *SellOrder) error {
	return x.table.Save(ctx, sellOrder)
}
func (x sellOrderStore) Delete(ctx context.Context, sellOrder *SellOrder) error {
	return x.table.Delete(ctx, sellOrder)
}
func (x sellOrderStore) Has(ctx context.Context, order_id uint64) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, order_id)
}
func (x sellOrderStore) Get(ctx context.Context, order_id uint64) (*SellOrder, error) {
	var sellOrder SellOrder
	found, err := x.table.PrimaryKey().Get(ctx, &sellOrder, order_id)
	if !found {
		return nil, err
	}
	return &sellOrder, err
}
func (x sellOrderStore) List(ctx context.Context, prefixKey SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return SellOrderIterator{it}, err
}
func (x sellOrderStore) ListRange(ctx context.Context, from, to SellOrderIndexKey, opts ...ormlist.Option) (SellOrderIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return SellOrderIterator{it}, err
}

var _ SellOrderStore = sellOrderStore{}

type BuyOrderStore interface {
	Insert(ctx context.Context, buyOrder *BuyOrder) error
	Update(ctx context.Context, buyOrder *BuyOrder) error
	Save(ctx context.Context, buyOrder *BuyOrder) error
	Delete(ctx context.Context, buyOrder *BuyOrder) error
	Has(ctx context.Context, buy_order_id uint64) (found bool, err error)
	Get(ctx context.Context, buy_order_id uint64) (*BuyOrder, error)
	List(ctx context.Context, prefixKey BuyOrderIndexKey, opts ...ormlist.Option) (BuyOrderIterator, error)
	ListRange(ctx context.Context, from, to BuyOrderIndexKey, opts ...ormlist.Option) (BuyOrderIterator, error)
}

type BuyOrderIterator struct {
	ormtable.Iterator
}

func (i BuyOrderIterator) Value() (*BuyOrder, error) {
	var buyOrder BuyOrder
	err := i.UnmarshalMessage(&buyOrder)
	return &buyOrder, err
}

type BuyOrderIndexKey interface {
	id() uint32
	values() []interface{}
	buyOrderIndexKey()
}

type BuyOrderBuyOrderIdIndexKey struct {
	vs []interface{}
}

func (x BuyOrderBuyOrderIdIndexKey) id() uint32            { return 2 /* primary key */ }
func (x BuyOrderBuyOrderIdIndexKey) values() []interface{} { return x.vs }
func (x BuyOrderBuyOrderIdIndexKey) buyOrderIndexKey()     {}

var _ BuyOrderIndexKey = BuyOrderBuyOrderIdIndexKey{}

func (x BuyOrderBuyOrderIdIndexKey) WithBuyOrderId(buy_order_id uint64) BuyOrderBuyOrderIdIndexKey {
	x.vs = []interface{}{buy_order_id}
	return x
}

type BuyOrderBuyerBuyOrderIdIndexKey struct {
	vs []interface{}
}

func (x BuyOrderBuyerBuyOrderIdIndexKey) id() uint32            { return 2 /* primary key */ }
func (x BuyOrderBuyerBuyOrderIdIndexKey) values() []interface{} { return x.vs }
func (x BuyOrderBuyerBuyOrderIdIndexKey) buyOrderIndexKey()     {}

var _ BuyOrderIndexKey = BuyOrderBuyerBuyOrderIdIndexKey{}

func (x BuyOrderBuyerBuyOrderIdIndexKey) WithBuyer(buyer string) BuyOrderBuyerBuyOrderIdIndexKey {
	x.vs = []interface{}{buyer}
	return x
}
func (x BuyOrderBuyerBuyOrderIdIndexKey) WithBuyerBuyOrderId(buyer string, buy_order_id uint64) BuyOrderBuyerBuyOrderIdIndexKey {
	x.vs = []interface{}{buyer, buy_order_id}
	return x
}

type BuyOrderExpirationBuyOrderIdIndexKey struct {
	vs []interface{}
}

func (x BuyOrderExpirationBuyOrderIdIndexKey) id() uint32            { return 2 /* primary key */ }
func (x BuyOrderExpirationBuyOrderIdIndexKey) values() []interface{} { return x.vs }
func (x BuyOrderExpirationBuyOrderIdIndexKey) buyOrderIndexKey()     {}

var _ BuyOrderIndexKey = BuyOrderExpirationBuyOrderIdIndexKey{}

func (x BuyOrderExpirationBuyOrderIdIndexKey) WithExpiration(expiration *timestamppb.Timestamp) BuyOrderExpirationBuyOrderIdIndexKey {
	x.vs = []interface{}{expiration}
	return x
}
func (x BuyOrderExpirationBuyOrderIdIndexKey) WithExpirationBuyOrderId(expiration *timestamppb.Timestamp, buy_order_id uint64) BuyOrderExpirationBuyOrderIdIndexKey {
	x.vs = []interface{}{expiration, buy_order_id}
	return x
}

type buyOrderStore struct {
	table ormtable.Table
}

func (x buyOrderStore) Insert(ctx context.Context, buyOrder *BuyOrder) error {
	return x.table.Insert(ctx, buyOrder)
}
func (x buyOrderStore) Update(ctx context.Context, buyOrder *BuyOrder) error {
	return x.table.Update(ctx, buyOrder)
}
func (x buyOrderStore) Save(ctx context.Context, buyOrder *BuyOrder) error {
	return x.table.Save(ctx, buyOrder)
}
func (x buyOrderStore) Delete(ctx context.Context, buyOrder *BuyOrder) error {
	return x.table.Delete(ctx, buyOrder)
}
func (x buyOrderStore) Has(ctx context.Context, buy_order_id uint64) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, buy_order_id)
}
func (x buyOrderStore) Get(ctx context.Context, buy_order_id uint64) (*BuyOrder, error) {
	var buyOrder BuyOrder
	found, err := x.table.PrimaryKey().Get(ctx, &buyOrder, buy_order_id)
	if !found {
		return nil, err
	}
	return &buyOrder, err
}
func (x buyOrderStore) List(ctx context.Context, prefixKey BuyOrderIndexKey, opts ...ormlist.Option) (BuyOrderIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return BuyOrderIterator{it}, err
}
func (x buyOrderStore) ListRange(ctx context.Context, from, to BuyOrderIndexKey, opts ...ormlist.Option) (BuyOrderIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return BuyOrderIterator{it}, err
}

var _ BuyOrderStore = buyOrderStore{}

type AskDenomStore interface {
	Insert(ctx context.Context, askDenom *AskDenom) error
	Update(ctx context.Context, askDenom *AskDenom) error
	Save(ctx context.Context, askDenom *AskDenom) error
	Delete(ctx context.Context, askDenom *AskDenom) error
	Has(ctx context.Context, denom string) (found bool, err error)
	Get(ctx context.Context, denom string) (*AskDenom, error)
	List(ctx context.Context, prefixKey AskDenomIndexKey, opts ...ormlist.Option) (AskDenomIterator, error)
	ListRange(ctx context.Context, from, to AskDenomIndexKey, opts ...ormlist.Option) (AskDenomIterator, error)
}

type AskDenomIterator struct {
	ormtable.Iterator
}

func (i AskDenomIterator) Value() (*AskDenom, error) {
	var askDenom AskDenom
	err := i.UnmarshalMessage(&askDenom)
	return &askDenom, err
}

type AskDenomIndexKey interface {
	id() uint32
	values() []interface{}
	askDenomIndexKey()
}

type AskDenomDenomIndexKey struct {
	vs []interface{}
}

func (x AskDenomDenomIndexKey) id() uint32            { return 3 /* primary key */ }
func (x AskDenomDenomIndexKey) values() []interface{} { return x.vs }
func (x AskDenomDenomIndexKey) askDenomIndexKey()     {}

var _ AskDenomIndexKey = AskDenomDenomIndexKey{}

func (x AskDenomDenomIndexKey) WithDenom(denom string) AskDenomDenomIndexKey {
	x.vs = []interface{}{denom}
	return x
}

type AskDenomDisplayDenomDenomIndexKey struct {
	vs []interface{}
}

func (x AskDenomDisplayDenomDenomIndexKey) id() uint32            { return 3 /* primary key */ }
func (x AskDenomDisplayDenomDenomIndexKey) values() []interface{} { return x.vs }
func (x AskDenomDisplayDenomDenomIndexKey) askDenomIndexKey()     {}

var _ AskDenomIndexKey = AskDenomDisplayDenomDenomIndexKey{}

func (x AskDenomDisplayDenomDenomIndexKey) WithDisplayDenom(display_denom string) AskDenomDisplayDenomDenomIndexKey {
	x.vs = []interface{}{display_denom}
	return x
}
func (x AskDenomDisplayDenomDenomIndexKey) WithDisplayDenomDenom(display_denom string, denom string) AskDenomDisplayDenomDenomIndexKey {
	x.vs = []interface{}{display_denom, denom}
	return x
}

type askDenomStore struct {
	table ormtable.Table
}

func (x askDenomStore) Insert(ctx context.Context, askDenom *AskDenom) error {
	return x.table.Insert(ctx, askDenom)
}
func (x askDenomStore) Update(ctx context.Context, askDenom *AskDenom) error {
	return x.table.Update(ctx, askDenom)
}
func (x askDenomStore) Save(ctx context.Context, askDenom *AskDenom) error {
	return x.table.Save(ctx, askDenom)
}
func (x askDenomStore) Delete(ctx context.Context, askDenom *AskDenom) error {
	return x.table.Delete(ctx, askDenom)
}
func (x askDenomStore) Has(ctx context.Context, denom string) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, denom)
}
func (x askDenomStore) Get(ctx context.Context, denom string) (*AskDenom, error) {
	var askDenom AskDenom
	found, err := x.table.PrimaryKey().Get(ctx, &askDenom, denom)
	if !found {
		return nil, err
	}
	return &askDenom, err
}
func (x askDenomStore) List(ctx context.Context, prefixKey AskDenomIndexKey, opts ...ormlist.Option) (AskDenomIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return AskDenomIterator{it}, err
}
func (x askDenomStore) ListRange(ctx context.Context, from, to AskDenomIndexKey, opts ...ormlist.Option) (AskDenomIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return AskDenomIterator{it}, err
}

var _ AskDenomStore = askDenomStore{}

type stateStore struct {
	sellOrder *sellOrderStore
	buyOrder  *buyOrderStore
	askDenom  *askDenomStore
}

func (x stateStore) SellOrder() SellOrderStore {
	return x.sellOrder
}
func (x stateStore) BuyOrder() BuyOrderStore {
	return x.buyOrder
}
func (x stateStore) AskDenom() AskDenomStore {
	return x.askDenom
}

var _ StateStore = stateStore{}
