// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package baskets

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
)

type StateStore interface {
	BasketBalance() BasketBalanceStore
}

type BasketBalanceStore interface {
	Insert(ctx context.Context, basketBalance *BasketBalance) error
	Update(ctx context.Context, basketBalance *BasketBalance) error
	Save(ctx context.Context, basketBalance *BasketBalance) error
	Delete(ctx context.Context, basketBalance *BasketBalance) error
	Has(ctx context.Context, basket_denom string, batch_id uint64) (found bool, err error)
	Get(ctx context.Context, basket_denom string, batch_id uint64) (*BasketBalance, error)
	List(ctx context.Context, prefixKey BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error)
	ListRange(ctx context.Context, from, to BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error)
}

type BasketBalanceIterator struct {
	ormtable.Iterator
}

func (i BasketBalanceIterator) Value() (*BasketBalance, error) {
	var basketBalance BasketBalance
	err := i.UnmarshalMessage(&basketBalance)
	return &basketBalance, err
}

type BasketBalanceIndexKey interface {
	id() uint32
	values() []interface{}
	basketBalanceIndexKey()
}

type BasketBalanceBasketDenomBatchIdIndexKey struct {
	vs []interface{}
}

func (x BasketBalanceBasketDenomBatchIdIndexKey) id() uint32             { return 1 /* primary key */ }
func (x BasketBalanceBasketDenomBatchIdIndexKey) values() []interface{}  { return x.vs }
func (x BasketBalanceBasketDenomBatchIdIndexKey) basketBalanceIndexKey() {}

var _ BasketBalanceIndexKey = BasketBalanceBasketDenomBatchIdIndexKey{}

func (x BasketBalanceBasketDenomBatchIdIndexKey) WithBasketDenom(basket_denom string) BasketBalanceBasketDenomBatchIdIndexKey {
	x.vs = []interface{}{basket_denom}
	return x
}
func (x BasketBalanceBasketDenomBatchIdIndexKey) WithBasketDenomBatchId(basket_denom string, batch_id uint64) BasketBalanceBasketDenomBatchIdIndexKey {
	x.vs = []interface{}{basket_denom, batch_id}
	return x
}

type basketBalanceStore struct {
	table ormtable.Table
}

func (x basketBalanceStore) Insert(ctx context.Context, basketBalance *BasketBalance) error {
	return x.table.Insert(ctx, basketBalance)
}
func (x basketBalanceStore) Update(ctx context.Context, basketBalance *BasketBalance) error {
	return x.table.Update(ctx, basketBalance)
}
func (x basketBalanceStore) Save(ctx context.Context, basketBalance *BasketBalance) error {
	return x.table.Save(ctx, basketBalance)
}
func (x basketBalanceStore) Delete(ctx context.Context, basketBalance *BasketBalance) error {
	return x.table.Delete(ctx, basketBalance)
}
func (x basketBalanceStore) Has(ctx context.Context, basket_denom string, batch_id uint64) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, basket_denom, batch_id)
}
func (x basketBalanceStore) Get(ctx context.Context, basket_denom string, batch_id uint64) (*BasketBalance, error) {
	var basketBalance BasketBalance
	found, err := x.table.PrimaryKey().Get(ctx, &basketBalance, basket_denom, batch_id)
	if !found {
		return nil, err
	}
	return &basketBalance, err
}
func (x basketBalanceStore) List(ctx context.Context, prefixKey BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return BasketBalanceIterator{it}, err
}
func (x basketBalanceStore) ListRange(ctx context.Context, from, to BasketBalanceIndexKey, opts ...ormlist.Option) (BasketBalanceIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return BasketBalanceIterator{it}, err
}

var _ BasketBalanceStore = basketBalanceStore{}

type stateStore struct {
	basketBalance *basketBalanceStore
}

func (x stateStore) BasketBalance() BasketBalanceStore {
	return x.basketBalance
}

var _ StateStore = stateStore{}
