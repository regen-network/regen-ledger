syntax = "proto3";
package regen.bond.v1alpha1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/regen-network/regen-ledger/x/bond";

// Msg defines the Msg service.
service Msg {

  // IssueBond issues a new bond
  rpc IssueBond(MsgIssueBond) returns (MsgIssueBondResponse);

  // SellBond sells a bond to a new owner
  rpc SellBond(MsgSellBond) returns (MsgSellBondResponse);
}

// MsgIssueBond is the Msg/IssueBond request type.
message MsgIssueBond {

  // emission_denom is the unique id of emission
  string emission_denom = 1;

  // bond name
  string name = 2;

  // account address of current bond holder
  string holder = 3;

  // face value
  string face_value = 4;

  // currency of the face value
  string face_currency = 5;

  // date of issuance
  google.protobuf.Timestamp issuance_date = 6 [(gogoproto.stdtime) = true];

  // date of maturity
  google.protobuf.Timestamp maturity_date = 7 [(gogoproto.stdtime) = true];

  // coupon rate is the APY of the bond
  double coupon_rate = 8;

  // coupon frequency
  string coupon_frequency = 9;

  // project code
  string project = 10;

  // metadata
  bytes metadata = 11;
}

// MsgIssueBondResponse is the Msg/IssueBond response type.
message MsgIssueBondResponse {

  // id is the unique id of the bond
  string id = 1;
}

// MsgIssueBond is the Msg/IssueBond request type.
message MsgSellBond {

  // id is the unique id of the bond to sell
  string id = 1;

  // buyer of the bond
  string buyer = 2;

  // amount of bond to sell
  string amount = 3;

  // holder of the bond
  string holder = 4;
}

// MsgSellBondResponse is the Msg/MsgSellBond response type.
message MsgSellBondResponse {

  // id is the unique id of the newly created bond
  repeated string id = 1;
}
