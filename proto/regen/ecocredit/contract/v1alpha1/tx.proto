syntax = "proto3";

package regen.ecocredit.contract.v1alpha1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// Msg is the regen.ecocredit.contract.v1alpha1 Msg service.
service Msg {

  // Create creates a new forward contract. A new contract starts with status
  // "proposed" and only the class admin can approve the contract.
  rpc Create(MsgCreate) returns (MsgCreateResponse);

  // Update updates a proposed forward contract. A contract can only be updated
  // by the project admin before the contract is approved.
  rpc Update(MsgUpdate) returns (MsgUpdateResponse);

  // Cancel cancels a forward contract. A contract can only be cancelled by the
  // project admin before the contract is approved.
  rpc Cancel(MsgCancel) returns (MsgCancelResponse);

  // Approve approves a proposed forward contract, changing the status of the
  // contract to "approved" and preventing any further changes. Only an approved
  // credit class issuer can approve the contract.
  rpc Approve(MsgApprove) returns (MsgApproveResponse);

  // Reserve sends credits to the contract reserve. Only credits from the same
  // credit class can be sent to the reserve and once the credits are sent to
  // the reserve, the credits are held in escrow until the end of the contract.
  rpc Reserve(MsgReserve) returns (MsgReserveResponse);

  // Invest sends funds to a project in return for a share of the contract
  // and therefore ownership of future credits issued from the project.
  rpc Invest(MsgInvest) returns (MsgInvestResponse);
}

// MsgCreate is the Msg/Create request type.
message MsgCreate {
  option (cosmos.msg.v1.signer) = "project_admin";

  // project_id is the unique identifier of the project.
  string project_id = 1;

  // project_admin is the admin of the project.
  string project_admin = 2;

  // metadata is any arbitrary string that includes or references additional
  // information about the contract such as calculations made to determine
  // the volume of credits and the price per credit.
  string metadata = 3;

  // price is the token denomination and amount the project is asking for
  // per credit.
  cosmos.base.v1beta1.Coin price = 4;

  // amount is the amount of future credits issued that will be available to
  // purchase. The amount is a decimal value with a precision determined by
  // the credit type of the credit class.
  string amount = 5;

  // volume_percentage is the percentage of future credits issued that will be
  // available to purchase. The percentage is used to determine the amount of
  // credits issued to investors with each credit issuance.
  string volume_percentage = 6;

  // start_date is the contract start date.
  google.protobuf.Timestamp start_date = 7 [ (gogoproto.stdtime) = true ];

  // end_date is the contract end date.
  google.protobuf.Timestamp end_date = 8 [ (gogoproto.stdtime) = true ];

  // buffer_window is the duration after the end date in which credits may
  // still be issued with a monitoring period that falls within the start
  // and end date of the contract. The credits held in the reserve pool are
  // not distributed or returned until end date + buffer window.
  google.protobuf.Duration buffer_window = 9;
}

// MsgCreateResponse is the Msg/Create response type.
message MsgCreateResponse {

  // id is the unique identifier of the created contract.
  uint64 id = 1;
}

// MsgUpdate is the Msg/Update request type.
message MsgUpdate {
  option (cosmos.msg.v1.signer) = "project_admin";

  // id is the unique identifier of the contract.
  uint64 id = 1;

  // project_admin is the admin of the project.
  string project_admin = 2;

  // metadata is any arbitrary string that includes or references additional
  // information about the contract such as calculations made to determine
  // the volume of credits and the price per credit.
  string metadata = 3;

  // price is the token denomination and amount the project is asking for
  // per credit.
  cosmos.base.v1beta1.Coin price = 4;

  // amount is the amount of future credits issued that will be available to
  // purchase. The amount is a decimal value with a precision determined by
  // the credit type of the credit class.
  string amount = 5;

  // volume_percentage is the percentage of future credits issued that will be
  // available to purchase. The percentage is used to determine the amount of
  // credits to be issued to investors with each credit issuance.
  string volume_percentage = 6;

  // start_date is the contract start date.
  google.protobuf.Timestamp start_date = 7 [ (gogoproto.stdtime) = true ];

  // end_date is the contract end date.
  google.protobuf.Timestamp end_date = 8 [ (gogoproto.stdtime) = true ];

  // buffer_window is the duration after the end date in which credits may
  // still be issued with a monitoring period that falls within the start
  // and end date of the contract. The credits held in the reserve pool are
  // not distributed or returned until end date + buffer window.
  google.protobuf.Duration buffer_window = 9;
}

// MsgUpdateResponse is the Msg/Update response type.
message MsgUpdateResponse {}

// MsgCancel is the Msg/Cancel request type.
message MsgCancel {
  option (cosmos.msg.v1.signer) = "project_admin";

  // id is the unique identifier of the contract.
  uint64 id = 1;

  // project_admin is the admin of the project.
  string project_admin = 2;
}

// MsgCancelResponse is the Msg/Cancel response type.
message MsgCancelResponse {}

// MsgApprove is the Msg/Approve request type.
message MsgApprove {
  option (cosmos.msg.v1.signer) = "class_issuer";

  // id is the unique identifier of the contract.
  uint64 id = 1;

  // class_issuer is the address of the credit class issuer that is approving
  // the contract on behalf of the credit class.
  string class_issuer = 2;
}

// MsgApproveResponse is the Msg/Approve response type.
message MsgApproveResponse {}

// MsgReserve is the Msg/Reserve request type.
message MsgReserve {
  option (cosmos.msg.v1.signer) = "issuer";

  // contract_id is the unique identifier of the contract.
  uint64 contract_id = 1;

  // issuer is the address of the issuer that approved the contract. Only the
  // issuer in the contract can send credits to the contract reserve.
  string issuer = 2;

  // batch_denom is the batch denom of the credits being sent.
  string batch_denom = 3;

  // tradable_amount is the amount of tradable credits being sent.
  string tradable_amount = 4;
}

// MsgReserveResponse is the Msg/Reserve response type.
message MsgReserveResponse {}

// MsgInvest is the Msg/Invest request type.
message MsgInvest {
  option (cosmos.msg.v1.signer) = "investor";

  // id is the unique identifier of the contract.
  uint64 id = 1;

  // investor is the address of the account funding the project and receiving a
  // percentage of future credits issued from the project.
  string investor = 2;

  // amount is the total amount of future credits issued that the investor is
  // purchasing and will receive over time with each credit issuance based on
  // the volume percentage defined within the contract.
  string amount = 3;

  // auto_retire determines whether the credits will be automatically retied
  // upon issuance (i.e. the issuance policy will be set to auto-retire).
  bool auto_retire = 4;

  // retirement_jurisdiction is the jurisdiction of the investor. A jurisdiction
  // is only required if auto-retire is enabled.
  string retirement_jurisdiction = 5;
}

// MsgInvestResponse is the Msg/Invest response type.
message MsgInvestResponse {}
