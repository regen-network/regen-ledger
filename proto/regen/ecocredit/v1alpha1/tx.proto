syntax = "proto3";

package regen.ecocredit.v1alpha1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit";

// Msg is the regen.ecocredit.v1alpha1 Msg service.
service Msg {

  // CreateClass creates a new credit class with an approved list of issuers and
  // optional metadata.
  rpc CreateClass(MsgCreateClass) returns (MsgCreateClassResponse);

  // CreateBatch creates a new batch of credits for an existing credit class.
  // This will create a new batch denom with a fixed supply. Issued credits can
  // be distributed to recipients in either tradable or retired form.
  rpc CreateBatch(MsgCreateBatch) returns (MsgCreateBatchResponse);

  // Send sends tradable credits from one account to another account. Sent
  // credits can either be tradable or retired on receipt.
  rpc Send(MsgSend) returns (MsgSendResponse);

  // Retire retires a specified number of credits in the holder's account.
  rpc Retire(MsgRetire) returns (MsgRetireResponse);

  // Cancel removes a number of credits from the holder's account and also
  // deducts them from the tradable supply, effectively cancelling their
  // issuance on Regen Ledger
  rpc Cancel(MsgCancel) returns (MsgCancelResponse);

  // UpdateClassAdmin updates the credit class admin
  rpc UpdateClassAdmin(MsgUpdateClassAdmin) returns (MsgUpdateClassAdminResponse);

  // UpdateClassIssuers updates the credit class issuer list
  rpc UpdateClassIssuers(MsgUpdateClassIssuers) returns (MsgUpdateClassIssuersResponse);

  // UpdateClassMetadata updates the credit class metadata
  rpc UpdateClassMetadata(MsgUpdateClassMetadata) returns (MsgUpdateClassMetadataResponse);

  // Sell creates new sell orders.
  rpc Sell(MsgSell) returns (MsgSellResponse);

  // UpdateSellOrders updates existing sell orders.
  rpc UpdateSellOrders(MsgUpdateSellOrders) returns (MsgUpdateSellOrdersResponse);

  // Buy creates credit buy orders.
  rpc Buy (MsgBuy) returns (MsgBuyResponse);

  // AllowAskDenom is a governance operation which authorizes a new ask denom to be used in sell orders
  rpc AllowAskDenom (MsgAllowAskDenom) returns (MsgAllowAskDenomResponse);
}

// MsgCreateClass is the Msg/CreateClass request type.
message MsgCreateClass {

  // admin is the address of the account that created the credit class.
  string admin = 1;

  // issuers are the account addresses of the approved issuers.
  repeated string issuers = 2;

  // metadata is any arbitrary metadata to attached to the credit class.
  bytes metadata = 3;

  // credit_type_name describes the type of credit (e.g. "carbon", "biodiversity").
  string credit_type_name = 4;
}

// MsgCreateClassResponse is the Msg/CreateClass response type.
message MsgCreateClassResponse {

  // class_id is the unique ID of the newly created credit class.
  string class_id = 1;
}

// MsgCreateBatch is the Msg/CreateBatch request type.
message MsgCreateBatch {

  // issuer is the address of the batch issuer.
  string issuer = 1;

  // class_id is the unique ID of the class.
  string class_id = 2;

  // issuance are the credits issued in the batch.
  repeated BatchIssuance issuance = 3;

  // metadata is any arbitrary metadata attached to the credit batch.
  bytes metadata = 4;

  // start_date is the beginning of the period during which this credit batch
  // was quantified and verified.
  google.protobuf.Timestamp start_date = 5 [ (gogoproto.stdtime) = true ];

  // end_date is the end of the period during which this credit batch was
  // quantified and verified.
  google.protobuf.Timestamp end_date = 6 [ (gogoproto.stdtime) = true ];

  // project_location is the location of the project backing the credits in this
  // batch. It is a string of the form
  // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  // fields conforming to ISO 3166-2, and postal-code being up to 64
  // alphanumeric characters. country-code is required, while sub-national-code
  // and postal-code can be added for increasing precision.
  string project_location = 7;

  // BatchIssuance represents the issuance of some credits in a batch to a
  // single recipient.
  message BatchIssuance {

    // recipient is the account of the recipient.
    string recipient = 1;

    // tradable_amount is the number of credits in this issuance that can be
    // traded by this recipient. Decimal values are acceptable.
    string tradable_amount = 2;

    // retired_amount is the number of credits in this issuance that are
    // effectively retired by the issuer on receipt. Decimal values are
    // acceptable.
    string retired_amount = 3;

    // retirement_location is the location of the beneficiary or buyer of the
    // retired credits. This must be provided if retired_amount is positive. It
    // is a string of the form
    // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
    // fields conforming to ISO 3166-2, and postal-code being up to 64
    // alphanumeric characters.
    string retirement_location = 4;
  }
}

// MsgCreateBatchResponse is the Msg/CreateBatch response type.
message MsgCreateBatchResponse {

  // batch_denom is the unique denomination ID of the newly created batch.
  string batch_denom = 1;
}

// MsgSend is the Msg/Send request type.
message MsgSend {

  // sender is the address of the account sending credits.
  string sender = 1;

  // sender is the address of the account receiving credits.
  string recipient = 2;

  // credits are the credits being sent.
  repeated SendCredits credits = 3;

  // SendCredits specifies a batch and the number of credits being transferred.
  // This is split into tradable credits, which will remain tradable on receipt,
  // and retired credits, which will be retired on receipt.
  message SendCredits {

    // batch_denom is the unique ID of the credit batch.
    string batch_denom = 1;

    // tradable_amount is the number of credits in this transfer that can be
    // traded by the recipient. Decimal values are acceptable within the
    // precision returned by Query/Precision.
    string tradable_amount = 2;

    // retired_amount is the number of credits in this transfer that are
    // effectively retired by the issuer on receipt. Decimal values are
    // acceptable within the precision returned by Query/Precision.
    string retired_amount = 3;

    // retirement_location is the location of the beneficiary or buyer of the
    // retired credits. This must be provided if retired_amount is positive. It
    // is a string of the form
    // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
    // fields conforming to ISO 3166-2, and postal-code being up to 64
    // alphanumeric characters.
    string retirement_location = 4;
  }
}

// MsgSendResponse is the Msg/Send response type.
message MsgSendResponse {}

// MsgRetire is the Msg/Retire request type.
message MsgRetire {

  // holder is the credit holder address.
  string holder = 1;

  // credits are the credits being retired.
  repeated RetireCredits credits = 2;

  // RetireCredits specifies a batch and the number of credits being retired.
  message RetireCredits {

    // batch_denom is the unique ID of the credit batch.
    string batch_denom = 1;

    // amount is the number of credits being retired.
    // Decimal values are acceptable within the precision returned by
    // Query/Precision.
    string amount = 2;
  }

  // location is the location of the beneficiary or buyer of the retired
  // credits. It is a string of the form
  // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  // fields conforming to ISO 3166-2, and postal-code being up to 64
  // alphanumeric characters.
  string location = 3;
}

// MsgRetire is the Msg/Retire response type.
message MsgRetireResponse {}

// MsgCancel is the Msg/Cancel request type.
message MsgCancel {

  // holder is the credit holder address.
  string holder = 1;

  // credits are the credits being cancelled.
  repeated CancelCredits credits = 2;

  // CancelCredits specifies a batch and the number of credits being cancelled.
  message CancelCredits {

    // batch_denom is the unique ID of the credit batch.
    string batch_denom = 1;

    // amount is the number of credits being cancelled.
    // Decimal values are acceptable within the precision returned by
    // Query/Precision.
    string amount = 2;
  }
}

// MsgCancelResponse is the Msg/Cancel response type.
message MsgCancelResponse {}

// MsgUpdateClassAdmin is the Msg/UpdateClassAdmin request type.
message MsgUpdateClassAdmin {

  // admin is the address of the account that is the admin of the credit class.
  string admin = 1;

  // class_id is the unique ID of the credit class.
  string class_id = 2;

  // new_admin is the address of the new admin of the credit class.
  string new_admin = 3;
}

// MsgUpdateClassAdminResponse is the MsgUpdateClassAdmin response type.
message MsgUpdateClassAdminResponse {}

// MsgUpdateClassIssuers is the Msg/UpdateClassIssuers request type.
message MsgUpdateClassIssuers {

  // admin is the address of the account that is the admin of the credit class.
  string admin = 1;

  // class_id is the unique ID of the credit class.
  string class_id = 2;

  // issuers are the updated account addresses of the approved issuers.
  repeated string issuers = 3;
}

// MsgUpdateClassIssuersResponse is the MsgUpdateClassIssuers response type.
message MsgUpdateClassIssuersResponse {}

// MsgUpdateClassMetadata is the Msg/UpdateClassMetadata request type.
message MsgUpdateClassMetadata {

  // admin is the address of the account that is the admin of the credit class.
  string admin = 1;

  // class_id is the unique ID of the credit class.
  string class_id = 2;

  // metadata is the updated arbitrary metadata to be attached to the credit class.
  bytes metadata = 3;
}

// MsgUpdateClassMetadataResponse is the MsgUpdateClassMetadata response type.
message MsgUpdateClassMetadataResponse {}

// MsgSell is the Msg/Sell request type.
message MsgSell {

  // owner is the address of the owner of the credits being sold.
  string owner = 1;

  // orders are the sell orders being created.
  repeated Order orders = 2;

  // Order is the content of a new sell order.
  message Order {

    // batch_denom is the credit batch being sold.
    string batch_denom = 1;

    // quantity is the quantity of credits being sold from this batch. If it is
    // less then the balance of credits the owner has available at the time this
    // sell order is matched, the quantity will be adjusted downwards to the
    // owner's balance. However, if the balance of credits is less than this
    // quantity at the time the sell order is created, the operation will fail.
    string quantity = 2;

    // ask_price is the price the seller is asking for each unit of the
    // batch_denom. Each credit unit of the batch will be sold for at least the
    // ask_price or more.
    cosmos.base.v1beta1.Coin ask_price = 3;

    // disable_auto_retire disables auto-retirement of credits which allows a
    // buyer to disable auto-retirement in their buy order enabling them to
    // resell the credits to another buyer.
    bool disable_auto_retire = 4;
  }
}

// MsgSellResponse is the Msg/Sell response type.
message MsgSellResponse {

  // sell_order_ids are the sell order IDs of the newly created sell orders.
  repeated uint64 sell_order_ids = 1;
}

// MsgUpdateSellOrders is the Msg/UpdateSellOrders request type.
message MsgUpdateSellOrders {

  // owner is the owner of the sell orders.
  string owner = 1;

  // updates are updates to existing sell orders.
  repeated Update updates = 2;

  // Update is an update to an existing sell order.
  message Update {

    //  sell_order_id is the ID of an existing sell order.
    uint64 sell_order_id = 1;

    // new_quantity is the updated quantity of credits available to sell, if it
    // is set to zero then the order is cancelled.
    string new_quantity = 2;

    // new_ask_price is the new ask price for this sell order
    cosmos.base.v1beta1.Coin new_ask_price = 3;

    // disable_auto_retire updates the disable_auto_retire field in the sell order.
    bool disable_auto_retire = 4;
  }
}

// MsgUpdateSellOrdersResponse is the Msg/UpdateSellOrders response type.
message MsgUpdateSellOrdersResponse {}

// MsgBuy is the Msg/Buy request type.
message MsgBuy {

  // buyer is the address of the credit buyer.
  string buyer = 1;

  // orders are the new buy orders.
  repeated Order orders = 2;

  // Order is a buy order.
  message Order {

    // Selection defines a buy order selection.
    message Selection {

      // sum defines the type of selection.
      oneof sum {
        // sell_order_id is the sell order ID against which the buyer is trying to buy.
        // When sell_order_id is set, this is known as a direct buy order because it
        // is placed directly against a specific sell order.
        uint64 sell_order_id = 1;

        // TODO: once we have filters defined for baskets, we can enable filtered
        // buy orders which will involve full double-sided batch order matching
        //
        // filter selects credits to buy based upon the specified filter criteria.
        // Filter filter = 2;
      }
    }

    // selection is the buy order selection.
    Selection selection = 1;

    // quantity is the quantity of credits to buy. If the quantity of credits
    // available is less than this amount the order will be partially filled
    // unless disable_partial_fill is true.
    string quantity = 2;

    // bid price is the bid price for this buy order. A credit unit will be
    // settled at a purchase price that is no more than the bid price. The
    // buy order will fail if the buyer does not have enough funds available
    // to complete the purchase.
    cosmos.base.v1beta1.Coin bid_price = 3;

    // disable_auto_retire allows auto-retirement to be disabled. If it is set to true
    // the credits will not auto-retire and can be resold assuming that the
    // corresponding sell order has auto-retirement disabled. If the sell order
    // hasn't disabled auto-retirement and the buy order tries to disable it,
    // that buy order will fail.
    bool disable_auto_retire = 4;

    // disable_partial_fill disables the default behavior of partially filling
    // buy orders if the requested quantity is not available.
    bool disable_partial_fill = 5;
  }
}

// MsgBuyResponse is the Msg/Buy response type.
message MsgBuyResponse {

  // buy_order_ids are the buy order IDs of the newly created buy orders. Buy
  // orders may not settle instantaneously, but rather in batches at specified
  // batch epoch times.
  repeated uint64 buy_order_ids = 1;
}


// MsgAllowAskDenom is the Msg/AllowAskDenom request type.
message MsgAllowAskDenom {
  // root_address is the address of the governance account which can authorize ask denoms
  string root_address = 1;

  // denom is the denom to allow (ex. ibc/GLKHDSG423SGS)
  string denom = 2;

  // display_denom is the denom to display to the user and is informational
  string display_denom = 3;

  // exponent is the exponent that relates the denom to the display_denom and is
  // informational
  uint32 exponent = 4;
}

// MsgAllowAskDenomResponse is the Msg/AllowAskDenom response type.
message MsgAllowAskDenomResponse {}
