syntax = "proto3";

package regen.ecocredit.v1alpha1;
import "google/api/annotations.proto";
import "regen/ecocredit/v1alpha1/types.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit";

// Msg is the regen.ecocredit.v1alpha1 Query service.
service Query {
  // Classes queries for all credit classes with pagination.
  rpc Classes(QueryClassesRequest) returns (QueryClassesResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/classes";
  }

  // ClassInfo queries for information on a credit class.
  rpc ClassInfo(QueryClassInfoRequest) returns (QueryClassInfoResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/classes/{class_id}";
  }

  // Batches queries for all batches in the given credit class with pagination.
  rpc Batches(QueryBatchesRequest) returns (QueryBatchesResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/classes/{class_id}/batches";
  }

  // BatchInfo queries for information on a credit batch.
  rpc BatchInfo(QueryBatchInfoRequest) returns (QueryBatchInfoResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batches/{batch_denom}";
  }

  // Balance queries the balance (both tradable and retired) of a given credit
  // batch for a given account.
  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batches/{batch_denom}/balance/{account}";
  }

  // Supply queries the tradable and retired supply of a credit batch.
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batches/{batch_denom}/supply";
  }

  // CreditTypes returns the list of allowed types that credit classes can have.
  // See Types/CreditType for more details.
  rpc CreditTypes(QueryCreditTypesRequest) returns (QueryCreditTypesResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/credit-types";
  }

  // Params queries the ecocredit module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/params";
  }

  // Basket queries one basket by denom.
  rpc Basket(QueryBasketRequest) returns (QueryBasketResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/baskets/{denom}";
  }

  // Baskets lists all baskets in the ecocredit module.
  rpc Baskets(QueryBasketsRequest) returns (QueryBasketsResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/baskets";
  }

  // BasketCredits lists all ecocredits inside a given basket.
  rpc BasketCredits(QueryBasketCreditsRequest) returns (QueryBasketCreditsResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/baskets/{denom}/credits";
  }
}

// QueryParamsRequest is the Query/Params request type.
message QueryParamsRequest {}

// QueryParamsResponse is the Query/Params response type.
message QueryParamsResponse {
  // params defines the parameters of the ecocredit module.
  Params params = 1;
}

// QueryClassesRequest is the Query/Classes request type.
message QueryClassesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryClassesResponse is the Query/Classes response type.
message QueryClassesResponse {
  // classes are the fetched credit classes.
  repeated ClassInfo classes = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryClassInfoRequest is the Query/ClassInfo request type.
message QueryClassInfoRequest {

  // class_id is the unique ID of credit class to query.
  string class_id = 1;
}

// QueryClassInfoResponse is the Query/ClassInfo request type.
message QueryClassInfoResponse {

  // info is the ClassInfo for the credit class.
  ClassInfo info = 1;
}

// QueryBatchesRequest is the Query/Batches request type.
message QueryBatchesRequest {
  // class_id is the unique ID of the credit class to query.
  string class_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBatchesResponse is the Query/Batches response type.
message QueryBatchesResponse {
  // batches are the fetched credit batches within the class.
  repeated BatchInfo batches = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBatchInfoRequest is the Query/BatchInfo request type.
message QueryBatchInfoRequest {

  // batch_denom is the unique ID of credit batch to query.
  string batch_denom = 1;
}

// QueryBatchInfoResponse is the Query/BatchInfo response type.
message QueryBatchInfoResponse {

  // info is the BatchInfo for the credit batch.
  BatchInfo info = 1;
}

// QueryBalanceRequest is the Query/Balance request type.
message QueryBalanceRequest {

  // account is the address of the account whose balance is being queried.
  string account = 1;

  // batch_denom is the unique ID of credit batch balance to query.
  string batch_denom = 2;
}

// QueryBalanceResponse is the Query/Balance response type.
message QueryBalanceResponse {

  // tradable_amount is the decimal number of tradable credits.
  string tradable_amount = 1;

  // retired_amount is the decimal number of retired credits.
  string retired_amount = 2;
}

// QuerySupplyRequest is the Query/Supply request type.
message QuerySupplyRequest {

  // batch_denom is the unique ID of credit batch to query.
  string batch_denom = 1;
}

// QuerySupplyResponse is the Query/Supply response type.
message QuerySupplyResponse {

  // tradable_supply is the decimal number of tradable credits in the batch
  // supply.
  string tradable_supply = 1;

  // retired_supply is the decimal number of retired credits in the batch
  // supply.
  string retired_supply = 2;
}

// QueryCreditTypesRequest is the Query/Credit_Types request type
message QueryCreditTypesRequest {}

// QueryCreditTypesRequest is the Query/Credit_Types response type
message QueryCreditTypesResponse {
  // list of credit types
  repeated CreditType credit_types = 1;
}

message QueryBasketRequest {
  // basket_denom represents the denom of the basket to query. 
  string basket_denom = 1;
}

message QueryBasketResponse {
  // basket is the queried basket.
  Basket basket = 1;
}

message QueryBasketsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryBasketsResponse {
  // baskets are the fetched baskets.
  repeated Basket baskets = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBasketCreditsRequest {
  // basket_denom is the basket denom to query credits for.
  string basket_denom = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryBasketCreditsResponse {
  // credits are the credits inside the basket.
  repeated BasketCredit credits = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBasketRequest {
  // denom represents the denom of the basket to query. 
  string denom = 1;
}

// Basket defines a credit basket.
message Basket {
  // curator is the address of the basket curator who is able to change certain
  // basket settings.
  string curator = 1;

  // name will be used to create a bank denom for this basket token of the form
  // ecocredit:{curator}:{name}.
  string name = 2;

  // display_name will be used to create a bank Metadata display name for this
  // basket token of the form ecocredit:{curator}:{display_name}.
  string display_name = 3;

  // exponent is the exponent that will be used for denom metadata. An exponent
  // of 6 will mean that 10^6 units of a basket token should be displayed
  // as one unit in user interfaces.
  uint32 exponent = 4;

  // basket_criteria is the criteria by which credits can be added to the
  // basket. Basket criteria will be applied in order and the first criteria
  // which applies to a credit will determine its multiplier in the basket.
  repeated BasketCriteria basket_criteria = 5;

  bool retire_on_take = 6;

  bool allow_picking = 7;
}
