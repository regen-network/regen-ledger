syntax = "proto3";

package regen.ecocredit.v1alpha1;
import "google/api/annotations.proto";
import "regen/ecocredit/v1alpha1/types.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit";

// Msg is the regen.ecocredit.v1alpha1 Query service.
service Query {
  // Classes queries for all credit classes with pagination.
  rpc Classes(QueryClassesRequest) returns (QueryClassesResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/class";
  }

  // ClassInfo queries for information on a credit class.
  rpc ClassInfo(QueryClassInfoRequest) returns (QueryClassInfoResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/class/{class_id}";
  }

  // Batches queries for all batches in the given credit class with pagination.
  rpc Batches(QueryBatchesRequest) returns (QueryBatchesResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batch";
  }

  // BatchInfo queries for information on a credit batch.
  rpc BatchInfo(QueryBatchInfoRequest) returns (QueryBatchInfoResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batch/{batch_denom}";
  }

  // Balance queries the balance (both tradable and retired) of a given credit
  // batch for a given account.
  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batch/{batch_denom}/balance/{account}";
  }

  // Supply queries the tradable and retired supply of a credit batch.
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batch/{batch_denom}/supply";
  }

  // Precision queries the number of decimal places that can be used to
  // represent credits in a batch. See Tx/SetPrecision for more details.
  rpc Precision(QueryPrecisionRequest) returns (QueryPrecisionResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/batch/{batch_denom}/precision";
  }
}

// QueryClassesRequest is the Query/Classes request type.
message QueryClassesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryClassesResponse is the Query/Classes response type.
message QueryClassesResponse {
  // classes are the IDs of existing credit classes.
  repeated string classes = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryClassInfoRequest is the Query/ClassInfo request type.
message QueryClassInfoRequest {

  // class_id is the unique ID of credit class to query.
  string class_id = 1 [ (gogoproto.moretags) = "yaml:\"class_id\"" ];
}

// QueryClassInfoResponse is the Query/ClassInfo request type.
message QueryClassInfoResponse {

  // info is the ClassInfo for the credit class.
  ClassInfo info = 1;
}

// QueryBatchesRequest is the Query/Batches request type.
message QueryBatchesRequest {
  // class_id is the unique ID of the credit class to query.
  string class_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBatchesResponse is the Query/Batches response type.
message QueryBatchesResponse {
  // batches are the denominations of existing credit batches within the class.
  repeated string batches = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBatchInfoRequest is the Query/BatchInfo request type.
message QueryBatchInfoRequest {

  // batch_denom is the unique ID of credit batch to query.
  string batch_denom = 1 [ (gogoproto.moretags) = "yaml:\"batch_denom\"" ];
}

// QueryBatchInfoResponse is the Query/BatchInfo response type.
message QueryBatchInfoResponse {

  // info is the BatchInfo for the credit batch.
  BatchInfo info = 1;
}

// QueryBalanceRequest is the Query/Balance request type.
message QueryBalanceRequest {

  // account is the address of the account whose balance is being queried.
  string account = 1;

  // batch_denom is the unique ID of credit batch balance to query.
  string batch_denom = 2 [ (gogoproto.moretags) = "yaml:\"batch_denom\"" ];
}

// QueryBalanceResponse is the Query/Balance response type.
message QueryBalanceResponse {

  // tradable_amount is the decimal number of tradable credits.
  string tradable_amount = 1
      [ (gogoproto.moretags) = "yaml:\"tradable_amount\"" ];

  // retired_amount is the decimal number of retired credits.
  string retired_amount = 2
      [ (gogoproto.moretags) = "yaml:\"retired_amount\"" ];
}

// QuerySupplyRequest is the Query/Supply request type.
message QuerySupplyRequest {

  // batch_denom is the unique ID of credit batch to query.
  string batch_denom = 1 [ (gogoproto.moretags) = "yaml:\"batch_denom\"" ];
}

// QuerySupplyResponse is the Query/Supply response type.
message QuerySupplyResponse {

  // tradable_supply is the decimal number of tradable credits in the batch
  // supply.
  string tradable_supply = 1
      [ (gogoproto.moretags) = "yaml:\"tradable_supply\"" ];

  // retired_supply is the decimal number of retired credits in the batch
  // supply.
  string retired_supply = 2
      [ (gogoproto.moretags) = "yaml:\"retired_supply\"" ];
}

// QueryPrecisionRequest is the Query/Precision request type.
message QueryPrecisionRequest {

  // batch_denom is the unique ID of credit batch to query.
  string batch_denom = 1 [ (gogoproto.moretags) = "yaml:\"batch_denom\"" ];
}

// QueryPrecisionResponse is the Query/Precision response type.
message QueryPrecisionResponse {

  // max_decimal_places is the maximum number of decimal places that can be used
  // to represent some quantity of credits. It is an experimental feature
  // to concretely explore an idea proposed in
  // https://github.com/cosmos/cosmos-sdk/issues/7113.
  uint32 max_decimal_places = 1
      [ (gogoproto.moretags) = "yaml:\"max_decimal_places\"" ];
}
