syntax = "proto3";

package regen.ecocredit.v1alpha2;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit";

// EventCreateClass is an event emitted when a credit class is created.
message EventCreateClass {

  // class_id is the unique ID of credit class.
  string class_id = 1;

  // admin is the admin of the credit class.
  string admin = 2;
}

// EventCreateProject is an event emitted when a project is created.
message EventCreateProject {

  // project_id is the unique ID of the project.
  string project_id = 1;

  // class_id is the unique ID of credit class for this project.
  string class_id = 2;

  // issuer is the issuer of the credit batches for this project.
  string issuer = 3;

  // project_location is the location of the project.
  // Full documentation can be found in MsgCreateProject.project_location.
  string project_location = 4;
}

// EventCreateBatch is an event emitted when a credit batch is created.
message EventCreateBatch {

  // class_id is the unique ID of credit class.
  string class_id = 1;

  // batch_denom is the unique ID of credit batch.
  string batch_denom = 2;

  // issuer is the account address of the issuer of the credit batch.
  string issuer = 3;

  // total_amount is the total number of credits in the credit batch.
  string total_amount = 4;

  // start_date is the beginning of the period during which this credit batch
  // was quantified and verified.
  string start_date = 5;

  // end_date is the end of the period during which this credit batch was
  // quantified and verified.
  string end_date = 6;

  // project_location is the location of the project backing the credits in this
  // batch. Full documentation can be found in MsgCreateBatch.project_location.
  string project_location = 7;

  // project_id is the unique ID of the project this batch belongs to.
  string project_id = 8;
}

// EventReceive is an event emitted when credits are received either via
// creation of a new batch, transfer of credits, or taking credits from a
// basket. Each batch_denom created, transferred or taken from a basket will
// result in a separate EventReceive for easy indexing.
message EventReceive {
  // sender is the sender of the credits in the case that this event is the
  // result of a transfer. It will not be set when credits are received at
  // initial issuance or taken from a basket.
  string sender = 1;

  // recipient is the recipient of the credits.
  string recipient = 2;

  // batch_denom is the unique ID of credit batch.
  string batch_denom = 3;

  // tradable_amount is the decimal number of tradable credits received.
  string tradable_amount = 4;

  // retired_amount is the decimal number of retired credits received.
  string retired_amount = 5;

  // basket_denom is the denom of the basket. When the basket_denom field is
  // set, it indicates that this event was triggered by the transfer of credits
  // from a basket. It will not be set if the credits were transferred or
  // received at initial issuance.
  string basket_denom = 6;
}

// EventRetire is an event emitted when credits are retired. When credits are
// retired from multiple batches in the same transaction, a separate event is
// emitted for each batch_denom. This allows for easier indexing.
message EventRetire {

  // retirer is the account which has done the "retiring". This will be the
  // account receiving credits in the case that credits were retired upon
  // issuance using Msg/CreateBatch or retired upon transfer using Msg/Send.
  string retirer = 1;

  // batch_denom is the unique ID of credit batch.
  string batch_denom = 2;

  // amount is the decimal number of credits that have been retired.
  string amount = 3;

  // location is the location of the beneficiary or buyer of the retired
  // credits. It is a string of the form
  // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  // fields conforming to ISO 3166-2, and postal-code being up to 64
  // alphanumeric characters.
  string location = 4;
}

// EventCancel is an event emitted when credits are cancelled. When credits are
// cancelled from multiple batches in the same transaction, a separate event is
// emitted for each batch_denom. This allows for easier indexing.
message EventCancel {

  // canceller is the account which has cancelled the credits, which should be
  // the holder of the credits.
  string canceller = 1;

  // batch_denom is the unique ID of credit batch.
  string batch_denom = 2;

  // amount is the decimal number of credits that have been cancelled.
  string amount = 3;
}

// EventSell is an event emitted when a sell order is created.
message EventSell {

  // order_id is the unique ID of sell order.
  uint64 order_id = 1;

  // batch_denom is the credit batch being sold.
  string batch_denom = 2;

  // quantity is the quantity of credits being sold.
  string quantity = 3;

  // ask_price is the price the seller is asking for each unit of the
  // batch_denom. Each credit unit of the batch will be sold for at least the
  // ask_price or more.
  cosmos.base.v1beta1.Coin ask_price = 4;

  // disable_auto_retire disables auto-retirement of credits which allows a
  // buyer to disable auto-retirement in their buy order enabling them to
  // resell the credits to another buyer.
  bool disable_auto_retire = 5;

  // expiration is an optional timestamp when the sell order expires. When the
  // expiration time is reached, the sell order is removed from state.
  google.protobuf.Timestamp expiration = 6 [ (gogoproto.stdtime) = true ];
}

// EventUpdateSellOrder is an event emitted when a sell order is updated.
message EventUpdateSellOrder {

  // owner is the owner of the sell orders.
  string owner = 1;

  //  sell_order_id is the ID of an existing sell order.
  uint64 sell_order_id = 2;

  // batch_denom is the credit batch being sold.
  string batch_denom = 3;

  // new_quantity is the updated quantity of credits available to sell, if it
  // is set to zero then the order is cancelled.
  string new_quantity = 4;

  // new_ask_price is the new ask price for this sell order
  cosmos.base.v1beta1.Coin new_ask_price = 5;

  // disable_auto_retire updates the disable_auto_retire field in the sell
  // order.
  bool disable_auto_retire = 6;

  // new_expiration is an optional timestamp when the sell order expires. When
  // the expiration time is reached, the sell order is removed from state.
  google.protobuf.Timestamp new_expiration = 7 [ (gogoproto.stdtime) = true ];
}

// EventBuyOrderCreated is an event emitted when a buy order is created.
message EventBuyOrderCreated {

  // buy_order_id is the unique ID of buy order.
  uint64 buy_order_id = 1;

  // sell_order_id is the sell order ID against which the buyer is trying to
  // buy.
  uint64 sell_order_id = 2;

  // quantity is the quantity of credits to buy. If the quantity of credits
  // available is less than this amount the order will be partially filled
  // unless disable_partial_fill is true.
  string quantity = 3;

  // bid price is the bid price for this buy order. A credit unit will be
  // settled at a purchase price that is no more than the bid price. The
  // buy order will fail if the buyer does not have enough funds available
  // to complete the purchase.
  cosmos.base.v1beta1.Coin bid_price = 4;

  // disable_auto_retire allows auto-retirement to be disabled. If it is set to
  // true the credits will not auto-retire and can be resold assuming that the
  // corresponding sell order has auto-retirement disabled. If the sell order
  // hasn't disabled auto-retirement and the buy order tries to disable it,
  // that buy order will fail.
  bool disable_auto_retire = 5;

  // disable_partial_fill disables the default behavior of partially filling
  // buy orders if the requested quantity is not available.
  bool disable_partial_fill = 6;

  // retirement_location is the optional retirement location for the credits
  // which will be used only if disable_auto_retire is false.
  string retirement_location = 7;

  // expiration is the optional timestamp when the buy order expires. When the
  // expiration time is reached, the buy order is removed from state.
  google.protobuf.Timestamp expiration = 8 [ (gogoproto.stdtime) = true ];
}

// EventBuyOrderFilled is an event emitted when a buy order is filled.
message EventBuyOrderFilled {

  // buy_order_id is the unique ID of the buy order.
  uint64 buy_order_id = 1;

  // sell_order_id is the unique ID of the sell order.
  uint64 sell_order_id = 2;

  // batch_denom is the credit batch ID of the purchased credits.
  string batch_denom = 3;

  // quantity is the quantity of the purchased credits.
  string quantity = 4;

  // total_price is the total price for the purchased credits.
  cosmos.base.v1beta1.Coin total_price = 5;
}

// EventAllowAskDenom is an event emitted when an ask denom is added.
message EventAllowAskDenom {

  // denom is the denom to allow (ex. ibc/GLKHDSG423SGS)
  string denom = 1;

  // display_denom is the denom to display to the user and is informational
  string display_denom = 2;

  // exponent is the exponent that relates the denom to the display_denom and is
  // informational
  uint32 exponent = 3;
}