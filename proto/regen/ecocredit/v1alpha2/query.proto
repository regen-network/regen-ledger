syntax = "proto3";

package regen.ecocredit.v1alpha2;

import "google/api/annotations.proto";
import "regen/ecocredit/v1alpha2/types.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit";

// Msg is the regen.ecocredit.v1alpha2 Query service.
service Query {

  // Classes queries for all credit classes with pagination.
  rpc Classes(QueryClassesRequest) returns (QueryClassesResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha2/classes";
  }

  // ClassInfo queries for information on a credit class.
  rpc ClassInfo(QueryClassInfoRequest) returns (QueryClassInfoResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha2/classes/{class_id}";
  }

  // Projects queries for all projects within a class with pagination.
  rpc Projects(QueryProjectsRequest) returns (QueryProjectsResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha2/classes/{class_id}/projects";
  }

  // ProjectInfo queries for information on a project.
  rpc ProjectInfo(QueryProjectInfoRequest) returns (QueryProjectInfoResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha2/projects/{project_id}";
  }

  // Batches queries for all batches in the given project with pagination.
  rpc Batches(QueryBatchesRequest) returns (QueryBatchesResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha2/projects/{project_id}/batches";
  }

  // BatchInfo queries for information on a credit batch.
  rpc BatchInfo(QueryBatchInfoRequest) returns (QueryBatchInfoResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha2/batches/{batch_denom}";
  }

  // Balance queries the balance (both tradable and retired) of a given credit
  // batch for a given account.
  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha2/batches/{batch_denom}/balance/{account}";
  }

  // Supply queries the tradable and retired supply of a credit batch.
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha2/batches/{batch_denom}/supply";
  }

  // CreditTypes returns the list of allowed types that credit classes can have.
  // See Types/CreditType for more details.
  rpc CreditTypes(QueryCreditTypesRequest) returns (QueryCreditTypesResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha2/credit-types";
  }

  // Params queries the ecocredit module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha2/params";
  }

  // SellOrder queries a sell order by its ID
  rpc SellOrder(QuerySellOrderRequest) returns (QuerySellOrderResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/sell-orders/id/{sell_order_id}";
  }

  // SellOrders queries a paginated list of all sell orders
  rpc SellOrders(QuerySellOrdersRequest) returns (QuerySellOrdersResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/sell-orders";
  }

  // SellOrdersByDenom queries a paginated list of all sell orders of a specific
  // ecocredit denom
  rpc SellOrdersByBatchDenom(QuerySellOrdersByBatchDenomRequest)
      returns (QuerySellOrdersByBatchDenomResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/sell-orders/batch-denom/{batch_denom}";
  }

  // SellOrdersByAddress queries a paginated list of all sell orders from a
  // specific address
  rpc SellOrdersByAddress(QuerySellOrdersByAddressRequest)
      returns (QuerySellOrdersByAddressResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/sell-orders/address/{address}";
  }

  // BuyOrder queries a buy order by its id
  rpc BuyOrder(QueryBuyOrderRequest) returns (QueryBuyOrderResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/buy-orders/id/{buy_order_id}";
  }

  // BuyOrders queries a paginated list of all buy orders
  rpc BuyOrders(QueryBuyOrdersRequest) returns (QueryBuyOrdersResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/buy-orders";
  }

  // BuyOrdersByAddress queries a paginated list of buy orders by creator
  // address
  rpc BuyOrdersByAddress(QueryBuyOrdersByAddressRequest)
      returns (QueryBuyOrdersByAddressResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/buy-orders/address/{address}";
  }

  // AllowedAskDenoms queries all denoms allowed to be set in the AskPrice of a
  // sell order
  rpc AllowedAskDenoms(QueryAllowedAskDenomsRequest)
      returns (QueryAllowedAskDenomsResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/ask-denoms";
  }

  // Basket queries one basket by denom.
  rpc Basket(QueryBasketRequest) returns (QueryBasketResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/baskets/{basket_denom}";
  }

  // Baskets lists all baskets in the ecocredit module.
  rpc Baskets(QueryBasketsRequest) returns (QueryBasketsResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/baskets";
  }

  // BasketCredits lists all ecocredits inside a given basket.
  rpc BasketCredits(QueryBasketCreditsRequest)
      returns (QueryBasketCreditsResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/v1alpha1/baskets/{basket_denom}/credits";
  }
}

// QueryParamsRequest is the Query/Params request type.
message QueryParamsRequest {}

// QueryParamsResponse is the Query/Params response type.
message QueryParamsResponse {
  // params defines the parameters of the ecocredit module.
  Params params = 1;
}

// QueryClassesRequest is the Query/Classes request type.
message QueryClassesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryClassesResponse is the Query/Classes response type.
message QueryClassesResponse {
  // classes are the fetched credit classes.
  repeated ClassInfo classes = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryClassInfoRequest is the Query/ClassInfo request type.
message QueryClassInfoRequest {

  // class_id is the unique ID of credit class to query.
  string class_id = 1;
}

// QueryClassInfoResponse is the Query/ClassInfo request type.
message QueryClassInfoResponse {

  // info is the ClassInfo for the credit class.
  ClassInfo info = 1;
}

// QueryProjectsRequest is the Query/Projects request type.
message QueryProjectsRequest {

  // class_id is the unique ID of credit class to query.
  string class_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryProjectsResponse is the Query/Projects response type.
message QueryProjectsResponse {
  // projects are the fetched projects.
  repeated ProjectInfo projects = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryProjectInfoRequest is the Query/Project request type.
message QueryProjectInfoRequest {

  // project_id is the unique ID of the project to query.
  string project_id = 1;
}

// QueryProjectInfoResponse is the Query/Project response type.
message QueryProjectInfoResponse {

  // info is the ProjectInfo for the project.
  ProjectInfo info = 1;
}

// QueryBatchesRequest is the Query/Batches request type.
message QueryBatchesRequest {

  // project_id is the unique ID of the project to query.
  string project_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBatchesResponse is the Query/Batches response type.
message QueryBatchesResponse {

  // batches are the fetched credit batches within the project.
  repeated BatchInfo batches = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBatchInfoRequest is the Query/BatchInfo request type.
message QueryBatchInfoRequest {

  // batch_denom is the unique ID of credit batch to query.
  string batch_denom = 1;
}

// QueryBatchInfoResponse is the Query/BatchInfo response type.
message QueryBatchInfoResponse {

  // info is the BatchInfo for the credit batch.
  BatchInfo info = 1;
}

// QueryBalanceRequest is the Query/Balance request type.
message QueryBalanceRequest {

  // account is the address of the account whose balance is being queried.
  string account = 1;

  // batch_denom is the unique ID of credit batch balance to query.
  string batch_denom = 2;
}

// QueryBalanceResponse is the Query/Balance response type.
message QueryBalanceResponse {

  // tradable_amount is the decimal number of tradable credits.
  string tradable_amount = 1;

  // retired_amount is the decimal number of retired credits.
  string retired_amount = 2;
}

// QuerySupplyRequest is the Query/Supply request type.
message QuerySupplyRequest {

  // batch_denom is the unique ID of credit batch to query.
  string batch_denom = 1;
}

// QuerySupplyResponse is the Query/Supply response type.
message QuerySupplyResponse {

  // tradable_supply is the decimal number of tradable credits in the batch
  // supply.
  string tradable_supply = 1;

  // retired_supply is the decimal number of retired credits in the batch
  // supply.
  string retired_supply = 2;
}

// QueryCreditTypesRequest is the Query/Credit_Types request type
message QueryCreditTypesRequest {}

// QueryCreditTypesRequest is the Query/Credit_Types response type
message QueryCreditTypesResponse {
  // list of credit types
  repeated CreditType credit_types = 1;
}

// QuerySellOrderRequest is the Query/SellOrder request type.
message QuerySellOrderRequest {
  // sell_order_id is the id of the requested sell order.
  uint64 sell_order_id = 1;
}

// QuerySellOrderResponse is the Query/SellOrder response type.
message QuerySellOrderResponse {
  // sell_order contains all information related to a sell order.
  SellOrder sell_order = 1;
}

// QuerySellOrdersRequest is the Query/SellOrders request type.
message QuerySellOrdersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QuerySellOrdersResponse is the Query/SellOrders response type.
message QuerySellOrdersResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrder sell_orders = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersByDenomRequest is the Query/SellOrdersByDenom request type.
message QuerySellOrdersByBatchDenomRequest {

  // batch_denom is an ecocredit denom
  string batch_denom = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersByDenomResponse is the Query/SellOrdersByDenom response type.
message QuerySellOrdersByBatchDenomResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrder sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersByAddressRequest is the Query/SellOrdersByAddress request
// type.
message QuerySellOrdersByAddressRequest {

  // address is the creator of the sell order
  string address = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersByAddressResponse is the Query/SellOrdersByAddressResponse
// response type.
message QuerySellOrdersByAddressResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrder sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBuyOrderRequest is the Query/BuyOrder request type.
message QueryBuyOrderRequest {
  // buy_order_id is the id of the buy order.
  uint64 buy_order_id = 1;
}

// QueryBuyOrderResponse is the Query/BuyOrder response type.
message QueryBuyOrderResponse {
  // buy_order contains all information related to a buy order.
  BuyOrder buy_order = 1;
}

// QueryBuyOrdersRequest is the Query/BuyOrders request type.
message QueryBuyOrdersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBuyOrdersResponse is the Query/BuyOrders response type.
message QueryBuyOrdersResponse {

  // buy_orders is a list of buy orders.
  repeated BuyOrder buy_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBuyOrdersByAddressRequest is the Query/BuyOrdersByAddress request type
message QueryBuyOrdersByAddressRequest {

  // address of the buy order creator
  string address = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBuyOrdersByAddressResponse is the Query/BuyOrdersByAddress response
// type.
message QueryBuyOrdersByAddressResponse {

  // buy_orders is a list of buy orders.
  repeated BuyOrder buy_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAllowedAskDenomsRequest is the Query/AllowedAskDenoms request type.
message QueryAllowedAskDenomsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllowedAskDenomsResponse is the Query/AllowedAskDenoms response type.
message QueryAllowedAskDenomsResponse {

  // ask_denoms is a list of coin denoms allowed to use in the ask price of sell
  // orders.
  repeated AskDenom ask_denoms = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Basket defines a credit basket.
message Basket {
  // curator is the address of the basket curator who is able to change certain
  // basket settings.
  string curator = 1;

  // name will be used to create a bank denom for this basket token of the form
  // ecocredit:{curator}:{name}.
  string name = 2;

  // display_name will be used to create a bank Metadata display name for this
  // basket token of the form ecocredit:{curator}:{display_name}.
  string display_name = 3;

  // exponent is the exponent that will be used for denom metadata. An exponent
  // of 6 will mean that 10^6 units of a basket token should be displayed
  // as one unit in user interfaces.
  uint32 exponent = 4;

  // basket_criteria is the criteria by which credits can be added to the
  // basket. Basket criteria will be applied in order and the first criteria
  // which applies to a credit will determine its multiplier in the basket.
  repeated BasketCriteria basket_criteria = 5;

  // disable_auto_retire allows auto-retirement to be disabled.
  // The credits will be auto-retired if disable_auto_retire is
  // false unless the credits were previously put into the basket by the
  // address picking them from the basket, in which case they will remain
  // tradable.
  bool disable_auto_retire = 6;

  // allow_picking specifies whether an address which didn't deposit the credits
  // in the basket can pick those credits or not.
  bool allow_picking = 7;
}

// QueryBasketRequest is the Query/Basket request type.
message QueryBasketRequest {
  // basket_denom represents the denom of the basket to query.
  string basket_denom = 1;
}

// QueryBasketResponse is the Query/Basket response type.
message QueryBasketResponse {
  // basket is the queried basket.
  Basket basket = 1;
}

// QueryBasketsRequest is the Query/Baskets request type.
message QueryBasketsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBasketsResponse is the Query/Baskets response type.
message QueryBasketsResponse {
  // baskets are the fetched baskets.
  repeated Basket baskets = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBasketCreditsRequest is the Query/BasketCredits request type.
message QueryBasketCreditsRequest {
  // basket_denom is the basket denom to query credits for.
  string basket_denom = 1;
}

// QueryBasketCreditsResponse is the Query/BasketCredits response type.
message QueryBasketCreditsResponse {
  // credits are the credits inside the basket.
  repeated BasketCredit credits = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
