syntax = "proto3";

package regen.ecocredit.basket.v1;

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/basket";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "regen/ecocredit/basket/v1/types.proto";
import "cosmos/base/v1beta1/coin.proto";

// Msg is the regen.ecocredit.basket.v1beta1 Msg service.
service Msg {

  // Create creates a bank denom which wraps credits.
  rpc Create(MsgCreate) returns (MsgCreateResponse);

  // Put puts credits into a basket in return for basket tokens.
  rpc Put(MsgPut) returns (MsgPutResponse);

  // Take takes credits from a basket starting from the oldest
  // credits first.
  rpc Take(MsgTake) returns (MsgTakeResponse);
}

// MsgCreateBasket is the Msg/CreateBasket request type.
message MsgCreate {
  // curator is the address of the basket curator who is able to change certain
  // basket settings.
  string curator = 1;

  // name will be used to create a bank denom for this basket token.
  string name = 2;

  // display_name will be used to create a bank Metadata display name for this
  // basket token.
  string display_name = 3;

  // exponent is the exponent that will be used for converting credits to basket
  // tokens and for bank denom metadata. An exponent of 6 will mean that 10^6
  // units of a basket token will be issued for 1.0 credits and that
  // this should be displayed as one unit in user interfaces. The exponent
  // must be >= the precision of the credit type to minimize the need for rounding
  // (rounding may still be needed if the precision changes to be great than
  // the exponent).
  uint32 exponent = 4;

  // disable_auto_retire allows auto-retirement to be disabled.
  // The credits will be auto-retired if disable_auto_retire is
  // false unless the credits were previously put into the basket by the
  // address picking them from the basket, in which case they will remain
  // tradable.
  bool disable_auto_retire = 5;

  // credit_type_name filters against credits from this credit type name.
  string credit_type_name = 6;

   // allowed_classes are the credit classes allowed to be put in the basket
  repeated string allowed_classes = 7;

  // min_start_date is the earliest start date for batches of credits allowed
  // into the basket.
  google.protobuf.Timestamp min_start_date = 8;

  // fee is the fee that the curator will pay to create the basket. It must be >=
  // the required Params.basket_creation_fee. We include the fee explicitly
  // here so that the curator explicitly acknowledges paying this fee and
  // is not surprised to learn that the paid a big fee and didn't know
  // beforehand.
  repeated cosmos.base.v1beta1.Coin fee = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgCreateBasketResponse is the Msg/CreateBasket response type.
message MsgCreateResponse {

  // basket_denom is the unique denomination ID of the newly created basket.
  string basket_denom = 1;
}

// MsgAddToBasket is the Msg/AddToBasket request type.
message MsgPut {

  // owner is the owner of credits being put into the basket.
  string owner = 1;

  // basket_denom is the basket denom to add credits to.
  string basket_denom = 2;

  // credits are credits to add to the basket. If they do not match the basket's
  // admission criteria the operation will fail. If there are any "dust" credits
  // left over when converting credits to basket tokens, these credits will
  // not be converted to basket tokens and instead remain with the owner.
  repeated BasketCredit credits = 3;
}

// MsgAddToBasketResponse is the Msg/AddToBasket response type.
message MsgPutResponse {

  // amount_received is the integer amount of basket tokens received.
  string amount_received = 1;
}

// MsgTakeFromBasket is the Msg/TakeFromBasket request type.
message MsgTake {

  // owner is the owner of the basket tokens.
  string owner = 1;

  // basket_denom is the basket bank denom to take credits from.
  string basket_denom = 2;

  // amount is the integer number of basket tokens to convert into credits.
  string amount = 3;

  // retirement_location is the optional retirement location for the credits
  // which will be used only if retire_on_take is true for this basket.
  string retirement_location = 4;
  
  // retire_on_take is a boolean that dictates whether the ecocredits
  // received in exchange for the basket tokens will be received as
  // retired or tradable credits.
  bool retire_on_take = 5;
}

// MsgTakeFromBasketResponse is the Msg/TakeFromBasket response type.
message MsgTakeResponse {

  // credits are the credits taken out of the basket.
  repeated BasketCredit credits = 1;
}
