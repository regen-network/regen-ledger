syntax = "proto3";

package regen.ecocredit.basket.v1;

import "google/api/annotations.proto";
import "regen/ecocredit/basket/v1/state.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "regen/ecocredit/basket/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/basket";

// Msg is the regen.ecocredit.basket.v1 Query service.
service Query {

  // Basket queries one basket by denom.
  rpc Basket(QueryBasketRequest) returns (QueryBasketResponse) {
    option (google.api.http) = {
      get : "/regen/ecocredit/basket/v1/basket/{basket_denom}"
      additional_bindings : [
        {get : "/regen/ecocredit/basket/v1/baskets/{basket_denom}"}
      ]
    };
  }

  // Baskets lists all baskets in the ecocredit module.
  rpc Baskets(QueryBasketsRequest) returns (QueryBasketsResponse) {
    option (google.api.http).get = "/regen/ecocredit/basket/v1/baskets";
  }

  // BasketBalances lists the balance of each credit batch in the basket.
  rpc BasketBalances(QueryBasketBalancesRequest)
      returns (QueryBasketBalancesResponse) {
    option (google.api.http) = {
      get : "/regen/ecocredit/basket/v1/basket-balances/{basket_denom}"
      additional_bindings : [
        {get : "/regen/ecocredit/basket/v1/baskets/{basket_denom}/balances"}
      ]
    };
  }

  // BasketBalance queries the balance of a specific credit batch in the basket.
  rpc BasketBalance(QueryBasketBalanceRequest)
      returns (QueryBasketBalanceResponse) {
    option (google.api.http) = {
      get : "/regen/ecocredit/basket/v1/basket-balance/{basket_denom}/"
            "{batch_denom}"
      additional_bindings : [
        {
          get : "/regen/ecocredit/basket/v1/baskets/{basket_denom}/balances/"
                "{batch_denom}"
        }
      ]
    };
  }
}

// QueryBasketRequest is the Query/Basket request type.
message QueryBasketRequest {
  // basket_denom represents the denom of the basket to query.
  string basket_denom = 1;
}

// QueryBasketResponse is the Query/Basket response type.
message QueryBasketResponse {
  // basket is the queried basket.
  // Deprecated: This field is still populated and will be removed in the
  // next version. Use basket_info instead.
  Basket basket = 1 [ deprecated = true ];

  // classes are the credit classes that can be deposited in the basket.
  repeated string classes = 2;

  // basket_info is the queried basket.
  BasketInfo basket_info = 3;
}

// QueryBasketsRequest is the Query/Baskets request type.
message QueryBasketsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBasketsResponse is the Query/Baskets response type.
message QueryBasketsResponse {
  // baskets are the fetched baskets.
  // Deprecated: This field is still populated and will be removed in the
  // next version. Use baskets_info instead.
  repeated Basket baskets = 1 [ deprecated = true ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // baskets_info are the fetched baskets.
  repeated BasketInfo baskets_info = 3;
}

// QueryBasketBalancesRequest is the Query/BasketBalances request type.
message QueryBasketBalancesRequest {
  // basket_denom is the denom of the basket.
  string basket_denom = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBasketBalancesResponse is the Query/BasketBalances response type.
message QueryBasketBalancesResponse {
  // balances is a list of credit balances in the basket.
  // Deprecated: This field is still populated and will be removed in the
  // next version. Use balances_info instead.
  repeated BasketBalance balances = 1 [ deprecated = true ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

  // balances_info is a list of credit balances in the basket.
  repeated BasketBalanceInfo balances_info = 3;
}

// QueryBasketBalanceRequest is the Query/BasketBalance request type.
message QueryBasketBalanceRequest {
  // basket_denom is the denom of the basket.
  string basket_denom = 1;

  // batch_denom is the denom of the credit batch.
  string batch_denom = 2;
}

// QueryBasketBalanceResponse is the Query/BasketBalance response type.
message QueryBasketBalanceResponse {
  // balance is the amount of the queried credit batch in the basket.
  string balance = 1;
}

// BasketInfo is the human-readable basket information.
message BasketInfo {
  // basket_denom is the basket bank denom.
  string basket_denom = 1;

  // name is the unique name of the basket specified in MsgCreate. Basket
  // names must be unique across all credit types and choices of exponent
  // above and beyond the uniqueness constraint on basket_denom.
  string name = 2;

  // disable_auto_retire indicates whether or not the credits will be retired
  // upon withdraw from the basket.
  bool disable_auto_retire = 3;

  // credit_type_abbrev is the abbreviation of the credit type this basket is
  // able to hold.
  string credit_type_abbrev = 4;

  // date_criteria is the date criteria for batches admitted to the basket.
  DateCriteria date_criteria = 5;

  // exponent is the exponent for converting credits to/from basket tokens.
  uint32 exponent = 6;

  // curator is the address of the basket curator who is able to change certain
  // basket settings.
  string curator = 7;
}

// BasketBalanceInfo is the human-readable basket balance information.
message BasketBalanceInfo {
  // batch_denom is the denom of the credit batch
  string batch_denom = 1;

  // balance is the amount of ecocredits held in the basket
  string balance = 2;
}
