syntax = "proto3";

package regen.ecocredit.basket.v1alpha1;

import "cosmos/orm/v1alpha1/orm.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/basket/v1alpha1";

// Basket represents a basket in state.
message Basket {
    option (cosmos.orm.v1alpha1.table) = {
        id: 1,
        primary_key: {fields: "basket_denom"}
    };

    // basket_denom is the basket denom.
    string basket_denom = 1;

    // disable_auto_retire indicates whether or not the credits will be retired upon withdraw from the basket.
    bool disable_auto_retire = 2;

    // credit_type_name is the name of the credit type this basket is able to hold.
    string credit_type_name = 3;

  // batch_date_window is a duration of time measured into the past which sets
  // a cutoff for batch start dates when adding new credits to the basket.
  // Based on the current block timestamp, credits whose start date is before
  // block timestamp - batch_date_window will not be allowed into the basket.
    google.protobuf.Duration batch_date_window = 8;

    // multiplier is an integer number which is applied to credit units when
    // converting to basket units. For example if the multiplier is 2000, then
    // 1.1 credits will result in 2200 basket tokens. If there are any fractional
    // amounts left over in this calculation when adding credits to a basket,
    // those fractional amounts will not get added to the basket.
    string multiplier = 6;
}

// BasketClass describes a credit class that can be deposited in a basket.
message BasketClass {
    option (cosmos.orm.v1alpha1.table) = {
        id: 2,
        primary_key: {fields: "basket_denom,class_id"}
    };

    // basket_denom is the denom of the basket
    string basket_denom = 1;
    string class_id = 2;
}

// BasketBalance stores the amount of credits from a batch in a basket
message BasketBalance {
    option (cosmos.orm.v1alpha1.table) = {
        id: 3,
        primary_key: {fields: "basket_denom,batch_denom"}
        index: {id: 1, fields: "batch_start_date"}
    };

    // basket_denom is the denom of the basket
    string basket_denom = 1;

    // batch_id is the id of the credit batch
    string batch_denom = 2;

    // balance is the amount of ecocredits held in the basket
    string balance = 3;

    // batch_start_date is the start date of the batch
    google.protobuf.Timestamp batch_start_date = 4;
}