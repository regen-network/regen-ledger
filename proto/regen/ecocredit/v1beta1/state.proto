syntax = "proto3";

package regen.ecocredit.v1beta1;

import "cosmos/orm/v1alpha1/orm.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

// CreditType defines the measurement unit/precision of a certain credit type
// (e.g. carbon, biodiversity...)
message CreditType {
    option (cosmos.orm.v1alpha1.table) = {
        id: 1,
        primary_key: {fields: "abbreviation"}
    };

    // the type of credit (e.g. carbon, biodiversity, etc)
    string name = 1;

    // abbreviation is a 1-3 character uppercase abbreviation of the CreditType
    // name, used in batch denominations within the CreditType. It must be unique.
    string abbreviation = 2;

    // the measurement unit (e.g. kg, ton, etc)
    string unit = 3;

    // the decimal precision
    uint32 precision = 4;
}

// ClassInfo represents the high-level on-chain information for a credit class.
message ClassInfo {

    option (cosmos.orm.v1alpha1.table) = {
        id: 2,
        primary_key: {fields: "class_id"}
    };

    // class_id is the unique ID of credit class.
    string class_id = 1;

    // admin is the admin of the credit class.
    string admin = 2;

    // issuers are the approved issuers of the credit class.
    repeated string issuers = 3;

    // metadata is any arbitrary metadata to attached to the credit class.
    bytes metadata = 4;

    // credit_type describes the type of credit (e.g. carbon, biodiversity), as well as unit and precision.
    CreditType credit_type = 5;

    // The number of batches issued in this credit class.
    uint64 num_batches = 6;
}

// ProjectInfo represents the high-level on-chain information for a project.
message ProjectInfo {

    option (cosmos.orm.v1alpha1.table) = {
        id: 3,
        primary_key: {fields: "project_id"}
    };

    // project_id is the unique ID of the project.
    string project_id = 1;

    // class_id is the unique ID of credit class for this project.
    string class_id = 2;

    // issuer is the issuer of the credit batches for this project.
    string issuer = 3;

    // project_location is the location of the project.
    // Full documentation can be found in MsgCreateProject.project_location.
    string project_location = 4;

    // metadata is any arbitrary metadata attached to the project.
    bytes metadata = 5;
}

// BatchInfo represents the high-level on-chain information for a credit batch.
message BatchInfo {

    option (cosmos.orm.v1alpha1.table) = {
        id: 4,
        primary_key: {fields: "batch_denom"}
        index: {id: 1 fields: "project_id"}
        index: {id: 2 fields: "start_date"}
    };

    // project_id is the unique ID of the project this batch belongs to.
    string project_id = 1;

    // batch_denom is the unique ID of credit batch.
    string batch_denom = 2;

    // total_amount is the total number of active credits in the credit batch.
    // Some of the issued credits may be cancelled and will be removed from
    // total_amount and tracked in amount_cancelled. total_amount and
    // amount_cancelled will always sum to the original amount of credits that
    // were issued.
    string total_amount = 4;

    // metadata is any arbitrary metadata attached to the credit batch.
    bytes metadata = 5;

    // amount_cancelled is the number of credits in the batch that have been
    // cancelled, effectively undoing there issuance. The sum of total_amount and
    // amount_cancelled will always sum to the original amount of credits that
    // were issued.
    string amount_cancelled = 6;

    // start_date is the beginning of the period during which this credit batch
    // was quantified and verified.
    google.protobuf.Timestamp start_date = 7 [ (gogoproto.stdtime) = true ];

    // end_date is the end of the period during which this credit batch was
    // quantified and verified.
    google.protobuf.Timestamp end_date = 8 [ (gogoproto.stdtime) = true ];
}

// SellOrder represents the information for a sell order.
message SellOrder {

    option (cosmos.orm.v1alpha1.table) = {
        id: 5,
        primary_key: {fields: "order_id"}
        index: {id: 1 fields: "batch_denom"}
    };

    // order_id is the unique ID of sell order.
    uint64 order_id = 1;

    // owner is the address of the owner of the credits being sold.
    string owner = 2;

    // batch_denom is the credit batch being sold.
    string batch_denom = 3;

    // quantity is the quantity of credits being sold.
    string quantity = 4;

    // ask_price is the price the seller is asking for each unit of the
    // batch_denom. Each credit unit of the batch will be sold for at least the
    // ask_price or more.
    cosmos.base.v1beta1.Coin ask_price = 5;

    // disable_auto_retire disables auto-retirement of credits which allows a
    // buyer to disable auto-retirement in their buy order enabling them to
    // resell the credits to another buyer.
    bool disable_auto_retire = 6;
}

// BuyOrder represents the information for a buy order.
message BuyOrder {

    option (cosmos.orm.v1alpha1.table) = {
        id: 6,
        primary_key: {fields: "buy_order_id"}
    };

    // Selection defines a buy order selection.
    message Selection {

        // sum defines the type of selection.
        oneof sum {
            // sell_order_id is the sell order ID against which the buyer is trying to buy.
            // When sell_order_id is set, this is known as a direct buy order because it
            // is placed directly against a specific sell order.
            uint64 sell_order_id = 1;

            // TODO: once we have filters defined for baskets, we can enable filtered
            // buy orders which will involve full double-sided batch order matching
            //
            // filter selects credits to buy based upon the specified filter criteria.
            // Filter filter = 2;
        }
    }

    // buy_order_id is the unique ID of buy order.
    uint64 buy_order_id = 1;

    // buyer is the address that created the buy order
    string buyer = 2;

    // selection is the buy order selection.
    Selection selection = 3;

    // quantity is the quantity of credits to buy. If the quantity of credits
    // available is less than this amount the order will be partially filled
    // unless disable_partial_fill is true.
    string quantity = 4;

    // bid price is the bid price for this buy order. A credit unit will be
    // settled at a purchase price that is no more than the bid price. The
    // buy order will fail if the buyer does not have enough funds available
    // to complete the purchase.
    cosmos.base.v1beta1.Coin bid_price = 5;

    // disable_auto_retire allows auto-retirement to be disabled. If it is set to true
    // the credits will not auto-retire and can be resold assuming that the
    // corresponding sell order has auto-retirement disabled. If the sell order
    // hasn't disabled auto-retirement and the buy order tries to disable it,
    // that buy order will fail.
    bool disable_auto_retire = 6;

    // disable_partial_fill disables the default behavior of partially filling
    // buy orders if the requested quantity is not available.
    bool disable_partial_fill = 7;
}