syntax = "proto3";

package regen.ecocredit.marketplace.v1beta1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit";

// SellOrder represents the information for a sell order.
message SellOrder {

  // order_id is the unique ID of sell order.
  uint64 order_id = 1;

  // owner is the address of the owner of the credits being sold.
  string owner = 2;

  // batch_denom is the credit batch being sold.
  string batch_denom = 3;

  // quantity is the quantity of credits being sold.
  string quantity = 4;

  // ask_price is the price the seller is asking for each unit of the
  // batch_denom. Each credit unit of the batch will be sold for at least the
  // ask_price or more.
  cosmos.base.v1beta1.Coin ask_price = 5;

  // disable_auto_retire disables auto-retirement of credits which allows a
  // buyer to disable auto-retirement in their buy order enabling them to
  // resell the credits to another buyer.
  bool disable_auto_retire = 6;

  // expiration is an optional timestamp when the sell order expires. When the
  // expiration time is reached, the sell order is removed from state.
  google.protobuf.Timestamp expiration = 7 [ (gogoproto.stdtime) = true ];
}

// BuyOrder represents the information for a buy order.
message BuyOrder {

  // Selection defines a buy order selection.
  message Selection {

    // sum defines the type of selection.
    oneof sum {
      // sell_order_id is the sell order ID against which the buyer is trying to buy.
      // When sell_order_id is set, this is known as a direct buy order because it
      // is placed directly against a specific sell order.
      uint64 sell_order_id = 1;

      // filter selects credits to buy based upon the specified filter criteria.
       Filter filter = 2;
    }
  }

  // buy_order_id is the unique ID of buy order.
  uint64 buy_order_id = 1;

  // buyer is the address that created the buy order
  string buyer = 2;

  // selection is the buy order selection.
  Selection selection = 3;

  // quantity is the quantity of credits to buy. If the quantity of credits
  // available is less than this amount the order will be partially filled
  // unless disable_partial_fill is true.
  string quantity = 4;

  // bid price is the bid price for this buy order. A credit unit will be
  // settled at a purchase price that is no more than the bid price. The
  // buy order will fail if the buyer does not have enough funds available
  // to complete the purchase.
  cosmos.base.v1beta1.Coin bid_price = 5;

  // disable_auto_retire allows auto-retirement to be disabled. If it is set to true
  // the credits will not auto-retire and can be resold assuming that the
  // corresponding sell order has auto-retirement disabled. If the sell order
  // hasn't disabled auto-retirement and the buy order tries to disable it,
  // that buy order will fail.
  bool disable_auto_retire = 6;

  // disable_partial_fill disables the default behavior of partially filling
  // buy orders if the requested quantity is not available.
  bool disable_partial_fill = 7;

  // expiration is the optional timestamp when the buy order expires. When the
  // expiration time is reached, the buy order is removed from state.
  google.protobuf.Timestamp expiration = 8 [ (gogoproto.stdtime) = true ];
}

// AskDenom represents the information for an ask denom.
message AskDenom {

  // denom is the denom to allow (ex. ibc/GLKHDSG423SGS)
  string denom = 1;

  // display_denom is the denom to display to the user and is informational
  string display_denom = 2;

  // exponent is the exponent that relates the denom to the display_denom and is
  // informational
  uint32 exponent = 3;
}

// Filter is used to create filtered buy orders which match credit batch
// sell orders based on selection criteria rather than matching individual
// sell orders
message Filter {
  // or is a list of criteria for matching credit batches. A credit which
  // matches this filter must match at least one of these criteria.
  repeated Criteria or = 1;

  // Criteria is a simple filter criteria for matching a credit batch.
  message Criteria {
    // or specifies the primary selector criteria. Every criteria
    // must specify at least one selector and matching credit batches must
    // match at least one selector.
    repeated Selector or = 1;

    // project_location can be specified in three levels of granularity:
    // country, sub-national-code, or postal code. If just country is given,
    // for instance "US" then any credits in the "US" will be matched even
    // their project location is more specific, ex. "US-NY 12345". If
    // a country, sub-national-code and postal code are all provided then
    // only projects in that postal code will match.
    string project_location = 2;

    // start_date is the beginning of the period during which a credit batch
    // was quantified and verified. If it is empty then there is no start date
    // limit.
    google.protobuf.Timestamp min_start_date = 3;

    // max_end_date is the end of the period during which a credit batch was
    // quantified and verified. If it is empty then there is no end date
    // limit.
    google.protobuf.Timestamp max_end_date = 4;
  }
}

// SelectorType specifies a selector type. Valid selector types are all
// attributes which are assigned to credit batches by some authority such
// as the credit issuer or a curator. Requiring some authority-based selector
// ensures that buy orders cannot just match some randomly issued credit
// based on location and dates.
enum SelectorType {
  // SELECTOR_TYPE_UNSPECIFIED is the SelectorType zero value.
  SELECTOR_TYPE_UNSPECIFIED = 0;

  // SELECTOR_TYPE_CLASS is a selector type which matches an uint64 credit class ID.
  SELECTOR_TYPE_CLASS = 1;

  // SELECTOR_TYPE_CLASS is a selector type which matches an uint64 project ID.
  SELECTOR_TYPE_PROJECT = 2;

  // SELECTOR_TYPE_CLASS is a selector type which matches an uint64 credit batch ID.
  SELECTOR_TYPE_BATCH = 3;
}

// Selector is the primary authority-based component of filter criteria.
message Selector {

  // type is the selector type
  SelectorType selector_type = 1;

  // value is the oneof for selector values and varies depending on type.
  oneof value {
    // uint64_value is specified for selector types with an uint64 value.
    uint64 uint64_value = 2;
  }
}

