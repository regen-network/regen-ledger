syntax = "proto3";

package regen.ecocredit.marketplace.v1beta1;

import "google/api/annotations.proto";
import "regen/ecocredit/marketplace/v1beta1/state.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/v1beta1";

// Msg is the regen.ecocredit.marketplace.v1beta1 Query service.
service Query {

  // SellOrder queries a sell order by its ID
  rpc SellOrder(QuerySellOrderRequest) returns (QuerySellOrderResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/sell-orders/id/{sell_order_id}";
  }

  // SellOrders queries a paginated list of all sell orders
  rpc SellOrders(QuerySellOrdersRequest) returns (QuerySellOrdersResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/sell-orders";
  }

  // SellOrdersByDenom queries a paginated list of all sell orders of a specific ecocredit denom
  rpc SellOrdersByBatchDenom(QuerySellOrdersByBatchDenomRequest) returns (QuerySellOrdersByBatchDenomResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/sell-orders/batch-denom/{batch_denom}";
  }

  // SellOrdersByAddress queries a paginated list of all sell orders from a specific address
  rpc SellOrdersByAddress(QuerySellOrdersByAddressRequest) returns (QuerySellOrdersByAddressResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/sell-orders/address/{address}";
  }

  // BuyOrder queries a buy order by its id
  rpc BuyOrder(QueryBuyOrderRequest) returns (QueryBuyOrderResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/buy-orders/id/{buy_order_id}";
  }

  // BuyOrders queries a paginated list of all buy orders
  rpc BuyOrders(QueryBuyOrdersRequest) returns (QueryBuyOrdersResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/buy-orders";
  }

  // BuyOrdersByAddress queries a paginated list of buy orders by creator address
  rpc BuyOrdersByAddress(QueryBuyOrdersByAddressRequest) returns (QueryBuyOrdersByAddressResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/buy-orders/address/{address}";
  }

  // AllowedDenoms queries all denoms allowed to be set in the AskPrice of a sell order
  rpc AllowedDenoms(QueryAllowedDenomsRequest) returns (QueryAllowedDenomsResponse) {
    option (google.api.http).get = "/regen/ecocredit/v1alpha1/ask-denoms";
  }
}

// QuerySellOrderRequest is the Query/SellOrder request type.
message QuerySellOrderRequest {
  // sell_order_id is the id of the requested sell order.
  uint64 sell_order_id = 1;
}

// QuerySellOrderResponse is the Query/SellOrder response type.
message QuerySellOrderResponse {
  // sell_order contains all information related to a sell order.
  SellOrder sell_order = 1;
}

// QuerySellOrdersRequest is the Query/SellOrders request type.
message QuerySellOrdersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QuerySellOrdersResponse is the Query/SellOrders response type.
message QuerySellOrdersResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrder sell_orders = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersByDenomRequest is the Query/SellOrdersByDenom request type.
message QuerySellOrdersByBatchDenomRequest {

  // batch_denom is an ecocredit denom
  string batch_denom = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersByDenomResponse is the Query/SellOrdersByDenom response type.
message QuerySellOrdersByBatchDenomResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrder sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersByAddressRequest is the Query/SellOrdersByAddress request type.
message QuerySellOrdersByAddressRequest {

  // address is the creator of the sell order
  string address = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersByAddressResponse is the Query/SellOrdersByAddressResponse response type.
message QuerySellOrdersByAddressResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrder sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBuyOrderRequest is the Query/BuyOrder request type.
message QueryBuyOrderRequest {
  // buy_order_id is the id of the buy order.
  uint64 buy_order_id = 1;
}

// QueryBuyOrderResponse is the Query/BuyOrder response type.
message QueryBuyOrderResponse {
  // buy_order contains all information related to a buy order.
  BuyOrder buy_order = 1;
}

// QueryBuyOrdersRequest is the Query/BuyOrders request type.
message QueryBuyOrdersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBuyOrdersResponse is the Query/BuyOrders response type.
message QueryBuyOrdersResponse {

  // buy_orders is a list of buy orders.
  repeated BuyOrder buy_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBuyOrdersByAddressRequest is the Query/BuyOrdersByAddress request type
message QueryBuyOrdersByAddressRequest {

  // address of the buy order creator
  string address = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBuyOrdersByAddressResponse is the Query/BuyOrdersByAddress response type.
message QueryBuyOrdersByAddressResponse {

  // buy_orders is a list of buy orders.
  repeated BuyOrder buy_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAllowedDenomsRequest is the Query/AllowedDenoms request type.
message QueryAllowedDenomsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllowedDenomsResponse is the Query/AllowedDenoms response type.
message QueryAllowedDenomsResponse {

  // allowed_denoms is a list of coin denoms allowed to use in the ask price of sell orders.
  repeated AllowedDenom allowed_denoms = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
