syntax = "proto3";

package regen.ecocredit.marketplace.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "regen/ecocredit/marketplace/v1/state.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/marketplace";

// Msg is the regen.ecocredit.marketplace.v1 Query service.
service Query {

  // SellOrder queries a sell order by its ID
  rpc SellOrder(QuerySellOrderRequest) returns (QuerySellOrderResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/marketplace/v1/sell-orders/{sell_order_id}";
  }

  // SellOrders queries a paginated list of all sell orders
  rpc SellOrders(QuerySellOrdersRequest) returns (QuerySellOrdersResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/marketplace/v1/sell-orders";
  }

  // SellOrdersByDenom queries a paginated list of all sell orders of a specific
  // ecocredit denom
  rpc SellOrdersByBatchDenom(QuerySellOrdersByBatchDenomRequest)
      returns (QuerySellOrdersByBatchDenomResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/marketplace/v1/sell-orders/batch-denom/{batch_denom}";
  }

  // SellOrdersByAddress queries a paginated list of all sell orders from a
  // specific address
  rpc SellOrdersByAddress(QuerySellOrdersByAddressRequest)
      returns (QuerySellOrdersByAddressResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/marketplace/v1/sell-orders/address/{address}";
  }

  // AllowedDenoms queries all denoms allowed to be set in the AskPrice of a
  // sell order
  rpc AllowedDenoms(QueryAllowedDenomsRequest)
      returns (QueryAllowedDenomsResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/marketplace/v1/allowed-denoms";
  }
}

// QuerySellOrderRequest is the Query/SellOrder request type.
message QuerySellOrderRequest {

  // sell_order_id is the id of the requested sell order.
  uint64 sell_order_id = 1;
}

// QuerySellOrderResponse is the Query/SellOrder response type.
message QuerySellOrderResponse {

  // sell_order contains all information related to a sell order.
  SellOrderInfo sell_order = 1;
}

// QuerySellOrdersRequest is the Query/SellOrders request type.
message QuerySellOrdersRequest {

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QuerySellOrdersResponse is the Query/SellOrders response type.
message QuerySellOrdersResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrderInfo sell_orders = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersByDenomRequest is the Query/SellOrdersByDenom request type.
message QuerySellOrdersByBatchDenomRequest {

  // batch_denom is an ecocredit denom
  string batch_denom = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersByDenomResponse is the Query/SellOrdersByDenom response type.
message QuerySellOrdersByBatchDenomResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrderInfo sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersByAddressRequest is the Query/SellOrdersByAddress request
// type.
message QuerySellOrdersByAddressRequest {

  // address is the creator of the sell order
  string address = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersByAddressResponse is the Query/SellOrdersByAddressResponse
// response type.
message QuerySellOrdersByAddressResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrderInfo sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAllowedDenomsRequest is the Query/AllowedDenoms request type.
message QueryAllowedDenomsRequest {

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllowedDenomsResponse is the Query/AllowedDenoms response type.
message QueryAllowedDenomsResponse {

  // allowed_denoms is a list of coin denoms allowed to use in the ask price of
  // sell orders.
  repeated AllowedDenom allowed_denoms = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// SellOrderInfo is the human-readable sell order information.
message SellOrderInfo {

  // id is the unique ID of sell order.
  uint64 id = 1;

  // seller is the account address of the owner of the credits being sold.
  string seller = 2;

  // batch_denom is denom of the credit batch being sold.
  string batch_denom = 3;

  // quantity is the decimal quantity of credits being sold.
  string quantity = 4;

  // ask_denom is the denom used in the ask price of the sell order.
  string ask_denom = 5;

  // ask_price is the integer price (encoded as a string) the seller is asking
  // for each unit of the batch_denom. Each credit unit of the batch will be
  // sold for at least the ask_price or more.
  string ask_price = 6;

  // disable_auto_retire disables auto-retirement of credits which allows a
  // buyer to disable auto-retirement in their buy order enabling them to
  // resell the credits to another buyer.
  bool disable_auto_retire = 7;

  // expiration is an optional timestamp when the sell order expires. When the
  // expiration time is reached, the sell order is removed from state.
  google.protobuf.Timestamp expiration = 9;
}
