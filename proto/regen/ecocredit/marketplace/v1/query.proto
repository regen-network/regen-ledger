syntax = "proto3";

package regen.ecocredit.marketplace.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "regen/ecocredit/marketplace/v1/state.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/marketplace/types/v1";

// Msg is the regen.ecocredit.marketplace.v1 Query service.
service Query {

  // SellOrder queries a sell order by its unique identifier.
  rpc SellOrder(QuerySellOrderRequest) returns (QuerySellOrderResponse) {
    option (google.api.http) = {
      get : "/regen/ecocredit/marketplace/v1/sell-order/{sell_order_id}"
      additional_bindings : [
        {get : "/regen/ecocredit/marketplace/v1/sell-orders/{sell_order_id}"}
      ]
    };
  }

  // SellOrders queries a paginated list of all sell orders.
  rpc SellOrders(QuerySellOrdersRequest) returns (QuerySellOrdersResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/marketplace/v1/sell-orders";
  }

  // SellOrdersByBatch queries a paginated list of all sell orders based on
  // the batch denom of the credits being sold.
  rpc SellOrdersByBatch(QuerySellOrdersByBatchRequest)
      returns (QuerySellOrdersByBatchResponse) {
    option (google.api.http) = {
      get : "/regen/ecocredit/marketplace/v1/sell-orders-by-batch/{batch_denom}"
      additional_bindings : [ {
        get : "/regen/ecocredit/marketplace/v1/sell-orders/batch/{batch_denom}"
      } ]
    };
  }

  // SellOrdersBySeller queries a paginated list of all sell orders based on the
  // account address of the seller.
  rpc SellOrdersBySeller(QuerySellOrdersBySellerRequest)
      returns (QuerySellOrdersBySellerResponse) {
    option (google.api.http) = {
      get : "/regen/ecocredit/marketplace/v1/sell-orders-by-seller/{seller}"
      additional_bindings : [
        {get : "/regen/ecocredit/marketplace/v1/sell-orders/seller/{seller}"}
      ]
    };
  }

  // AllowedDenoms queries a paginated list of all bank denoms allowed to be
  // used in the marketplace.
  rpc AllowedDenoms(QueryAllowedDenomsRequest)
      returns (QueryAllowedDenomsResponse) {
    option (google.api.http).get =
        "/regen/ecocredit/marketplace/v1/allowed-denoms";
  }
}

// QuerySellOrderRequest is the Query/SellOrder request type.
message QuerySellOrderRequest {

  // sell_order_id is the id of the requested sell order.
  uint64 sell_order_id = 1;
}

// QuerySellOrderResponse is the Query/SellOrder response type.
message QuerySellOrderResponse {

  // sell_order contains all information related to a sell order.
  SellOrderInfo sell_order = 1;
}

// QuerySellOrdersRequest is the Query/SellOrders request type.
message QuerySellOrdersRequest {

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QuerySellOrdersResponse is the Query/SellOrders response type.
message QuerySellOrdersResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrderInfo sell_orders = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersByBatchRequest is the Query/SellOrdersByBatch
// request type.
message QuerySellOrdersByBatchRequest {

  // batch_denom is an ecocredit denom
  string batch_denom = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersByBatchResponse is the Query/SellOrdersByBatch
// response type.
message QuerySellOrdersByBatchResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrderInfo sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySellOrdersBySellerRequest is the Query/SellOrdersBySeller request
// type.
message QuerySellOrdersBySellerRequest {

  // seller is the address of the account that is selling credits.
  string seller = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySellOrdersBySellerResponse is the Query/SellOrdersBySellerResponse
// response type.
message QuerySellOrdersBySellerResponse {

  // sell_orders is a list of sell orders.
  repeated SellOrderInfo sell_orders = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAllowedDenomsRequest is the Query/AllowedDenoms request type.
message QueryAllowedDenomsRequest {

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllowedDenomsResponse is the Query/AllowedDenoms response type.
message QueryAllowedDenomsResponse {

  // allowed_denoms is a list of coin denoms allowed to use in the ask price of
  // sell orders.
  repeated AllowedDenom allowed_denoms = 1;

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// SellOrderInfo is the human-readable sell order information.
message SellOrderInfo {

  // id is the unique ID of sell order.
  uint64 id = 1;

  // seller is the address of the account that is selling credits.
  string seller = 2;

  // batch_denom is denom of the credit batch being sold.
  string batch_denom = 3;

  // quantity is the decimal quantity of credits being sold.
  string quantity = 4;

  // ask_denom is the denom used in the ask price of the sell order.
  string ask_denom = 5;

  // ask_amount is the amount that the seller is asking for each credit unit of
  // the batch. Each credit unit of the batch will be sold for at least the
  // ask_amount.
  string ask_amount = 6;

  // disable_auto_retire disables auto-retirement of credits which allows a
  // buyer to disable auto-retirement in their buy order enabling them to
  // resell the credits to another buyer.
  bool disable_auto_retire = 7;

  // expiration is an optional timestamp when the sell order expires. When the
  // expiration time is reached, the sell order is removed from state.
  google.protobuf.Timestamp expiration = 9;
}
