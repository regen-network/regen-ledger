syntax = "proto3";

package regen.ecocredit.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "regen/ecocredit/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/core";

// Msg is the regen.ecocredit.v1 Msg service.
service Msg {

  // CreateClass creates a new credit class under the given credit type with an
  // approved list of issuers and optional metadata. The fee denom must be one
  // of the denoms listed in Params.credit_class_fee and greater than or equal
  // to the fee amount but only the minimum amount is charged. The creator of
  // the credit class becomes the admin of the credit class upon creation.
  rpc CreateClass(MsgCreateClass) returns (MsgCreateClassResponse);

  // CreateProject creates a new project under the given credit class with a
  // jurisdiction, optional metadata, and an optional reference ID. The creator
  // of the project must be an approved credit class issuer for the given credit
  // class and the creator becomes the admin of the project upon creation.
  rpc CreateProject(MsgCreateProject) returns (MsgCreateProjectResponse);

  // CreateBatch creates a new batch of credits under the given project with a
  // start and end date representing the monitoring period, a list of credits to
  // be issued with each issuance specifying a recipient, the amount of tradable
  // and retired credits, and the retirement jurisdiction (if credits are being
  // issued in a retired state), and optional metadata. The credit batch creator
  // must be listed as an approved issuer within the credit class of the project
  // that the credits are being issued under.
  //
  // The default behavior is for a new credit batch to be "sealed" as opposed to
  // being "open". When a credit batch is "open", new credits can be dynamically
  // minted to the credit batch following the creation of the credit batch. This
  // "open" option should only be set to true when bridging credits from another
  // chain or registry as a result of a bridge operation and is not intended for
  // native issuance.
  rpc CreateBatch(MsgCreateBatch) returns (MsgCreateBatchResponse);

  // MintBatchCredits dynamically mints credits to an "open" credit batch. This
  // feature is only meant to be used when bridging credits from another chain
  // or registry and is not intended for native issuance. When bridging credits
  // from the same vintage (or monitoring period) as an existing credit batch,
  // the credits can be dynamically minted to the existing credit batch if the
  // credit batch is "open".
  rpc MintBatchCredits(MsgMintBatchCredits)
      returns (MsgMintBatchCreditsResponse);

  // MsgSealBatch seals an "open" credit batch. Once a credit batch is sealed
  // (i.e. once "open" is set to false), credits can no longer be dynamically
  // minted to the credit batch. A sealed credit batch cannot be unsealed and
  // only the credit batch issuer can seal a credit batch.
  rpc SealBatch(MsgSealBatch) returns (MsgSealBatchResponse);

  // Send sends a specified amount of tradable credits from the credit owner's
  // account to another account. Sent credits can either remain tradable or be
  // retired upon receipt.
  rpc Send(MsgSend) returns (MsgSendResponse);

  // Retire retires a specified amount of tradable credits, removing the amount
  // from the credit owner's tradable balance and adding it to their retired
  // balance. Retiring credits is permanent and implies the credits are being
  // consumed as a offset.
  rpc Retire(MsgRetire) returns (MsgRetireResponse);

  // Cancel cancels a specified amount of tradable credits, removing the amount
  // from the credit owner's tradable balance and removing the amount from the
  // credit batch's tradable supply. Cancelling credits is permanent and implies
  // the credits have been moved to another chain or registry.
  rpc Cancel(MsgCancel) returns (MsgCancelResponse);

  // UpdateClassAdmin updates the credit class admin. Only the admin of the
  // credit class can update the credit class.
  rpc UpdateClassAdmin(MsgUpdateClassAdmin)
      returns (MsgUpdateClassAdminResponse);

  // UpdateClassIssuers updates the credit class issuer list. Only the admin of
  // the credit class can update the credit class.
  rpc UpdateClassIssuers(MsgUpdateClassIssuers)
      returns (MsgUpdateClassIssuersResponse);

  // UpdateClassMetadata updates the credit class metadata. Only the admin of
  // the credit class can update the credit class.
  rpc UpdateClassMetadata(MsgUpdateClassMetadata)
      returns (MsgUpdateClassMetadataResponse);

  // UpdateProjectAdmin updates the project admin address. Only the admin of the
  // project can update the project.
  rpc UpdateProjectAdmin(MsgUpdateProjectAdmin)
      returns (MsgUpdateProjectAdminResponse);

  // UpdateProjectMetadata updates the project metadata. Only the admin of the
  // project can update the project.
  rpc UpdateProjectMetadata(MsgUpdateProjectMetadata)
      returns (MsgUpdateProjectMetadataResponse);

  // Bridge cancels a specified amount of tradable credits and emits a special
  // bridge event handled by an external bridge service.
  rpc Bridge(MsgBridge) returns (MsgBridgeResponse);
}

// MsgCreateClass is the Msg/CreateClass request type.
message MsgCreateClass {

  // admin is the address of the account creating the credit class that will
  // become the admin upon creation.
  string admin = 1;

  // issuers are the addresses of the accounts that will have permissions within
  // the credit class to create projects and issue credits.
  repeated string issuers = 2;

  // metadata is any arbitrary string with a maximum length of 256 characters
  // that includes or references metadata to attach to the credit class.
  string metadata = 3;

  // credit_type_abbrev is the abbreviation of the credit type within which the
  // credit class will be created (e.g. "C", "BIO").
  string credit_type_abbrev = 4;

  // fee is the credit class creation fee. The specified fee must be one of the
  // fees listed in Params.credit_class_fee. The specified amount can be greater
  // than or equal to the listed amount but only the listed amount is deducted.
  cosmos.base.v1beta1.Coin fee = 5;
}

// MsgCreateClassResponse is the Msg/CreateClass response type.
message MsgCreateClassResponse {

  // class_id is the unique identifier of the credit class.
  string class_id = 1;
}

// MsgCreateProjectResponse is the Msg/CreateProject request type.
message MsgCreateProject {

  // admin is the address of the account creating the project that will become
  // the admin upon creation. The creator of the project must be an approved
  // issuer within the credit class within which the project is being created.
  // The admin will have permissions to update the project including the ability
  // to reassign the admin role to another account.
  string admin = 1;

  // class_id is the unique identifier of the credit class within which the
  // project will be created.
  string class_id = 2;

  // metadata is any arbitrary string with a maximum length of 256 characters
  // that includes or references metadata to attach to the project.
  string metadata = 3;

  // jurisdiction is the jurisdiction of the project. A jurisdiction has with
  // the format: <country-code>[-<sub-national-code>[ <postal-code>]]
  // The country-code and sub-national-code must conform to ISO 3166-2 and the
  // postal-code can be up to 64 alphanumeric characters. Only the country-code
  // is required, while the sub-national-code and postal-code are optional and
  // can be added for increased precision.
  string jurisdiction = 4;

  // reference_id is any arbitrary string used to reference the project with a
  // maximum length of 32 characters.
  string reference_id = 5;
}

// MsgCreateProjectResponse is the Msg/CreateProject response type.
message MsgCreateProjectResponse {

  // project_id is the unique identifier of the project.
  string project_id = 1;
}

// MsgCreateBatch is the Msg/CreateBatch request type.
message MsgCreateBatch {

  // issuer is the address of the account issuing the credits and must be an
  // approved issuer within the credit class of the project backing the credits.
  string issuer = 1;

  // project_id is the unique identifier of the project within which the credit
  // batch will be created.
  string project_id = 2;

  // issuance specifies the amount of tradable and retired credits that will be
  // issued to each recipient and the jurisdiction in which the credits will be
  // retired if credits are issued in a retired state.
  repeated BatchIssuance issuance = 3;

  // metadata is any arbitrary string with a maximum length of 256 characters
  // that includes or references metadata to attach to the credit batch.
  string metadata = 4;

  // start_date is the beginning of the period during which this credit batch
  // was quantified and verified.
  google.protobuf.Timestamp start_date = 5 [ (gogoproto.stdtime) = true ];

  // end_date is the end of the period during which this credit batch was
  // quantified and verified.
  google.protobuf.Timestamp end_date = 6 [ (gogoproto.stdtime) = true ];

  // open determines whether or not the credits can be dynamically minted to the
  // credit batch following the creation of the credit batch. This field should
  // only be set to true when bridging credits from another chain or registry as
  // a result of a bridge operation and is not intended for native issuance.
  bool open = 7;

  // origin_tx is the transaction from another chain or registry that triggered
  // the creation of the credit batch. This field can be ignored when natively
  // issuing credits and should only be set when bridging assets from another
  // chain or registry as a result of a bridge operation.
  OriginTx origin_tx = 8;

  // note is a reference note for accounting that should only be set when
  // bridging assets from another chain or registry as a result of a bridge
  // operation and will be stored in state as a field of BatchOriginTx.
  string note = 9;
}

// TODO: move BatchIssuance to types.proto?

// BatchIssuance specifies the amount of tradable and retired credits issued to
// a recipient and the jurisdiction in which the credits will be retired if
// credits are issued in a retired state.
message BatchIssuance {

  // recipient is the address of the account receiving the issued credits.
  string recipient = 1;

  // tradable_amount is the number of credits in this issuance that can be
  // traded by the recipient. The number of decimal places must be less than or
  // equal to the credit type precision.
  string tradable_amount = 2;

  // retired_amount is the amount of credits in this issuance that are retired
  // upon receipt. The number of decimal places must be less than or equal to
  // the credit type precision.
  string retired_amount = 3;

  // retirement_jurisdiction is the jurisdiction of the recipient and is only
  // required if retired_amount is positive. A jurisdiction has the format:
  // <country-code>[-<sub-national-code>[ <postal-code>]]
  // The country-code and sub-national-code must conform to ISO 3166-2 and the
  // postal-code can be up to 64 alphanumeric characters. Only the country-code
  // is required, while the sub-national-code and postal-code are optional and
  // can be added for increased precision.
  string retirement_jurisdiction = 4;
}

// MsgCreateBatchResponse is the Msg/CreateBatch response type.
message MsgCreateBatchResponse {

  // batch_denom is the unique identifier of the credit batch.
  string batch_denom = 1;
}

// MsgMintBatchCredits is the Msg/MintBatchCredits request type.
message MsgMintBatchCredits {

  // issuer is the address of the account minting the credits and must be the
  // same issuer who created the credit batch.
  string issuer = 1;

  // batch_denom is the unique identifier of the credit batch.
  string batch_denom = 2;

  // issuance are the credits issued in the batch.
  repeated BatchIssuance issuance = 3;

  // origin_tx is the transaction from another chain or registry that triggered
  // the minting of credits.
  OriginTx origin_tx = 4;

  // note is a reference note for accounting that should only be set when
  // bridging assets from another chain or registry as a result of a bridge
  // operation and will be stored in state as a field of BatchOriginTx.
  string note = 5;
}

// MsgMintBatchCreditsResponse is the Msg/MintBatchCredits response type.
message MsgMintBatchCreditsResponse {}

// MsgSealBatch is the Msg/MintBatchCredits request type.
message MsgSealBatch {

  // issuer is the address of the account that created the credit batch and the
  // only account with permissions to seal the credit batch.
  string issuer = 1;

  // batch_denom is the unique identifier of the credit batch.
  string batch_denom = 2;
}

// MsgSealBatchResponse is the Msg/SealBatch response type.
message MsgSealBatchResponse {}

// MsgSend is the Msg/Send request type.
message MsgSend {

  // sender is the address of the account sending credits.
  string sender = 1;

  // recipient is the address of the account receiving credits.
  string recipient = 2;

  // credits are the credits being sent.
  repeated SendCredits credits = 3;

  // TODO: combine BatchIssuance and SendCredits?

  // SendCredits specifies a batch and the amount of credits being transferred.
  // This is split into tradable credits, which will remain tradable on receipt,
  // and retired credits, which will be retired on receipt.
  message SendCredits {

    // batch_denom is the unique identifier of the credit batch.
    string batch_denom = 1;

    // tradable_amount is the amount of credits in this transfer that can be
    // traded by the recipient. The number of decimal places must be less than
    // or equal to the credit type precision.
    string tradable_amount = 2;

    // retired_amount is the amount of credits in this transfer that are retired
    // upon receipt. The number of decimal places must be less than or equal to
    // the credit type precision.
    string retired_amount = 3;

    // retirement_jurisdiction is the jurisdiction of the recipient and is only
    // required if retired_amount is positive. A jurisdiction has the format:
    // <country-code>[-<sub-national-code>[ <postal-code>]]
    // The country-code and sub-national-code must conform to ISO 3166-2 and the
    // postal-code can be up to 64 alphanumeric characters. Only the
    // country-code is required, while the sub-national-code and postal-code are
    // optional and can be added for increased precision.
    string retirement_jurisdiction = 4;
  }
}

// MsgSendResponse is the Msg/Send response type.
message MsgSendResponse {}

// MsgRetire is the Msg/Retire request type.
message MsgRetire {

  // owner is the address of the account that owns the credits being retired.
  string owner = 1;

  // credits are the credits being retired.
  repeated RetireCredits credits = 2;

  // TODO: combine RetiredCredits and BridgeCredits/CancelCredits?

  // RetireCredits specifies a credit batch and the number of credits being
  // retired.
  message RetireCredits {

    // batch_denom is the unique identifier of the credit batch.
    string batch_denom = 1;

    // amount is the number of credits being retired. The number of decimal
    // places must be less than or equal to the credit type precision.
    string amount = 2;
  }

  // jurisdiction is the jurisdiction of the credit owner. A jurisdiction has
  // the format: <country-code>[-<sub-national-code>[ <postal-code>]]
  // The country-code and sub-national-code must conform to ISO 3166-2 and the
  // postal-code can be up to 64 alphanumeric characters. Only the country-code
  // is required, while the sub-national-code and postal-code are optional and
  // can be added for increased precision.
  string jurisdiction = 3;
}

// MsgRetire is the Msg/Retire response type.
message MsgRetireResponse {}

// MsgCancel is the Msg/Cancel request type.
message MsgCancel {

  // owner is the address of the account that owns the credits being cancelled.
  string owner = 1;

  // credits are the credits being cancelled.
  repeated CancelCredits credits = 2;

  // reason is any arbitrary string that specifies the reason for cancelling
  // credits.
  string reason = 3;

  // CancelCredits specifies a batch and the number of credits being cancelled.
  message CancelCredits {

    // batch_denom is the unique identifier of the credit batch.
    string batch_denom = 1;

    // amount is the number of credits being cancelled. The number of decimal
    // places must be less than or equal to the credit type precision.
    string amount = 2;
  }
}

// MsgCancelResponse is the Msg/Cancel response type.
message MsgCancelResponse {}

// MsgUpdateClassAdmin is the Msg/UpdateClassAdmin request type.
message MsgUpdateClassAdmin {

  // admin is the address of the account that is currently the admin of the
  // credit class.
  string admin = 1;

  // class_id is the unique identifier of the credit class.
  string class_id = 2;

  // new_admin is the address of the account that will become the new admin of
  // the credit class.
  string new_admin = 3;
}

// MsgUpdateClassAdminResponse is the MsgUpdateClassAdmin response type.
message MsgUpdateClassAdminResponse {}

// MsgUpdateClassIssuers is the Msg/UpdateClassIssuers request type.
message MsgUpdateClassIssuers {

  // admin is the address of the account that is the admin of the credit class.
  string admin = 1;

  // class_id is the unique identifier of the credit class.
  string class_id = 2;

  // add_issuers are the addresses of the accounts that will be added to the
  // list of approved credit class issuers.
  repeated string add_issuers = 3;

  // remove_issuers are the addresses of the accounts that will be removed from
  // the list of approved credit class issuers.
  repeated string remove_issuers = 4;
}

// MsgUpdateClassIssuersResponse is the MsgUpdateClassIssuers response type.
message MsgUpdateClassIssuersResponse {}

// MsgUpdateClassMetadata is the Msg/UpdateClassMetadata request type.
message MsgUpdateClassMetadata {

  // admin is the address of the account that is the admin of the credit class.
  string admin = 1;

  // class_id is the unique identifier of the credit class.
  string class_id = 2;

  // new_metadata is new metadata that will replace the existing metadata. It
  // can be any arbitrary string with a maximum length of 256 characters that
  // includes or references the metadata to attach to the credit class.
  string new_metadata = 3;
}

// MsgUpdateClassMetadataResponse is the Msg/UpdateClassMetadata response type.
message MsgUpdateClassMetadataResponse {}

// MsgUpdateProjectAdmin is the Msg/UpdateProjectAdmin request type.
message MsgUpdateProjectAdmin {

  // admin is the address of the account that is the currently the admin of the
  // project.
  string admin = 1;

  // project_id is the unique identifier of the project.
  string project_id = 2;

  // new_admin is the address of the account that will become the new admin of
  // the project.
  string new_admin = 3;
}

// MsgUpdateProjectAdmin is the Msg/UpdateProjectAdmin response type.
message MsgUpdateProjectAdminResponse {}

// MsgUpdateProjectMetadata is the Msg/UpdateProjectMetadata request type.
message MsgUpdateProjectMetadata {

  // admin is the address of the account that is the admin of the project.
  string admin = 1;

  // project_id is the unique identifier of the project.
  string project_id = 2;

  // new_metadata is new metadata that will replace the existing metadata. It
  // can be any arbitrary string with a maximum length of 256 characters that
  // includes or references the metadata to attach to the project.
  string new_metadata = 3;
}

// MsgUpdateProjectMetadataResponse is the Msg/UpdateProjectMetadataResponse
// response type.
message MsgUpdateProjectMetadataResponse {}

// MsgBridge is the Msg/Bridge request type.
message MsgBridge {

  // owner is the address of the account that owns the credits being bridged.
  string owner = 1;

  // target is the name of the target chain or registry.
  string target = 2;

  // recipient is the address of the account receiving the bridged credits.
  string recipient = 3;

  // recipient is the address of the contract handling the bridged credits.
  string contract = 4;

  // credits are the credits being cancelled.
  repeated BridgeCredits credits = 5;

  // BridgeCredits specifies a batch and the number of credits being bridged.
  message BridgeCredits {

    // batch_denom is the unique identifier of the credit batch.
    string batch_denom = 1;

    // amount is the number of credits being bridged. The number of decimal
    // places must be less than or equal to the credit type precision.
    string amount = 2;
  }
}

// MsgBridgeResponse is the Msg/MsgBridge response type.
message MsgBridgeResponse {}