syntax = "proto3";

package regen.ecocredit.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "regen/ecocredit/v1/state.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/base/types/v1";

// Params defines the updatable global parameters of the ecocredit module for
// use with the x/params module.
message Params {

  // credit_class_fee is a list of credit class creation fees accepted when
  // creating a credit class. Any fee listed is accepted and charged to the
  // credit class creator when creating a credit class.
  repeated cosmos.base.v1beta1.Coin credit_class_fee = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // basket_fee is a list of basket creation fees accepted when creating a
  // basket. Any fee listed is accepted and charged to the basket creator when
  // creating a basket.
  repeated cosmos.base.v1beta1.Coin basket_fee = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // allowed_class_creators is an allowlist defining the addresses with the
  // required permissions to create credit classes when allowlist_enabled is set
  // to true. If allowlist_enabled is set to false, this list has no effect.
  repeated string allowed_class_creators = 3;

  // allowlist_enabled determines whether or not the allowlist for creating
  // credit classes is enabled. When set to true, only the addresses listed in
  // allowed_class_creators can create credit classes. When set to false, any
  // address can create credit classes.
  bool allowlist_enabled = 4;

  // allowed_denoms is a list of bank denoms allowed to be used in the ask price
  // of sell orders.
  //
  // Since Revision 2
  repeated AllowedDenom allowed_denoms = 5;

  // AllowedBridgeChains is a list of chain names that are allowed to be used in
  // bridge operations.
  //
  // Since Revision 2
  repeated string allowed_bridge_chains = 6;
}

// Credits represents a simple structure for credits.
message Credits {

  // batch_denom is the denom of the credit batch.
  string batch_denom = 1;

  // amount is the amount of credits.
  string amount = 2;
}

// BatchIssuance represents a simple structure for a credit batch issuance.
message BatchIssuance {

  // recipient is the address of the account receiving the issued credits.
  string recipient = 1;

  // tradable_amount is the amount of credits that the recipient will receive in
  // a tradable state. The number of decimal places must be less than or equal
  // to the credit type precision.
  string tradable_amount = 2;

  // retired_amount is the amount of credits that the recipient will receive in
  // a retired state. The number of decimal places must be less than or equal to
  // the credit type precision.
  string retired_amount = 3;

  // retirement_jurisdiction is the jurisdiction of the recipient and is only
  // required if retired_amount is positive. A jurisdiction has the following
  // format: <country-code>[-<sub-national-code>[ <postal-code>]]
  // The country-code must be 2 alphabetic characters, the sub-national-code
  // can be 1-3 alphanumeric characters, and the postal-code can be up to 64
  // alphanumeric characters. Only the country-code is required, while the
  // sub-national-code and postal-code are optional and can be added for
  // increased precision.
  string retirement_jurisdiction = 4;

  // retirement_reason is any arbitrary string that specifies the reason for
  // retiring credits. The reason will be included in EventRetire and is not
  // stored in state.
  //
  // Since Revision 2
  string retirement_reason = 5;
}

// OriginTx is the transaction from another chain or registry that triggered
// the minting of credits.
message OriginTx {

  // id is the transaction ID of an originating transaction or operation based
  // on a type (i.e. transaction ID, serial number).
  string id = 1;

  // source is the source chain or registry of the transaction originating the
  // mint process (e.g. polygon, ethereum, verra).
  string source = 2;

  // contract is the address of the contract on the source chain that was
  // executed when creating the transaction. This address will be stored in
  // state separately from the origin tx and on a per credit batch basis to be
  // used when sending credits back to the source chain. This field can be left
  // blank if credits are bridged from a non-contract-based source.
  string contract = 3;

  // note is a reference note for accounting that will be included in an event
  // emitted from either Msg/CreateBatch or Msg/MintBatchCredits.
  string note = 4;
}

// CreditTypeProposal is a gov Content type for adding a credit type.
// Deprecated (Since Revision 2): This message is no longer used and will be
// removed in the next version. See MsgAddCreditType.
message CreditTypeProposal {
  option (gogoproto.goproto_stringer) = false;

  // title is the title of the proposal.
  string title = 1;

  // description is the description of the proposal.
  string description = 2;

  // credit_type is the credit type to be added to the network if the proposal
  // passes.
  CreditType credit_type = 3;
}

// AllowedDenom represents the information for an allowed ask denom.
//
// Since Revision 2
//
// Deprecated(Since Revision 2): This type was added to support historical
// queries for params but will also be removed in the next version.
message AllowedDenom {

  // denom is the bank denom to allow (ex. ibc/GLKHDSG423SGS)
  string bank_denom = 1;

  // display_denom is the denom to display to the user and is informational.
  // Because the denom is likely an IBC denom, this should be chosen by
  // governance to represent the consensus trusted name of the denom.
  string display_denom = 2;

  // exponent is the exponent that relates the denom to the display_denom and is
  // informational
  uint32 exponent = 3;
}
