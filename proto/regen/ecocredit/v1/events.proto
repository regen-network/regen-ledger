syntax = "proto3";

package regen.ecocredit.v1;

import "regen/ecocredit/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/core";

// EventCreateClass is an event emitted when a credit class is created.
message EventCreateClass {

  // class_id is the unique identifier of the credit class.
  string class_id = 1;

  // admin is the admin of the credit class.
  string admin = 2;
}

// EventCreateProject is an event emitted when a project is created.
message EventCreateProject {

  // project_id is the unique identifier of the project.
  string project_id = 1;

  // admin is the admin of the project.
  string admin = 2;
}

// EventCreateBatch is an event emitted when a credit batch is created.
message EventCreateBatch {

  // batch_denom is the unique identifier of the credit batch.
  string batch_denom = 1;

  // issuer is the account address of the issuer of the credit batch.
  string issuer = 2;
}

// EventCreateBatch is an event emitted when a credit batch is created.
message EventMintBatchCredits {

  // batch_denom is the unique identifier of the credit batch within which the
  // credits were minted.
  string batch_denom = 1;

  // A reference to a transaction or an event referencing the transaction
  // which caused the transfer from other chain or registry.
  OriginTx origin_tx = 2;
}

// EventReceive is an event emitted when credits are received either via
// creation of a new batch, transfer of credits, or taking credits from a
// basket. Each batch_denom created, transferred or taken from a basket will
// result in a separate EventReceive for easy indexing.
message EventReceive {

  // sender is the sender of the credits in the case that this event is the
  // result of a transfer. It will not be set when credits are received at
  // initial issuance or taken from a basket.
  string sender = 1;

  // recipient is the recipient of the credits.
  string recipient = 2;

  // batch_denom is the unique identifier of the credit batch.
  string batch_denom = 3;

  // tradable_amount is the decimal number of tradable credits received.
  string tradable_amount = 4;

  // retired_amount is the decimal number of retired credits received.
  string retired_amount = 5;

  // basket_denom is the denom of the basket. When the basket_denom field is
  // set, it indicates that this event was triggered by the transfer of credits
  // from a basket. It will not be set if the credits were transferred or
  // received at initial issuance.
  string basket_denom = 6;
}

// EventRetire is an event emitted when credits are retired. When credits are
// retired from multiple batches in the same transaction, a separate event is
// emitted for each batch_denom. This allows for easier indexing.
message EventRetire {

  // retirer is the account which has done the "retiring". This will be the
  // account receiving credits in the case that credits were retired upon
  // issuance using Msg/CreateBatch or retired upon transfer using Msg/Send.
  string retirer = 1;

  // batch_denom is the unique identifier of the credit batch within which the
  // credits were retired.
  string batch_denom = 2;

  // amount is the decimal number of credits that have been retired.
  string amount = 3;

  // jurisdiction is the jurisdiction of the beneficiary or buyer of the retired
  // credits. It is a string of the form
  // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  // fields conforming to ISO 3166-2, and postal-code being up to 64
  // alphanumeric characters.
  string jurisdiction = 4;
}

// EventCancel is an event emitted when credits are cancelled. When credits are
// cancelled from multiple batches in the same transaction, a separate event is
// emitted for each batch_denom. This allows for easier indexing.
message EventCancel {

  // canceller is the account which has cancelled the credits, which should be
  // the holder of the credits.
  string canceller = 1;

  // batch_denom is the unique identifier of the credit batch within which the
  // credits were cancelled.
  string batch_denom = 2;

  // amount is the decimal number of credits that have been cancelled.
  string amount = 3;
}

// EventClassAdminUpdated is emitted when the admin address of a credit class is
// changed.
message EventClassAdminUpdated {

  // class_id is the unique identifier of the class that was updated.
  string class_id = 1;

  // old_admin is the admin of the credit class before the update.
  string old_admin = 2;

  // new_admin is the admin of the credit class after the update.
  string new_admin = 3;
}

// EventClassIssuersUpdated is emitted when the issuer list for a credit class
// is updated.
message EventClassIssuersUpdated {

  // class_id is the unique identifier of the class that was updated.
  string class_id = 1;

  // added_issuers contains all the addresses added to the class issuer list.
  repeated string added_issuers = 2;

  // removed_issuers contains all the addresses removed from the class issuer
  // list.
  repeated string removed_issuers = 3;
}

// EventClassMetadataUpdated is emitted when the credit class metadata is
// changed.
message EventClassMetadataUpdated {

  // class_id is the unique identifier of the class that was updated.
  string class_id = 1;

  // old_metadata is the metadata before the update.
  string old_metadata = 2;

  // new_metadata is the metadata after the update.
  string new_metadata = 3;
}

// EventProjectAdminUpdated is emitted when the project admin is changed.
message EventProjectAdminUpdated {

  // project_id is the unique identifier of the project that was updated.
  string project_id = 1;

  // old_admin is the admin address before the update.
  string old_admin = 2;

  // new_admin is the admin address after the update.
  string new_admin = 3;
}

// EventProjectMetadataUpdated is emitted when the project metadata is changed.
message EventProjectMetadataUpdated {

  // project_id is the unique identifier of the project that was updated.
  string project_id = 1;

  // old_metadata is the metadata before the update.
  string old_metadata = 2;

  // new_metadata is the metadata after the update.
  string new_metadata = 3;
}

// EventBatchSealed is emitted when a batch is sealed.
message EventBatchSealed {

  // batch_denom is the denom of the batch that was sealed.
  string batch_denom = 1;
}
