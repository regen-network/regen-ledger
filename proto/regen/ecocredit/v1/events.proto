syntax = "proto3";

package regen.ecocredit.v1;

import "regen/ecocredit/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit/core";

// EventCreateClass is an event emitted when a credit class is created.
message EventCreateClass {

  // class_id is the unique identifier of the credit class.
  string class_id = 1;
}

// EventCreateProject is an event emitted when a project is created.
message EventCreateProject {

  // project_id is the unique identifier of the project.
  string project_id = 1;
}

// EventCreateBatch is an event emitted when a credit batch is created.
message EventCreateBatch {

  // batch_denom is the unique identifier of the credit batch.
  string batch_denom = 1;

  // origin_tx is the transaction from another chain or registry that triggered
  // the creation of the credit batch.
  OriginTx origin_tx = 2;
}

// EventMint is an event emitted when credits are minted either when creating a
// credit batch or when bridging assets from another chain or registry.
message EventMint {

  // batch_denom is the unique identifier of the credit batch within which the
  // credits were minted.
  string batch_denom = 1;

  // tradable_amount is the amount of tradable credits minted.
  string tradable_amount = 2;

  // retired_amount is the amount of retired credits minted.
  string retired_amount = 3;
}

// EventMintBatchCredits is an event emitted when credits are minted to an
// existing open credit batch.
message EventMintBatchCredits {

  // batch_denom is the unique identifier of the credit batch within which the
  // credits were minted.
  string batch_denom = 1;

  // origin_tx is the transaction from another chain or registry that triggered
  // the minting of credits within the credit batch.
  OriginTx origin_tx = 2;
}

// EventTransfer is an event emitted when credits are transferred from one
// account to another including transfers to or from a module account.
message EventTransfer {

  // sender is the sender of the credits. In the case that the credits were
  // transferred from a base account, this will be the account address. In the
  // case that the credits were transferred from a module, this will be the
  // module address (i.e. either the ecocredit module or basket submodule).
  string sender = 1;

  // recipient is the recipient of the credits. In the case that the credits
  // were transferred to a base account, this will be the account address. In
  // the case that the credits were transferred to a module, this will be the
  // module address (i.e. either the ecocredit module or basket submodule).
  string recipient = 2;

  // batch_denom is the unique identifier of the credit batch.
  string batch_denom = 3;

  // tradable_amount is the decimal number of tradable credits received.
  string tradable_amount = 4;

  // retired_amount is the decimal number of retired credits received.
  string retired_amount = 5;
}

// EventRetire is an event emitted when credits are retired. When credits are
// retired from multiple batches in the same transaction, a separate event is
// emitted for each batch_denom. This allows for easier indexing.
message EventRetire {

  // owner is the address of the account that owns the retired credits. This
  // will be the account receiving credits in the case that credits were retired
  // upon issuance using Msg/CreateBatch, retired upon transfer using Msg/Send,
  // retired upon taking from a basket using basket.Msg/Take, or retired upon
  // purchase using marketplace.Msg/BuyDirect.
  string owner = 1;

  // batch_denom is the unique identifier of the credit batch within which the
  // credits were retired.
  string batch_denom = 2;

  // amount is the decimal number of credits that have been retired.
  string amount = 3;

  // jurisdiction is the jurisdiction of the beneficiary or buyer of the retired
  // credits. It is a string of the form
  // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  // fields conforming to ISO 3166-2, and postal-code being up to 64
  // alphanumeric characters.
  string jurisdiction = 4;
}

// EventCancel is an event emitted when credits are cancelled. When credits are
// cancelled from multiple batches in the same transaction, a separate event is
// emitted for each batch_denom. This allows for easier indexing.
message EventCancel {

  // owner is the address of the account that cancelled the credits.
  string owner = 1;

  // batch_denom is the unique identifier of the credit batch within which the
  // credits were cancelled.
  string batch_denom = 2;

  // amount is the decimal number of credits that have been cancelled.
  string amount = 3;

  // reason is the reason the credits were cancelled.
  string reason = 4;
}

// EventUpdateClassAdmin is emitted when the admin address of a credit class is
// changed.
message EventUpdateClassAdmin {

  // class_id is the unique identifier of the class that was updated.
  string class_id = 1;
}

// EventUpdateClassIssuers is emitted when the issuer list for a credit class
// is updated.
message EventUpdateClassIssuers {

  // class_id is the unique identifier of the class that was updated.
  string class_id = 1;
}

// EventUpdateClassMetadata is emitted when the credit class metadata is
// changed.
message EventUpdateClassMetadata {

  // class_id is the unique identifier of the class that was updated.
  string class_id = 1;
}

// EventUpdateProjectAdmin is emitted when the project admin is changed.
message EventUpdateProjectAdmin {

  // project_id is the unique identifier of the project that was updated.
  string project_id = 1;
}

// EventUpdateProjectMetadata is emitted when the project metadata is changed.
message EventUpdateProjectMetadata {

  // project_id is the unique identifier of the project that was updated.
  string project_id = 1;
}

// EventSealBatch is emitted when a batch is sealed.
message EventSealBatch {

  // batch_denom is the denom of the batch that was sealed.
  string batch_denom = 1;
}

// EventAddCreditType is emitted when governance approves a new credit type.
message EventAddCreditType {

  // abbreviation is the abbreviation of the credit type.
  string abbreviation = 1;
}

// EventBridge is emitted when credits are bridged to another chain.
message EventBridge {

  // target is the target chain.
  string target = 1;

  // recipient is the recipient address.
  string recipient = 2;

  // contract is the contract address.
  string contract = 3;

  // amount is the amount of credits.
  string amount = 4;
}

// EventBridgeReceive is emitted when credits are bridged from another chain.
message EventBridgeReceive {

  // project_id is the unique identifier of the project that was either created
  // or the existing project within which the credit batch exists.
  string project_id = 1;

  // batch_denom is the unique identifier of the credit batch either created
  // or within which the credits were dynamically minted.
  string batch_denom = 2;
}
