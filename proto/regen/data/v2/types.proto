syntax = "proto3";

package regen.data.v2;

option go_package = "github.com/regen-network/regen-ledger/x/data";

// ContentHash specifies a hash-based content identifier for a piece of data.
// Exactly one of its fields must be set so this message behaves like a oneof.
// A protobuf oneof was not used because this caused compatibility issues with
// amino signing.
message ContentHash {
  // raw specifies "raw" data which does not specify a deterministic, canonical
  // encoding. Users of these hashes MUST maintain a copy of the hashed data
  // which is preserved bit by bit. All other content encodings specify a
  // deterministic, canonical encoding allowing implementations to choose from a
  // variety of alternative formats for transport and encoding while maintaining
  // the guarantee that the canonical hash will not change.
  Raw raw = 1;

  // graph specifies graph data that conforms to the RDF data model.
  // The canonicalization algorithm used for an RDF graph is specified by
  // GraphCanonicalizationAlgorithm.
  Graph graph = 2;

  // RawVis the content hash type used for raw data.
  message Raw {
    // hash represents the hash of the data based on the specified
    // digest_algorithm. It must be at least 20 bytes long and at most 64 bytes long.
    bytes hash = 1;

    // digest_algorithm represents the hash digest algorithm and should be a non-zero value from the DigestAlgorithm enum.
    uint32 digest_algorithm = 2;

    // file_extension represents the file extension for raw data. It can be
    // must be between 2-6 characters long, must be all lower-case and should represent
    // the canonical extension for the media type.
    //
    // A list of canonical extensions which should be used is provided here
    // and SHOULD be used by implementations: txt, json, csv, xml, pdf, tiff,
    // jpg, png, svg, webp, avif, gif, apng, mpeg, mp4, webm, ogg, heic, raw.
    //
    // The above list should be updated as new media types come into common usage
    // especially when there are two or more possible extensions (i.e. jpg vs jpeg or tif vs tiff).
    string file_extension = 3;
  }

  // Graph is the content hash type used for RDF graph data.
  message Graph {
    // hash represents the hash of the data based on the specified
    // digest_algorithm. It must be at least 20 bytes long and at most 64 bytes long.
    bytes hash = 1;

    // digest_algorithm represents the hash digest algorithm and should be a non-zero value from the DigestAlgorithm enum.
    uint32 digest_algorithm = 2;

    // graph_canonicalization_algorithm represents the RDF graph
    // canonicalization algorithm and should be a non-zero value from the GraphCanonicalizationAlgorithm enum.
    uint32 canonicalization_algorithm = 3;

    // merkle_tree is the merkle tree type used for the graph hash, if any and should be a value from the GraphMerkleTree enum
    // or left unspecified.
    uint32 merkle_tree = 4;
  }
}

// DigestAlgorithm is the hash digest algorithm
//
// With v2, this enum is no longer validated on-chain.
// However, this enum SHOULD still be used and updated as a registry of known digest
// algorithms and all implementations should coordinate on these values.
enum DigestAlgorithm {
  // unspecified and invalid
  DIGEST_ALGORITHM_UNSPECIFIED = 0;

  // BLAKE2b-256
  DIGEST_ALGORITHM_BLAKE2B_256 = 1;
}

// GraphCanonicalizationAlgorithm is the graph canonicalization algorithm
//
// With v2, this enum is no longer validated on-chain.
// However, this enum SHOULD still be used and updated as a registry of known canonicalization
// algorithms and all implementations should coordinate on these values.
enum GraphCanonicalizationAlgorithm {
  // unspecified and invalid
  GRAPH_CANONICALIZATION_ALGORITHM_UNSPECIFIED = 0;

  // RDFC 1.0 graph canonicalization algorithm. Essentially the same as URDNA2015 with some
  // small clarifications around escaping of escape characters.
  GRAPH_CANONICALIZATION_ALGORITHM_RDFC_1_0 = 1;
}

// GraphMerkleTree is the graph merkle tree type used for hashing, if any.
//
// With v2, this enum is no longer validated on-chain.
// However, this enum SHOULD still be used and updated as a registry of known merkle tree
// types and all implementations should coordinate on these values.
enum GraphMerkleTree {
  // unspecified and valid
  GRAPH_MERKLE_TREE_NONE_UNSPECIFIED = 0;
}

// ContentHashes contains list of content ContentHash.
message ContentHashes {
  // data is a list of content hashes which the resolver claims to serve.
  repeated ContentHash content_hashes = 1;
}