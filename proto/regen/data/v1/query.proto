syntax = "proto3";

package regen.data.v1;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "regen/data/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/data";

// Query is the regen.data.v1 Query service
service Query {
  // AnchorByIRI queries for an anchor entry by IRI.
  rpc AnchorByIRI(QueryAnchorByIRIRequest) returns (QueryAnchorByIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/anchor-by-iri/{iri}";
  }

  // AnchorByHash queries for an anchor entry by content hash.
  rpc AnchorByHash(QueryAnchorByHashRequest) returns (QueryAnchorByHashResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // AnchorsByAttestor queries for all anchor entries attested to by a given attestor.
  rpc AnchorsByAttestor(QueryAnchorsByAttestorRequest) returns (QueryAnchorsByAttestorResponse) {
    option (google.api.http).get = "/regen/data/v1/anchors-by-attestor/{attestor}";
  }

  // AttestorsByIRI queries for all attestor entries for an anchor entry by IRI.
  rpc AttestorsByIRI(QueryAttestorsByIRIRequest) returns (QueryAttestorsByIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/attestors-by-iri/{iri}";
  }

  // AttestorsByHash queries for all attestor entries for an anchor entry by content hash.
  rpc AttestorsByHash(QueryAttestorsByHashRequest) returns (QueryAttestorsByHashResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // Resolver queries for a resolver by resolver ID.
  rpc Resolver(QueryResolverRequest) returns (QueryResolverResponse) {
    option (google.api.http).get = "/regen/data/v1/resolver/{id}";
  }

  // ResolversByIRI queries for all resolvers that have registered an anchor entry by IRI.
  rpc ResolversByIRI(QueryResolversByIRIRequest) returns (QueryResolversByIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/resolvers-by-iri/{iri}";
  }

  // ResolversByHash queries for all resolvers that have registered an anchor entry by content hash.
  rpc ResolversByHash(QueryResolversByHashRequest) returns (QueryResolversByHashResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // ResolversByURL queries resolvers based on URL.
  rpc ResolversByURL(QueryResolversByURLRequest) returns (QueryResolversByURLResponse) {
    option (google.api.http).get = "/regen/data/v1/resolvers-by-url";
  }

  // ConvertIRIToHash converts an IRI to a content hash.
  rpc ConvertIRIToHash(ConvertIRIToHashRequest) returns (ConvertIRIToHashResponse) {
    option (google.api.http).get = "/regen/data/v1/iri-to-hash/{iri}";
  }

  // ConvertHashToIRI converts a content hash to an IRI.
  rpc ConvertHashToIRI(ConvertHashToIRIRequest) returns (ConvertHashToIRIResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // ConvertRawHashToIRI converts raw content hash properties to an IRI.
  rpc ConvertRawHashToIRI(ConvertRawHashToIRIRequest) returns (ConvertRawHashToIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/raw-hash-to-iri";
  }

  // ConvertGraphHashToIRI converts graph content hash properties to an IRI.
  rpc ConvertGraphHashToIRI(ConvertGraphHashToIRIRequest) returns (ConvertGraphHashToIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/graph-hash-to-iri";
  }
}

// QueryAnchorByIRIRequest is the Query/ByIRI request type.
message QueryAnchorByIRIRequest {
  // iri is the IRI for the anchored data.
  string iri = 1;
}

// QueryAnchorByIRIResponse is the Query/ByHash response type.
message QueryAnchorByIRIResponse {
  // entry is the ContentEntry for the anchored data.
  ContentEntry entry = 1;
}

// QueryAnchorByHashRequest is the Query/ByHash request type.
message QueryAnchorByHashRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;
}

// QueryAnchorByHashResponse is the Query/ByHash response type.
message QueryAnchorByHashResponse {
  // entry is the ContentEntry for the anchored data.
  ContentEntry entry = 1;
}

// QueryAnchorsByAttestorRequest is the Query/AnchorsByAttestor request type.
message QueryAnchorsByAttestorRequest {
  // attestor is the address of the attestor.
  string attestor = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAnchorsByAttestorResponse is the Query/AnchorsByAttestor response type.
message QueryAnchorsByAttestorResponse {
  // entries are the ContentEntries attested to by the attestor.
  repeated ContentEntry entries = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAttestorsByIRIRequest is the Query/AttestorsByIRI request type.
message QueryAttestorsByIRIRequest {
  // iri is the IRI for the anchored data.
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAttestorsByIRIResponse is the Query/AttestorsByIRI response type.
message QueryAttestorsByIRIResponse {
  // attestors are the addresses of the attestors.
  repeated string attestors = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAttestorsByHashRequest is the Query/AttestorsByHash request type.
message QueryAttestorsByHashRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAttestorsByHashResponse is the Query/AttestorsByHash response type.
message QueryAttestorsByHashResponse {
  // attestors are the addresses of the attestors.
  repeated string attestors = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByIRIRequest is the Query/ResolversByIRI request type.
message QueryResolversByIRIRequest {
  // iri is the IRI for the anchored data.
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolverRequest is the Query/Resolver request type.
message QueryResolverRequest {
  // id is the ID of the resolver.
  uint64 id = 1;
}

// QueryResolverResponse is the Query/Resolver response type.
message QueryResolverResponse {
  // resolver is the fetched resolver.
  ResolverInfo resolver = 1;
}

// QueryResolversByIRIResponse is the Query/ResolversByIRI response type.
message QueryResolversByIRIResponse {
  // resolvers are the resolvers that have registered the data.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByHashRequest is the Query/ResolversByHash request type.
message QueryResolversByHashRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversByHashResponse is the Query/ResolversByHash response type.
message QueryResolversByHashResponse {
  // resolvers are the resolvers that have registered the data.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByURLRequest is the Query/Resolver request type.
message QueryResolversByURLRequest {
  // url is the resolver URL that has been registered.
  string url = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversByURLResponse is the Query/Resolver response type.
message QueryResolversByURLResponse {
  // resolvers are the fetched resolvers.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ConvertHashToIRIRequest is the Query/ConvertHashToIRI request type.
message ConvertHashToIRIRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;
}

// ConvertHashToIRIResponse is the Query/ConvertHashToIRI response type.
message ConvertHashToIRIResponse {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertRawHashToIRIRequest is the Query/ConvertRawHashToIRI request type.
message ConvertRawHashToIRIRequest {
  // hash represents the hash of the data based on the digest_algorithm and must
  // be encoded as a base64 string. When hash is provided as a URL parameter,
  // all instances of "+" should also be replaced with "%2b".
  string hash = 1;

  // digest_algorithm represents the hash digest algorithm.
  DigestAlgorithm digest_algorithm = 2;

  // media_type represents the media type for raw data.
  RawMediaType media_type = 3;
}

// ConvertRawHashToIRIResponse is the Query/ConvertRawHashToIRI response type.
message ConvertRawHashToIRIResponse {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertGraphHashToIRIRequest is the Query/ConvertGraphHashToIRI request type.
message ConvertGraphHashToIRIRequest {
  // hash represents the hash of the data based on the digest_algorithm and must
  // be encoded as a base64 string. When hash is provided as a URL parameter,
  // all instances of "+" should also be replaced with "%2b".
  string hash = 1;

  // digest_algorithm represents the hash digest algorithm.
  DigestAlgorithm digest_algorithm = 2;

  // graph_canonicalization_algorithm represents the RDF graph
  // canonicalization algorithm.
  GraphCanonicalizationAlgorithm canonicalization_algorithm = 3;

  // merkle_tree is the merkle tree type used for the graph hash, if any.
  GraphMerkleTree merkle_tree = 4;
}

// ConvertGraphHashToIRIResponse is the Query/ConvertGraphHashToIRI response type.
message ConvertGraphHashToIRIResponse {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertIRIToHashRequest is the Query/ConvertIRIToHash request type.
message ConvertIRIToHashRequest {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertIRIToHashResponse is the Query/ConvertIRIToHash response type.
message ConvertIRIToHashResponse {
  // content_hash is the ContentHash for the IRI.
  ContentHash content_hash = 1;
}

// ResolverInfo is the human-readable resolver information.
message ResolverInfo {
  // id is the ID of the resolver.
  uint64 id = 1;

  // url is the URL of the resolver.
  string url = 2;

  // manager is the address of the resolver manager.
  string manager = 3;
}
