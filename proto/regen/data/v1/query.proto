syntax = "proto3";

package regen.data.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "regen/data/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/data";

// Query is the regen.data.v1 Query service
service Query {

  // AnchorByIRI queries for anchored data by IRI.
  rpc AnchorByIRI(QueryAnchorByIRIRequest) returns (QueryAnchorByIRIResponse) {
    option (google.api.http) = {
      get : "/regen/data/v1/anchor-by-iri/{iri}"
      additional_bindings : [ {get : "/regen/data/v1/anchors/iri/{iri}"} ]
    };
  }

  // AnchorByHash queries for anchored data by ContentHash.
  rpc AnchorByHash(QueryAnchorByHashRequest)
      returns (QueryAnchorByHashResponse) {
    option (google.api.http) = {
      post : "/regen/data/v1/anchor-by-hash"
      body : "*"
      additional_bindings : [
        {post : "/regen/data/v1/anchors/hash" body : "*"}
      ]
    };
  }

  // AttestationsByAttestor queries for all attestations by attestor.
  rpc AttestationsByAttestor(QueryAttestationsByAttestorRequest)
      returns (QueryAttestationsByAttestorResponse) {
    option (google.api.http) = {
      get : "/regen/data/v1/attestations-by-attestor/{attestor}"
      additional_bindings : [
        {get : "/regen/data/v1/attestations/attestor/{attestor}"}
      ]
    };
  }

  // AttestationsByIRI queries for all attestations that have been made to
  // anchored data by the IRI of the anchored data.
  rpc AttestationsByIRI(QueryAttestationsByIRIRequest)
      returns (QueryAttestationsByIRIResponse) {
    option (google.api.http) = {
      get : "/regen/data/v1/attestations-by-iri/{iri}"
      additional_bindings : [ {get : "/regen/data/v1/attestations/iri/{iri}"} ]
    };
  }

  // AttestationsByHash queries for all attestations that have been made to
  // anchored data by the ContentHash of the anchored data.
  rpc AttestationsByHash(QueryAttestationsByHashRequest)
      returns (QueryAttestationsByHashResponse) {
    option (google.api.http) = {
      post : "/regen/data/v1/attestations-by-hash"
      body : "*"
      additional_bindings : [
        {post : "/regen/data/v1/attestations/hash" body : "*"}
      ]
    };
  }

  // Resolver queries for a resolver by the resolver identifier.
  rpc Resolver(QueryResolverRequest) returns (QueryResolverResponse) {
    option (google.api.http) = {
      get : "/regen/data/v1/resolver/{id}"
      additional_bindings : [ {get : "/regen/data/v1/resolvers/{id}"} ]
    };
  }

  // ResolversByIRI queries for all resolvers that have registered anchored data
  // by the IRI of the anchored data.
  rpc ResolversByIRI(QueryResolversByIRIRequest)
      returns (QueryResolversByIRIResponse) {
    option (google.api.http) = {
      get : "/regen/data/v1/resolvers-by-iri/{iri}"
      additional_bindings : [ {get : "/regen/data/v1/resolvers/iri/{iri}"} ]
    };
  }

  // ResolversByHash queries for all resolvers that have registered anchored
  // data by the ContentHash of the anchored data.
  rpc ResolversByHash(QueryResolversByHashRequest)
      returns (QueryResolversByHashResponse) {
    option (google.api.http) = {
      post : "/regen/data/v1/resolvers-by-hash"
      body : "*"
      additional_bindings : [
        {post : "/regen/data/v1/resolvers/hash" body : "*"}
      ]
    };
  }

  // ResolversByURL queries all resolvers by the resolver URL.
  rpc ResolversByURL(QueryResolversByURLRequest)
      returns (QueryResolversByURLResponse) {
    option (google.api.http) = {
      post : "/regen/data/v1/resolvers-by-url"
      body : "*"
      additional_bindings : [
        {post : "/regen/data/v1/resolvers/url" body : "*"}
      ]
    };
  }

  // ConvertIRIToHash converts an IRI to a ContentHash.
  rpc ConvertIRIToHash(ConvertIRIToHashRequest)
      returns (ConvertIRIToHashResponse) {
    option (google.api.http).get = "/regen/data/v1/iri-to-hash/{iri}";
  }

  // ConvertHashToIRI converts a ContentHash to an IRI.
  rpc ConvertHashToIRI(ConvertHashToIRIRequest)
      returns (ConvertHashToIRIResponse) {
    option (google.api.http) = {
      post : "/regen/data/v1/hash-to-iri"
      body : "*"
    };
  }
}

// QueryAnchorByIRIRequest is the Query/AnchorByIRI request type.
message QueryAnchorByIRIRequest {

  // iri is the IRI of the anchored data.
  string iri = 1;
}

// QueryAnchorByIRIResponse is the Query/AnchorByIRI response type.
message QueryAnchorByIRIResponse {

  // anchor is information about the anchored data.
  AnchorInfo anchor = 1;
}

// QueryAnchorByHashRequest is the Query/AnchorByHash request type.
message QueryAnchorByHashRequest {

  // content_hash is the ContentHash of the anchored data.
  ContentHash content_hash = 1;
}

// QueryAnchorByHashResponse is the Query/AnchorByHash response type.
message QueryAnchorByHashResponse {

  // anchor is information about the anchored data.
  AnchorInfo anchor = 1;
}

// QueryAttestationsByAttestorRequest is the Query/AttestationsByAttestor
// request type.
message QueryAttestationsByAttestorRequest {

  // attestor is the address of the attestor.
  string attestor = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAttestationsByAttestorResponse is the Query/AttestationsByAttestor
// response type.
message QueryAttestationsByAttestorResponse {

  // attestations are the attestations by the attestor.
  repeated AttestationInfo attestations = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAttestationsByIRIRequest is the Query/AttestationsByIRI request type.
message QueryAttestationsByIRIRequest {

  // iri is the IRI of the anchored data.
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAttestationsByIRIResponse is the Query/AttestationsByIRI response type.
message QueryAttestationsByIRIResponse {

  // attestations are the attestations to the anchored data.
  repeated AttestationInfo attestations = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAttestationsByHashRequest is the Query/AttestationsByHash request type.
message QueryAttestationsByHashRequest {

  // content_hash is the ContentHash of the anchored data.
  ContentHash content_hash = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAttestationsByHashResponse is the Query/AttestationsByHash response
// type.
message QueryAttestationsByHashResponse {

  // attestations are the attestations to the anchored data.
  repeated AttestationInfo attestations = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolverRequest is the Query/Resolver request type.
message QueryResolverRequest {

  // id is the ID of the resolver.
  uint64 id = 1;
}

// QueryResolverResponse is the Query/Resolver response type.
message QueryResolverResponse {

  // resolver is the fetched resolver.
  ResolverInfo resolver = 1;
}

// QueryResolversByIRIRequest is the Query/ResolversByIRI request type.
message QueryResolversByIRIRequest {

  // iri is the IRI of the anchored data.
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversByIRIResponse is the Query/ResolversByIRI response type.
message QueryResolversByIRIResponse {

  // resolvers are the resolvers that have registered the anchored data.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByHashRequest is the Query/ResolversByHash request type.
message QueryResolversByHashRequest {

  // content_hash is the ContentHash of the anchored data.
  ContentHash content_hash = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversByHashResponse is the Query/ResolversByHash response type.
message QueryResolversByHashResponse {

  // resolvers are the resolvers that have registered the data.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByURLRequest is the Query/Resolver request type.
message QueryResolversByURLRequest {

  // url is the URL of the resolver.
  string url = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversByURLResponse is the Query/Resolver response type.
message QueryResolversByURLResponse {

  // resolvers are the fetched resolvers.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ConvertIRIToHashRequest is the Query/ConvertIRIToHash request type.
message ConvertIRIToHashRequest {

  // iri is the IRI to convert to a ContentHash.
  string iri = 1;
}

// ConvertIRIToHashResponse is the Query/ConvertIRIToHash response type.
message ConvertIRIToHashResponse {

  // content_hash is the ContentHash converted from the IRI.
  ContentHash content_hash = 1;
}

// ConvertHashToIRIRequest is the Query/ConvertHashToIRI request type.
message ConvertHashToIRIRequest {

  // content_hash is the ContentHash to convert to an IRI.
  ContentHash content_hash = 1;
}

// ConvertHashToIRIResponse is the Query/ConvertHashToIRI response type.
message ConvertHashToIRIResponse {

  // iri is the IRI converted from the ContentHash.
  string iri = 1;
}

// AnchorInfo is the human-readable anchor information.
message AnchorInfo {

  // iri is the IRI of the anchored data.
  string iri = 1;

  // content_hash is the ContentHash of the anchored data.
  ContentHash content_hash = 2;

  // timestamp is the time at which the data was anchored.
  google.protobuf.Timestamp timestamp = 3;
}

// AttestationInfo is the human-readable attestation information.
message AttestationInfo {

  // iri is the IRI of the anchored data.
  string iri = 1;

  // attestor is the address of the account that attested to the anchored data.
  string attestor = 2;

  // timestamp is the time at which the data was attested to.
  google.protobuf.Timestamp timestamp = 3;
}

// ResolverInfo is the human-readable resolver information.
message ResolverInfo {

  // id is the ID of the resolver.
  uint64 id = 1;

  // url is the URL of the resolver.
  string url = 2;

  // manager is the address of the resolver manager.
  string manager = 3;
}
