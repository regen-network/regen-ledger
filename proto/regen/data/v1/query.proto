syntax = "proto3";

package regen.data.v1;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "regen/data/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/data";

// Query is the regen.data.v1 Query service
service Query {
  // AnchorEntryByIRI queries for an anchor entry by IRI.
  rpc AnchorEntryByIRI(QueryAnchorEntryByIRIRequest) returns (QueryAnchorEntryByIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/anchor-entry-by-iri/{iri}";
  }

  // AnchorEntryByContentHash queries for an anchor entry by content hash.
  rpc AnchorEntryByContentHash(QueryAnchorEntryByContentHashRequest) returns (QueryAnchorEntryByContentHashResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // AnchorEntriesByAttestor queries for all anchor entries attested to by a given attestor.
  rpc AnchorEntriesByAttestor(QueryAnchorEntriesByAttestorRequest) returns (QueryAnchorEntriesByAttestorResponse) {
    option (google.api.http).get = "/regen/data/v1/anchor-entry-by-attestor/{attestor}";
  }

  // ConvertContentHashToIRI converts a content hash to an IRI.
  rpc ConvertContentHashToIRI(ConvertContentHashToIRIRequest) returns (ConvertContentHashToIRIResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // ConvertContentHashRawToIRI converts raw content hash properties to an IRI.
  rpc ConvertContentHashRawToIRI(ConvertContentHashRawToIRIRequest) returns (ConvertContentHashRawToIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/convert-content-hash-raw-to-iri";
  }

  // ConvertContentHashGraphToIRI converts graph content hash properties to an IRI.
  rpc ConvertContentHashGraphToIRI(ConvertContentHashGraphToIRIRequest) returns (ConvertContentHashGraphToIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/convert-content-hash-graph-to-iri";
  }

  // ConvertIRIToContentHash converts an IRI to a content hash.
  rpc ConvertIRIToContentHash(ConvertIRIToContentHashRequest) returns (ConvertIRIToContentHashResponse) {
    option (google.api.http).get = "/regen/data/v1/convert-iri-to-content-hash/{iri}";
  }

  // AttestorEntriesByIRI queries for all attestor entries for an anchor entry by IRI.
  rpc AttestorEntriesByIRI(QueryAttestorEntriesByIRIRequest) returns (QueryAttestorEntriesByIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/attestor-entries-by-iri/{iri}";
  }

  // AttestorEntriesByContentHash queries for all attestor entries for an anchor entry by content hash.
  rpc AttestorEntriesByContentHash(QueryAttestorEntriesByContentHashRequest) returns (QueryAttestorEntriesByContentHashResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // Resolver queries for a resolver by resolver ID.
  rpc Resolver(QueryResolverRequest) returns (QueryResolverResponse) {
    option (google.api.http).get = "/regen/data/v1/resolver/{id}";
  }

  // ResolversByIRI queries for all resolvers that have registered an anchor entry by IRI.
  rpc ResolversByIRI(QueryResolversByIRIRequest) returns (QueryResolversByIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/resolvers-by-iri/{iri}";
  }

  // ResolversByContentHash queries for all resolvers that have registered an anchor entry by content hash.
  rpc ResolversByContentHash(QueryResolversByContentHashRequest) returns (QueryResolversByContentHashResponse) {
    // HTTP REST endpoint not supported with ContentHash
  }

  // ResolversByURL queries resolvers based on URL.
  rpc ResolversByURL(QueryResolversByURLRequest) returns (QueryResolversByURLResponse) {
    option (google.api.http).get = "/regen/data/v1/resolvers-by-url"; // URL must be passed as a parameter
  }
}

// QueryAnchorEntryByIRIRequest is the Query/ByIRI request type.
message QueryAnchorEntryByIRIRequest {
  // iri is the IRI for the anchored data.
  string iri = 1;
}

// QueryAnchorEntryByIRIResponse is the Query/ByHash response type.
message QueryAnchorEntryByIRIResponse {
  // entry is the ContentEntry for the anchored data.
  ContentEntry entry = 1; // TODO: AnchorEntry?
}

// QueryAnchorEntryByContentHashRequest is the Query/ByHash request type.
message QueryAnchorEntryByContentHashRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;
}

// QueryAnchorEntryByContentHashResponse is the Query/ByHash response type.
message QueryAnchorEntryByContentHashResponse {
  // entry is the ContentEntry for the anchored data.
  ContentEntry entry = 1;
}

// QueryAnchorEntriesByAttestorRequest is the Query/AnchorEntriesByAttestor request type.
message QueryAnchorEntriesByAttestorRequest {
  // attestor is the address of the attestor.
  string attestor = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAnchorEntriesByAttestorResponse is the Query/AnchorEntriesByAttestor response type.
message QueryAnchorEntriesByAttestorResponse {
  // entries are the ContentEntries attested to by the attestor.
  repeated ContentEntry entries = 1; // TODO: AnchorEntry?

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ConvertContentHashToIRIRequest is the Query/ConvertContentHashToIRI request type.
message ConvertContentHashToIRIRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;
}

// ConvertContentHashToIRIResponse is the Query/ConvertContentHashToIRI response type.
message ConvertContentHashToIRIResponse {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertContentHashRawToIRIRequest is the Query/ConvertContentHashRawToIRI request type.
message ConvertContentHashRawToIRIRequest {
  // hash represents the hash of the data based on the digest_algorithm and must
  // be encoded as a base64 string. When hash is provided as a URL parameter,
  // all instances of "+" should also be replaced with "%2b".
  string hash = 1;

  // digest_algorithm represents the hash digest algorithm.
  DigestAlgorithm digest_algorithm = 2;

  // media_type represents the media type for raw data.
  RawMediaType media_type = 3;
}

// ConvertContentHashRawToIRIResponse is the Query/ConvertContentHashRawToIRI response type.
message ConvertContentHashRawToIRIResponse {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertContentHashGraphToIRIRequest is the Query/ConvertContentHashGraphToIRI request type.
message ConvertContentHashGraphToIRIRequest {
  // hash represents the hash of the data based on the digest_algorithm and must
  // be encoded as a base64 string. When hash is provided as a URL parameter,
  // all instances of "+" should also be replaced with "%2b".
  string hash = 1;

  // digest_algorithm represents the hash digest algorithm.
  DigestAlgorithm digest_algorithm = 2;

  // graph_canonicalization_algorithm represents the RDF graph
  // canonicalization algorithm.
  GraphCanonicalizationAlgorithm canonicalization_algorithm = 3;

  // merkle_tree is the merkle tree type used for the graph hash, if any.
  GraphMerkleTree merkle_tree = 4;
}

// ConvertContentHashGraphToIRIResponse is the Query/ConvertContentHashGraphToIRI response type.
message ConvertContentHashGraphToIRIResponse {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertIRIToContentHashRequest is the Query/ConvertIRIToContentHash request type.
message ConvertIRIToContentHashRequest {
  // iri is the IRI for the content hash.
  string iri = 1;
}

// ConvertIRIToContentHashResponse is the Query/ConvertIRIToContentHash response type.
message ConvertIRIToContentHashResponse {
  // content_hash is the ContentHash for the IRI.
  ContentHash content_hash = 1;
}

// QueryAttestorEntriesByIRIRequest is the Query/AttestorEntriesByIRI request type.
message QueryAttestorEntriesByIRIRequest {
  // iri is the IRI for the anchored data.
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAttestorEntriesByIRIResponse is the Query/AttestorEntriesByIRI response type.
message QueryAttestorEntriesByIRIResponse {
  // attestors are the addresses of the attestors.
  repeated string attestors = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAttestorEntriesByContentHashRequest is the Query/AttestorEntriesByContentHash request type.
message QueryAttestorEntriesByContentHashRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAttestorEntriesByContentHashResponse is the Query/AttestorEntriesByContentHash response type.
message QueryAttestorEntriesByContentHashResponse {
  // attestors are the addresses of the attestors.
  repeated string attestors = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByIRIRequest is the Query/ResolversByIRI request type.
message QueryResolversByIRIRequest {
  // iri is the IRI for the anchored data.
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolverRequest is the Query/Resolver request type.
message QueryResolverRequest {
  // id is the ID of the resolver.
  uint64 id = 1;
}

// QueryResolverResponse is the Query/Resolver response type.
message QueryResolverResponse {
  // resolver is the fetched resolver.
  ResolverInfo resolver = 1;
}

// QueryResolversByIRIResponse is the Query/ResolversByIRI response type.
message QueryResolversByIRIResponse {
  // resolvers are the resolvers that have registered the data.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByContentHashRequest is the Query/ResolversByContentHash request type.
message QueryResolversByContentHashRequest {
  // content_hash is the ContentHash for the anchored data.
  ContentHash content_hash = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversByContentHashResponse is the Query/ResolversByContentHash response type.
message QueryResolversByContentHashResponse {
  // resolvers are the resolvers that have registered the data.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversByURLRequest is the Query/Resolver request type.
message QueryResolversByURLRequest {
  // url is the resolver URL that has been registered.
  string url = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversByURLResponse is the Query/Resolver response type.
message QueryResolversByURLResponse {
  // resolvers are the fetched resolvers.
  repeated ResolverInfo resolvers = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ResolverInfo is the human-readable resolver information.
message ResolverInfo {
  // id is the ID of the resolver.
  uint64 id = 1;

  // url is the URL of the resolver.
  string url = 2;

  // manager is the address of the resolver manager.
  string manager = 3;
}
