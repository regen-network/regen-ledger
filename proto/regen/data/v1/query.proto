syntax = "proto3";

package regen.data.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "regen/data/v1/types.proto";

option go_package = "github.com/regen-network/regen-ledger/x/data";

// Query is the regen.data.v1 Query service
service Query {
  // ByHash queries data based on its ContentHash.
  rpc ByIRI (QueryByIRIRequest) returns (QueryByIRIResponse) {
    option (google.api.http).get = "/regen/data/v1/by-iri/{iri}";
  }

  // BySigner queries data based on signers.
  rpc BySigner (QueryBySignerRequest) returns (QueryBySignerResponse) {
    option (google.api.http).get = "/regen/data/v1/by-signer/{signer}";
  }

  // Signers queries signers based on IRI.
  rpc Signers(QuerySignersRequest) returns (QuerySignersResponse) {
    option (google.api.http).get = "/regen/data/v1/signers/{iri}";
  }

  // Resolvers returns the registered resolver URLs for the data IRI.
  rpc Resolvers(QueryResolversRequest) returns (QueryResolversResponse) {
    option (google.api.http).get = "/regen/data/v1/resolvers/{iri}";
  }

  // ResolverInfo returns information about a resolver.
  rpc ResolverInfo(QueryResolverInfoRequest) returns (QueryResolverInfoResponse) {
    option (google.api.http).get = "/regen/data/v1/resolver";
  }
}

// QueryByContentHashRequest is the Query/ByContentHash request type.
message QueryByIRIRequest {
  // hash is the hash-based identifier for the anchored content.
  string iri = 1;
}

// QueryByContentHashResponse is the Query/ByContentHash response type.
message QueryByIRIResponse {
  // entry is the ContentEntry
  ContentEntry entry = 1;
}

// QueryBySignerRequest is the Query/BySigner request type.
message QueryBySignerRequest {
  // signer is the address of the signer to query by.
  string signer = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBySignerResponse is the Query/BySigner response type.
message QueryBySignerResponse {
  // entries is the ContentEntry's signed by the queried signer
  repeated ContentEntry entries = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// ContentEntry describes data referenced and possibly stored on chain
message ContentEntry {
  // hash is the content hash
  ContentHash hash = 1;

  // iri is the content IRI
  string iri = 2;

  // timestamp is the anchor Timestamp
  google.protobuf.Timestamp timestamp = 3;
}

// QuerySignersRequest is the Query/Signers request type.
message QuerySignersRequest {
  // iri is the content IRI
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySignersResponse is the Query/Signers response type.
message QuerySignersResponse {
  // signers are the addresses of the signers.
  repeated string signers = 1;

  // pagination is the pagination PageResponse.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolversRequest is the Query/Resolvers request type.
message QueryResolversRequest {
  // iri is the content IRI
  string iri = 1;

  // pagination is the PageRequest to use for pagination.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryResolversResponse is the Query/Resolvers response type.
message QueryResolversResponse {
  // resolver_urls are the resolver URLs that have been registered for this
  // data object.
  repeated string resolver_urls = 1;

  // pagination is the PageResponse to use for pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryResolverInfoRequest is the Query/ResolverInfo request type.
message QueryResolverInfoRequest {
  // url is the URL of the resolver to query.
  string url = 1;
}

// QueryResolverInfoResponse is the Query/ResolverInfo response type.
message QueryResolverInfoResponse {
  // id is the id of the resolver which can be used in Msg/RegisterResolver.
  uint64 id = 1;

  // manager is the bech32 account address of the resolver manager.
  string manager = 2;
}
