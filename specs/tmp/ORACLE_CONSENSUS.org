* Function Types
** Comment Elements
*** Input and Output Schema
**** Shacl
**** Shex
** Sparql
*** CONSTRUCT
*** ASK
** Docker
*** Dependencies
**** Other compute functions
**** Sparql
**** Sentinel-2
* Consensus Protocol
** Function Invocation
** Function Invocation Request
** Oracle Pool Contract
** Execution Results
** Round Structure
*** Select Oracle
When a compute function invocation is requested against an oracle pool, the first oracle to run the contract is chosen at
random based on the result of the block hash in which the request is transacted. Given an array of ~N~ oracles in an
oracle pool we select the array of the ~M~ oracles which have not been elected to compute this function invocation yet,
maintaining the original array order and call this resulting array the selection pool. The selected oracle is the ~i~'th
oracle in the selection pool array where $i = blockHash \bmod{M}$. A tag alerting the oracle that it has been
selected for this round may be attached to the next block or this information may simply stored in the appropriate index (TODO).
*** Commit Result
Once the selected oracle has completed the requested computation 
**** Handling Timeouts
The oracle pool contract for the given function will include a timeout window. If the selected oracle cannot complete the
result in the specified timeout window, it should post a heartbeat message before the timeout block and TODO.
If the selected oracle fails to commit a result at all before the end of the timeout window, another oracle will be chosen
at random and the original selection oracle will be marked as unavailable and scheduled for its bond to be slashed accordingly,
unless, of course, all requested oracles timeout in which the curator of the function will be slashed for improper function
implementation.
*** Select Next Oracle or Finish Commit
*** Share Results
*** Vote
*** Consensus, Resolution Round or Failure
