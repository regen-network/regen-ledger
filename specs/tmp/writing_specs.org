#+TITLE: Writing Specification Documents

* Overview and Goals

  This document describes guidelines for writing specification documents. These documents are intended to serve the following purposes:

- provide the necessary structure to discuss designs while they are in progress before they are built
- provide the blueprints for developers to implement the specified functionality
- serve as documentation once functionality has been implemented

With these three purposes in mind, specification documents are designed to be useful before, during, and after development. They are intended to be living documents that are upgraded as new use cases are discovered and as the actual implementation changes.

* General

** Specifications are written in [[https://orgmode.org][Org Mode]] format
   *Rationale:* While org mode is less ubiquitous than Markdown and most well supported in Emacs (though not exclusively), it has some advantages. In particular, we want to leverage Org Babel tangling to keep interface level code in the specification document itself and then have it generated into code. In addition, org mode provides a number of other potentially useful features such as integrated Latex and bibliography support and is in general well supported by Github and Gitlab. Overall it is believed that  the benefits, in particular Org Babel, outweigh the learning curve compared to Markdown.

** Specifications should indicate the implementation status of the specified functionality
   As specifications are intended to be living documents that are useful both before and after functionality has been implemented, and as they are intended to be upgraded as new functionality is planned and added, they should indicate the actual implementation status. Status should be indicated under the title using *STATUS:* with one of the following three states:

   - *In Process* to indicate that a specification is being worked on
   - *Approved* indicating that a specification has discussed and consensus has been achieved amongst the team
   - *Implemented* indicating that the specification reflects the state of the actual code and can thus be used as documentation
   
   Whenever a specification is out-of-sync with the actual code, a message indicating this can be included next to the status such as "(out of sync with implementation)" to indicate that there is some implementation that differs from this spec. Maintainers should aim not to tag any commit as a release that is out of sync with the implementation because then the documentation is messed up.

* Organization
  Specification documents are to be written for both components and modules. In this context components are defined as individual software artifacts in the build process whereas modules are specific modules specified in Regen Ledger.
  
** TODO there should be a root spec file or "table of contents" in the `docs/` folder

* Component Specifications
  Each component (defined as an independent build artifact or separate running process) should have its own ~README.org~ file. We expect have the following components so far:
  * Server
    * ~regen~ blockchain node
    * Postgis index of blockchain data
    * Jena index of blockchain data
  * Client
    * ~regen~ blockchain client. (Documentation shouldn't duplicate what is available in CLI help)
    * Mobile client SDK's - javascript, android, iOS
  
* Regen Ledger Module Specifications
  Each module in Regen Ledger should have a ~README.org~ document at the root of its folder. This file should contain at a minimum the following sections:

** Overview
   This section describes what the module does at a high-level and includes the definition of any pertinent terms as a source of truth for clarity across the team.

** Motivation
   The motivation section should document why this module ever came into being. What use cases where considered that led to this module being created. Where possible this section should link to other use case and requirements documentation.
   
** Transaction Messages and Types
   This section defines the public-facing interface for making blockchain transactions. These are the Cosmos SDK messages and other related types that an SDK consumer will use to interact with the module transactionally. Each transaction message as well as important shared types should be documented in a separate section which describes:
   - what this message/type does
   - any important behavioral notes for both implementers and users
   - transaction fees and their rationale
   - what ~Tags~ and/or ~Data~ to expect in the transaction response
    
*** Org Babel source code
    The code for each message/type should be specified in an [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]] code block that gets tangled into ~types.go~. In the preamble to the ~README.org~ file code block (usually with ~:exports none~) should specify a preamble to ~types.go~ that looks something like this (this code block can and should be used as a snippet to start from):

#+BEGIN_SRC go :tangle types.go :exports none
  /* GENERATED FROM README.org
     DO NOT EDIT THIS FILE DIRECTLY!!!!! */
  package data

  import (
    sdk "github.com/cosmos/cosmos-sdk/types"
  )
#+END_SRC

** Identifiers
   
   Any identifiers such as blockchain addresses and URL's related to this module should be specified in this section.

** Indexing and Queries
   The projection of module data module to indexes (like Postgresql) as well as queries that should be supported directly against the blockchain should be specified here at a level of rigor comparable to the *Transaction Messages and Types* specifications, including Org Babel code blocks to be tangled into ~types.go~ or other relevant source code files (like SQL schema definitions).

** Rationale
   The rationale for why the implementation described above was chosen should be documented in this section. Where necessary a *Rationale:* paragraph should be included inline in other sections to provide clarity on more specific behavioral choices.

** CLI Tutorial (optional)
   A tutorial walk-through of using the module using the ~regen~ command line tool.

* Tests Specifications (experimental)
  Test specifications can be written in the [[https://docs.cucumber.io/gherkin/][Gherkin]] syntax in ~.feature~ files or as Org Babel in ~README.org~, but ~.feature~ files are preferred for the long term as Gherkin isn't so pretty in documentation. A suitable BDD testing framework such as [[https://cucumber.io][Cucumber]] or [[https://github.com/DATA-DOG/godog][godog]] should be used to execute the specifications. Gherkin specs SHOULD ALWAYS be written by developers and reviewed by the product team and NEVER by developers in isolation. Gherkin-based tests should not be a replacement for other more comprehensive tests that ensure program correctness. Their primary purpose is to serve as a communication tool for aligning product and design. Please read this comment by the creator of Cucumber: https://news.ycombinator.com/item?id=10194242. This is also helpful to give context: http://blog.jonasbandi.net/2010/03/classifying-bdd-tools-unit-test-driven.html.
