// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/data/v2/tx.proto

package data

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAnchor is the Msg/Anchor request type.
type MsgAnchor struct {
	// sender is the address of the sender of the transaction. The sender in
	// Anchor is not attesting to the veracity of the underlying data. They
	// can simply be an intermediary providing services.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// content_hash is the content hash for the data to anchor.
	ContentHash *ContentHash `protobuf:"bytes,2,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
}

func (m *MsgAnchor) Reset()         { *m = MsgAnchor{} }
func (m *MsgAnchor) String() string { return proto.CompactTextString(m) }
func (*MsgAnchor) ProtoMessage()    {}
func (*MsgAnchor) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{0}
}
func (m *MsgAnchor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAnchor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAnchor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAnchor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAnchor.Merge(m, src)
}
func (m *MsgAnchor) XXX_Size() int {
	return m.Size()
}
func (m *MsgAnchor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAnchor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAnchor proto.InternalMessageInfo

func (m *MsgAnchor) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAnchor) GetContentHash() *ContentHash {
	if m != nil {
		return m.ContentHash
	}
	return nil
}

// MsgAnchor is the Msg/Anchor response type.
type MsgAnchorResponse struct {
	// iri is the IRI of the data that was anchored.
	Iri string `protobuf:"bytes,1,opt,name=iri,proto3" json:"iri,omitempty"`
	// timestamp is the time at which the data was anchored.
	Timestamp *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *MsgAnchorResponse) Reset()         { *m = MsgAnchorResponse{} }
func (m *MsgAnchorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAnchorResponse) ProtoMessage()    {}
func (*MsgAnchorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{1}
}
func (m *MsgAnchorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAnchorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAnchorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAnchorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAnchorResponse.Merge(m, src)
}
func (m *MsgAnchorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAnchorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAnchorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAnchorResponse proto.InternalMessageInfo

func (m *MsgAnchorResponse) GetIri() string {
	if m != nil {
		return m.Iri
	}
	return ""
}

func (m *MsgAnchorResponse) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// MsgAttest is the Msg/Attest request type.
type MsgAttest struct {
	// attestor is the addresses of the account attesting to the veracity of the
	// data. By making an Attest request, the attestor is attesting to the
	// veracity of the data referenced by the IRI. The precise meaning of this may
	// vary depending on the underlying data.
	Attestor string `protobuf:"bytes,1,opt,name=attestor,proto3" json:"attestor,omitempty"`
	// content_hashes are the content hashes for anchored data. Only RDF graph
	// data can be signed as its data model is intended to specifically convey
	// semantic meaning.
	ContentHashes []*ContentHash_Graph `protobuf:"bytes,2,rep,name=content_hashes,json=contentHashes,proto3" json:"content_hashes,omitempty"`
}

func (m *MsgAttest) Reset()         { *m = MsgAttest{} }
func (m *MsgAttest) String() string { return proto.CompactTextString(m) }
func (*MsgAttest) ProtoMessage()    {}
func (*MsgAttest) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{2}
}
func (m *MsgAttest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttest.Merge(m, src)
}
func (m *MsgAttest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttest proto.InternalMessageInfo

func (m *MsgAttest) GetAttestor() string {
	if m != nil {
		return m.Attestor
	}
	return ""
}

func (m *MsgAttest) GetContentHashes() []*ContentHash_Graph {
	if m != nil {
		return m.ContentHashes
	}
	return nil
}

// MsgAttestResponse is the Msg/Attest response type.
type MsgAttestResponse struct {
	// iris are the IRIs of the data that was attested to. If the attestor attests
	// to the same piece of data, the previous attestation will not be updated and
	// the IRI will not be included in this list.
	Iris []string `protobuf:"bytes,1,rep,name=iris,proto3" json:"iris,omitempty"`
	// timestamp is the time at which any new attestations were made.
	Timestamp *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *MsgAttestResponse) Reset()         { *m = MsgAttestResponse{} }
func (m *MsgAttestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAttestResponse) ProtoMessage()    {}
func (*MsgAttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{3}
}
func (m *MsgAttestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttestResponse.Merge(m, src)
}
func (m *MsgAttestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttestResponse proto.InternalMessageInfo

func (m *MsgAttestResponse) GetIris() []string {
	if m != nil {
		return m.Iris
	}
	return nil
}

func (m *MsgAttestResponse) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// MsgDefineResolver is the Msg/DefineResolver request type.
type MsgDefineResolver struct {
	// definer is the address of the account defining the resolver. If
	// the boolean public is set to true, then any user can register
	// data with this resolver. If the boolean public is set to false,
	// then only the definer can register data with this resolver and
	// must use a feature such as cosmos.authz to authorize other accounts
	// to register data with this resolver.
	Definer string `protobuf:"bytes,1,opt,name=definer,proto3" json:"definer,omitempty"`
	// resolver_url is a resolver URL.
	//
	// If it refers to an HTTP URL, that HTTP service should
	// respond to a GET request with the IRI of a ContentHash as the path parameter
	// and return the content if it exists or a 404. For graph data, resolvers
	// should use the HTTP Accept header to negotiate the RDF serialization
	// format.
	//
	// To use IPFS, the resolver_url ipfs: should be defined with public set to true
	// and used as the resolver for any data hosted on IPFS. Content hashes must be
	// adapted to IPFS's CID format. The multicodec raw (0x55) should
	// be used for all raw content hashes and the multicodec rdfc-1 (0xb403)
	// should be used for all graph content hashes (unless new canonicalization
	// or merkle tree algorithms are used which may or may not be supported
	// by IPFS). Note that IPFS's tools currently do not support creating or
	// resolving RDFC-1 content hashes so upstream work will be needed for
	// that integration to be fully supported.
	ResolverUrl string `protobuf:"bytes,2,opt,name=resolver_url,json=resolverUrl,proto3" json:"resolver_url,omitempty"`
	// public is a boolean indicating whether the resolver is public or not.
	// If public is false then only the definer can register data with this
	// resolver.
	Public bool `protobuf:"varint,3,opt,name=public,proto3" json:"public,omitempty"`
}

func (m *MsgDefineResolver) Reset()         { *m = MsgDefineResolver{} }
func (m *MsgDefineResolver) String() string { return proto.CompactTextString(m) }
func (*MsgDefineResolver) ProtoMessage()    {}
func (*MsgDefineResolver) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{4}
}
func (m *MsgDefineResolver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDefineResolver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDefineResolver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDefineResolver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDefineResolver.Merge(m, src)
}
func (m *MsgDefineResolver) XXX_Size() int {
	return m.Size()
}
func (m *MsgDefineResolver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDefineResolver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDefineResolver proto.InternalMessageInfo

func (m *MsgDefineResolver) GetDefiner() string {
	if m != nil {
		return m.Definer
	}
	return ""
}

func (m *MsgDefineResolver) GetResolverUrl() string {
	if m != nil {
		return m.ResolverUrl
	}
	return ""
}

func (m *MsgDefineResolver) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

// MsgDefineResolverResponse is the Msg/DefineResolver response type.
type MsgDefineResolverResponse struct {
	// resolver_id is the integer ID of the resolver to be used in
	// MsgRegisterResolver.
	ResolverId uint64 `protobuf:"varint,1,opt,name=resolver_id,json=resolverId,proto3" json:"resolver_id,omitempty"`
}

func (m *MsgDefineResolverResponse) Reset()         { *m = MsgDefineResolverResponse{} }
func (m *MsgDefineResolverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDefineResolverResponse) ProtoMessage()    {}
func (*MsgDefineResolverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{5}
}
func (m *MsgDefineResolverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDefineResolverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDefineResolverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDefineResolverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDefineResolverResponse.Merge(m, src)
}
func (m *MsgDefineResolverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDefineResolverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDefineResolverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDefineResolverResponse proto.InternalMessageInfo

func (m *MsgDefineResolverResponse) GetResolverId() uint64 {
	if m != nil {
		return m.ResolverId
	}
	return 0
}

// MsgRegisterResolver is the Msg/RegisterResolver request type.
type MsgRegisterResolver struct {
	// signer is the address registering data with the resolver. If
	// the resolver is not public then the signer must be the definer
	// of the resolver.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// resolver_id is the ID of a resolver defined with Msg/DefineResolver.
	ResolverId uint64 `protobuf:"varint,2,opt,name=resolver_id,json=resolverId,proto3" json:"resolver_id,omitempty"`
	// content_hashes is a list of content hashes which the resolver claims to
	// serve.
	ContentHashes []*ContentHash `protobuf:"bytes,3,rep,name=content_hashes,json=contentHashes,proto3" json:"content_hashes,omitempty"`
}

func (m *MsgRegisterResolver) Reset()         { *m = MsgRegisterResolver{} }
func (m *MsgRegisterResolver) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterResolver) ProtoMessage()    {}
func (*MsgRegisterResolver) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{6}
}
func (m *MsgRegisterResolver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterResolver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterResolver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterResolver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterResolver.Merge(m, src)
}
func (m *MsgRegisterResolver) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterResolver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterResolver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterResolver proto.InternalMessageInfo

func (m *MsgRegisterResolver) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRegisterResolver) GetResolverId() uint64 {
	if m != nil {
		return m.ResolverId
	}
	return 0
}

func (m *MsgRegisterResolver) GetContentHashes() []*ContentHash {
	if m != nil {
		return m.ContentHashes
	}
	return nil
}

// MsgRegisterResolverResponse is the Msg/RegisterResolver response type.
type MsgRegisterResolverResponse struct {
}

func (m *MsgRegisterResolverResponse) Reset()         { *m = MsgRegisterResolverResponse{} }
func (m *MsgRegisterResolverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterResolverResponse) ProtoMessage()    {}
func (*MsgRegisterResolverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_322407e7af703c0f, []int{7}
}
func (m *MsgRegisterResolverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterResolverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterResolverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterResolverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterResolverResponse.Merge(m, src)
}
func (m *MsgRegisterResolverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterResolverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterResolverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterResolverResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAnchor)(nil), "regen.data.v2.MsgAnchor")
	proto.RegisterType((*MsgAnchorResponse)(nil), "regen.data.v2.MsgAnchorResponse")
	proto.RegisterType((*MsgAttest)(nil), "regen.data.v2.MsgAttest")
	proto.RegisterType((*MsgAttestResponse)(nil), "regen.data.v2.MsgAttestResponse")
	proto.RegisterType((*MsgDefineResolver)(nil), "regen.data.v2.MsgDefineResolver")
	proto.RegisterType((*MsgDefineResolverResponse)(nil), "regen.data.v2.MsgDefineResolverResponse")
	proto.RegisterType((*MsgRegisterResolver)(nil), "regen.data.v2.MsgRegisterResolver")
	proto.RegisterType((*MsgRegisterResolverResponse)(nil), "regen.data.v2.MsgRegisterResolverResponse")
}

func init() { proto.RegisterFile("regen/data/v2/tx.proto", fileDescriptor_322407e7af703c0f) }

var fileDescriptor_322407e7af703c0f = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0xd3, 0x3e,
	0x1c, 0x5e, 0x9a, 0x69, 0xff, 0xd5, 0x6d, 0xa7, 0xfd, 0x8d, 0x34, 0xb2, 0x20, 0xb2, 0x90, 0x53,
	0x34, 0x41, 0x22, 0xca, 0x05, 0x55, 0x70, 0x18, 0x4c, 0x0c, 0x0e, 0xbd, 0x44, 0x70, 0x41, 0x48,
	0x55, 0x9a, 0x78, 0x8e, 0x45, 0x1a, 0x47, 0xb6, 0x5b, 0xc6, 0x09, 0x89, 0x27, 0xe0, 0x09, 0x78,
	0x06, 0x1e, 0x83, 0xe3, 0x24, 0x2e, 0x1c, 0x51, 0x7b, 0xe0, 0x35, 0x50, 0x9c, 0xc4, 0x6b, 0xd3,
	0x8e, 0x1d, 0x38, 0xd5, 0xdf, 0xcf, 0x9f, 0xbf, 0xcf, 0x5f, 0x7f, 0x3f, 0x07, 0x1c, 0x30, 0x84,
	0x51, 0xe6, 0xc7, 0xa1, 0x08, 0xfd, 0x59, 0xdf, 0x17, 0x17, 0x5e, 0xce, 0xa8, 0xa0, 0xb0, 0x27,
	0xeb, 0x5e, 0x51, 0xf7, 0x66, 0x7d, 0xf3, 0x76, 0x44, 0xf9, 0x84, 0x72, 0x7f, 0xc2, 0xb1, 0x3f,
	0x7b, 0x58, 0xfc, 0x94, 0x3c, 0xf3, 0x08, 0x53, 0x8a, 0x53, 0xe4, 0x4b, 0x34, 0x9e, 0x9e, 0xfb,
	0x82, 0x4c, 0x10, 0x17, 0xe1, 0x24, 0xaf, 0x08, 0x87, 0x0d, 0x83, 0x8f, 0x39, 0xe2, 0xe5, 0x96,
	0x43, 0x41, 0x7b, 0xc8, 0xf1, 0x49, 0x16, 0x25, 0x94, 0xc1, 0x03, 0xb0, 0xc3, 0x51, 0x16, 0x23,
	0x66, 0x68, 0xb6, 0xe6, 0xb6, 0x83, 0x0a, 0xc1, 0xa7, 0xa0, 0x1b, 0xd1, 0x4c, 0xa0, 0x4c, 0x8c,
	0x92, 0x90, 0x27, 0x46, 0xcb, 0xd6, 0xdc, 0x4e, 0xdf, 0xf4, 0x56, 0xee, 0xe7, 0x3d, 0x2f, 0x29,
	0x2f, 0x43, 0x9e, 0x04, 0x9d, 0xe8, 0x0a, 0x0c, 0x3a, 0x9f, 0x7f, 0x7f, 0x3b, 0xae, 0xb4, 0x9c,
	0x11, 0xf8, 0x5f, 0x19, 0x06, 0x88, 0xe7, 0x34, 0xe3, 0x08, 0xee, 0x03, 0x9d, 0x30, 0x52, 0xb9,
	0x16, 0x4b, 0xf8, 0x18, 0xb4, 0x55, 0x0a, 0xe5, 0x57, 0xe6, 0xf4, 0xea, 0x9c, 0xde, 0xeb, 0x9a,
	0x11, 0x5c, 0x91, 0x9d, 0x4f, 0x65, 0x22, 0x21, 0x10, 0x17, 0xd0, 0x04, 0xbb, 0xa1, 0x5c, 0xd1,
	0x3a, 0x93, 0xc2, 0xf0, 0x0c, 0xec, 0x2d, 0xa7, 0x42, 0xdc, 0x68, 0xd9, 0xba, 0xdb, 0xe9, 0xdb,
	0xd7, 0xe7, 0xf2, 0xce, 0x58, 0x98, 0x27, 0x41, 0x6f, 0x29, 0x1d, 0xe2, 0x83, 0x5e, 0x91, 0x4f,
	0xe9, 0x3a, 0x61, 0x99, 0x50, 0x42, 0x95, 0x10, 0x82, 0x6d, 0xc2, 0x08, 0x37, 0x34, 0x5b, 0x77,
	0xdb, 0x81, 0x5c, 0xff, 0x43, 0xc6, 0x99, 0xb4, 0x38, 0x45, 0xe7, 0x24, 0x43, 0x01, 0xe2, 0x34,
	0x9d, 0x21, 0x06, 0x0d, 0xf0, 0x5f, 0x2c, 0x2b, 0x75, 0xd4, 0x1a, 0xc2, 0x7b, 0xa0, 0xcb, 0x2a,
	0xd6, 0x68, 0xca, 0x52, 0xe9, 0xd5, 0x0e, 0x3a, 0x75, 0xed, 0x0d, 0x4b, 0x8b, 0xd6, 0xe7, 0xd3,
	0x71, 0x4a, 0x22, 0x43, 0xb7, 0x35, 0x77, 0x37, 0xa8, 0xd0, 0xa0, 0x5b, 0x64, 0xab, 0x85, 0x9c,
	0x27, 0xe0, 0x70, 0xcd, 0x57, 0x45, 0x3c, 0x02, 0x4a, 0x71, 0x44, 0x62, 0x79, 0x87, 0xed, 0x00,
	0xd4, 0xa5, 0x57, 0xb1, 0xf3, 0x55, 0x03, 0xb7, 0x86, 0x1c, 0x07, 0x08, 0x13, 0x2e, 0xe4, 0xc1,
	0xf2, 0xe2, 0xc5, 0xd8, 0x11, 0x9c, 0x2d, 0x8d, 0x9d, 0x44, 0x4d, 0xc1, 0x56, 0x53, 0x10, 0x9e,
	0xac, 0x75, 0x50, 0x97, 0x1d, 0xfc, 0xdb, 0x64, 0x36, 0x7a, 0x57, 0xcd, 0xa6, 0x34, 0x74, 0xee,
	0x82, 0x3b, 0x1b, 0xee, 0x57, 0x07, 0xec, 0xff, 0x68, 0x01, 0x7d, 0xc8, 0x31, 0x3c, 0x05, 0x3b,
	0xd5, 0x83, 0x31, 0x1a, 0x46, 0x6a, 0xb2, 0x4d, 0xfb, 0xba, 0x1d, 0xf5, 0x77, 0x15, 0x2a, 0xe5,
	0x90, 0x6e, 0x52, 0x91, 0x3b, 0x1b, 0x55, 0x56, 0xe7, 0xea, 0x1d, 0xd8, 0x6b, 0x8c, 0xc1, 0x86,
	0x33, 0xab, 0x0c, 0xd3, 0xbd, 0x89, 0xa1, 0xd4, 0xc7, 0x60, 0x7f, 0xad, 0x5b, 0xce, 0xfa, 0xe9,
	0x26, 0xc7, 0x3c, 0xbe, 0x99, 0x53, 0x7b, 0x3c, 0x7b, 0xf1, 0x7d, 0x6e, 0x69, 0x97, 0x73, 0x4b,
	0xfb, 0x35, 0xb7, 0xb4, 0x2f, 0x0b, 0x6b, 0xeb, 0x72, 0x61, 0x6d, 0xfd, 0x5c, 0x58, 0x5b, 0x6f,
	0xef, 0x63, 0x22, 0x92, 0xe9, 0xd8, 0x8b, 0xe8, 0xc4, 0x97, 0x7a, 0x0f, 0x32, 0x24, 0x3e, 0x50,
	0xf6, 0xbe, 0x42, 0x29, 0x8a, 0x31, 0x62, 0xfe, 0x85, 0xfc, 0xb0, 0x8d, 0x77, 0xe4, 0x93, 0x79,
	0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x7a, 0xd4, 0x26, 0x4e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Anchor "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in Anchor is not attesting to the veracity of the underlying
	// data. They can simply be an intermediary providing timestamp services.
	// Attest should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	Anchor(ctx context.Context, in *MsgAnchor, opts ...grpc.CallOption) (*MsgAnchorResponse, error)
	// Attest allows for digital signing of an arbitrary piece of data on the
	// blockchain. By attesting to data, the attestor is making a statement about
	// the veracity of the data itself. It is like signing a legal document,
	// meaning that I agree to all conditions and to the best of my knowledge
	// everything is true. When anchoring data, the sender is not attesting to the
	// veracity of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// Attest implicitly calls Anchor if the data was not already anchored.
	//
	// Attest can be called multiple times for the same content hash with
	// different attestors and those attestors will be appended to the list of
	// attestors. If the same attestor attempts to attest to the same piece of
	// data, the attestor will be ignored and a new attestation with a new
	// timestamp will not be added.
	Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error)
	// DefineResolver defines a resolver URL and assigns it a new integer ID
	// that can be used in calls to RegisterResolver.
	DefineResolver(ctx context.Context, in *MsgDefineResolver, opts ...grpc.CallOption) (*MsgDefineResolverResponse, error)
	// RegisterResolver registers data content hashes
	RegisterResolver(ctx context.Context, in *MsgRegisterResolver, opts ...grpc.CallOption) (*MsgRegisterResolverResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Anchor(ctx context.Context, in *MsgAnchor, opts ...grpc.CallOption) (*MsgAnchorResponse, error) {
	out := new(MsgAnchorResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v2.Msg/Anchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error) {
	out := new(MsgAttestResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v2.Msg/Attest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DefineResolver(ctx context.Context, in *MsgDefineResolver, opts ...grpc.CallOption) (*MsgDefineResolverResponse, error) {
	out := new(MsgDefineResolverResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v2.Msg/DefineResolver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterResolver(ctx context.Context, in *MsgRegisterResolver, opts ...grpc.CallOption) (*MsgRegisterResolverResponse, error) {
	out := new(MsgRegisterResolverResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v2.Msg/RegisterResolver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Anchor "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in Anchor is not attesting to the veracity of the underlying
	// data. They can simply be an intermediary providing timestamp services.
	// Attest should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	Anchor(context.Context, *MsgAnchor) (*MsgAnchorResponse, error)
	// Attest allows for digital signing of an arbitrary piece of data on the
	// blockchain. By attesting to data, the attestor is making a statement about
	// the veracity of the data itself. It is like signing a legal document,
	// meaning that I agree to all conditions and to the best of my knowledge
	// everything is true. When anchoring data, the sender is not attesting to the
	// veracity of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// Attest implicitly calls Anchor if the data was not already anchored.
	//
	// Attest can be called multiple times for the same content hash with
	// different attestors and those attestors will be appended to the list of
	// attestors. If the same attestor attempts to attest to the same piece of
	// data, the attestor will be ignored and a new attestation with a new
	// timestamp will not be added.
	Attest(context.Context, *MsgAttest) (*MsgAttestResponse, error)
	// DefineResolver defines a resolver URL and assigns it a new integer ID
	// that can be used in calls to RegisterResolver.
	DefineResolver(context.Context, *MsgDefineResolver) (*MsgDefineResolverResponse, error)
	// RegisterResolver registers data content hashes
	RegisterResolver(context.Context, *MsgRegisterResolver) (*MsgRegisterResolverResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Anchor(ctx context.Context, req *MsgAnchor) (*MsgAnchorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Anchor not implemented")
}
func (*UnimplementedMsgServer) Attest(ctx context.Context, req *MsgAttest) (*MsgAttestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attest not implemented")
}
func (*UnimplementedMsgServer) DefineResolver(ctx context.Context, req *MsgDefineResolver) (*MsgDefineResolverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineResolver not implemented")
}
func (*UnimplementedMsgServer) RegisterResolver(ctx context.Context, req *MsgRegisterResolver) (*MsgRegisterResolverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResolver not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Anchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAnchor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Anchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v2.Msg/Anchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Anchor(ctx, req.(*MsgAnchor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAttest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v2.Msg/Attest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Attest(ctx, req.(*MsgAttest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DefineResolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDefineResolver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DefineResolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v2.Msg/DefineResolver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DefineResolver(ctx, req.(*MsgDefineResolver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterResolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterResolver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterResolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v2.Msg/RegisterResolver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterResolver(ctx, req.(*MsgRegisterResolver))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "regen.data.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Anchor",
			Handler:    _Msg_Anchor_Handler,
		},
		{
			MethodName: "Attest",
			Handler:    _Msg_Attest_Handler,
		},
		{
			MethodName: "DefineResolver",
			Handler:    _Msg_DefineResolver_Handler,
		},
		{
			MethodName: "RegisterResolver",
			Handler:    _Msg_RegisterResolver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/data/v2/tx.proto",
}

func (m *MsgAnchor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAnchor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAnchor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContentHash != nil {
		{
			size, err := m.ContentHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAnchorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAnchorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAnchorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Iri) > 0 {
		i -= len(m.Iri)
		copy(dAtA[i:], m.Iri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Iri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAttest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContentHashes) > 0 {
		for iNdEx := len(m.ContentHashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContentHashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Attestor) > 0 {
		i -= len(m.Attestor)
		copy(dAtA[i:], m.Attestor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Attestor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAttestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Iris) > 0 {
		for iNdEx := len(m.Iris) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Iris[iNdEx])
			copy(dAtA[i:], m.Iris[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Iris[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgDefineResolver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDefineResolver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDefineResolver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Public {
		i--
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResolverUrl) > 0 {
		i -= len(m.ResolverUrl)
		copy(dAtA[i:], m.ResolverUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResolverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Definer) > 0 {
		i -= len(m.Definer)
		copy(dAtA[i:], m.Definer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Definer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDefineResolverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDefineResolverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDefineResolverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResolverId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ResolverId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterResolver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterResolver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterResolver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContentHashes) > 0 {
		for iNdEx := len(m.ContentHashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContentHashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResolverId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ResolverId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterResolverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterResolverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterResolverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAnchor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContentHash != nil {
		l = m.ContentHash.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAnchorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Iri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAttest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attestor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ContentHashes) > 0 {
		for _, e := range m.ContentHashes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAttestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Iris) > 0 {
		for _, s := range m.Iris {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDefineResolver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Definer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResolverUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Public {
		n += 2
	}
	return n
}

func (m *MsgDefineResolverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolverId != 0 {
		n += 1 + sovTx(uint64(m.ResolverId))
	}
	return n
}

func (m *MsgRegisterResolver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ResolverId != 0 {
		n += 1 + sovTx(uint64(m.ResolverId))
	}
	if len(m.ContentHashes) > 0 {
		for _, e := range m.ContentHashes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRegisterResolverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAnchor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAnchor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAnchor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContentHash == nil {
				m.ContentHash = &ContentHash{}
			}
			if err := m.ContentHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAnchorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAnchorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAnchorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAttest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHashes = append(m.ContentHashes, &ContentHash_Graph{})
			if err := m.ContentHashes[len(m.ContentHashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAttestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iris = append(m.Iris, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDefineResolver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDefineResolver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDefineResolver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Definer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDefineResolverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDefineResolverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDefineResolverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolverId", wireType)
			}
			m.ResolverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolverId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterResolver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterResolver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterResolver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolverId", wireType)
			}
			m.ResolverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolverId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHashes = append(m.ContentHashes, &ContentHash{})
			if err := m.ContentHashes[len(m.ContentHashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterResolverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterResolverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterResolverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
