// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/data/v1alpha2/tx.proto

package data

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAnchorData is the Msg/AnchorData request type.
type MsgAnchorData struct {
	// sender is the address of the sender of the transaction.
	// The sender in StoreData is not attesting to the veracity of the underlying
	// data. They can simply be a intermediary providing services.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// hash is the hash-based identifier for the anchored content.
	Hash *ContentHash `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgAnchorData) Reset()         { *m = MsgAnchorData{} }
func (m *MsgAnchorData) String() string { return proto.CompactTextString(m) }
func (*MsgAnchorData) ProtoMessage()    {}
func (*MsgAnchorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff31907a513a4b24, []int{0}
}
func (m *MsgAnchorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAnchorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAnchorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAnchorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAnchorData.Merge(m, src)
}
func (m *MsgAnchorData) XXX_Size() int {
	return m.Size()
}
func (m *MsgAnchorData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAnchorData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAnchorData proto.InternalMessageInfo

func (m *MsgAnchorData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAnchorData) GetHash() *ContentHash {
	if m != nil {
		return m.Hash
	}
	return nil
}

// MsgAnchorData is the Msg/AnchorData response type.
type MsgAnchorDataResponse struct {
	// timestamp is the timestamp of the block at which the data was anchored.
	Timestamp *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// iri is the IRI of the data that was anchored.
	Iri string `protobuf:"bytes,2,opt,name=iri,proto3" json:"iri,omitempty"`
}

func (m *MsgAnchorDataResponse) Reset()         { *m = MsgAnchorDataResponse{} }
func (m *MsgAnchorDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAnchorDataResponse) ProtoMessage()    {}
func (*MsgAnchorDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff31907a513a4b24, []int{1}
}
func (m *MsgAnchorDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAnchorDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAnchorDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAnchorDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAnchorDataResponse.Merge(m, src)
}
func (m *MsgAnchorDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAnchorDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAnchorDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAnchorDataResponse proto.InternalMessageInfo

func (m *MsgAnchorDataResponse) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *MsgAnchorDataResponse) GetIri() string {
	if m != nil {
		return m.Iri
	}
	return ""
}

// MsgSignData is the Msg/SignData request type.
type MsgSignData struct {
	// signers are the addresses of the accounts signing the data.
	// By making a SignData request, the signers are attesting to the veracity
	// of the data referenced by the cid. The precise meaning of this may vary
	// depending on the underlying data.
	Signers []string `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	// hash is the hash-based identifier for the anchored content. Only RDF graph
	// data can be signed as its data model is intended to specifically convey semantic meaning.
	Hash *ContentHash_Graph `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgSignData) Reset()         { *m = MsgSignData{} }
func (m *MsgSignData) String() string { return proto.CompactTextString(m) }
func (*MsgSignData) ProtoMessage()    {}
func (*MsgSignData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff31907a513a4b24, []int{2}
}
func (m *MsgSignData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignData.Merge(m, src)
}
func (m *MsgSignData) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignData proto.InternalMessageInfo

// MsgSignDataResponse is the Msg/SignData response type.
type MsgSignDataResponse struct {
}

func (m *MsgSignDataResponse) Reset()         { *m = MsgSignDataResponse{} }
func (m *MsgSignDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignDataResponse) ProtoMessage()    {}
func (*MsgSignDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff31907a513a4b24, []int{3}
}
func (m *MsgSignDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignDataResponse.Merge(m, src)
}
func (m *MsgSignDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignDataResponse proto.InternalMessageInfo

type MsgRegisterResolver struct {
	Signer      string               `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ResolverUrl string               `protobuf:"bytes,2,opt,name=resolver_url,json=resolverUrl,proto3" json:"resolver_url,omitempty"`
	Data        []*ContentHash_Graph `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgRegisterResolver) Reset()         { *m = MsgRegisterResolver{} }
func (m *MsgRegisterResolver) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterResolver) ProtoMessage()    {}
func (*MsgRegisterResolver) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff31907a513a4b24, []int{4}
}
func (m *MsgRegisterResolver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterResolver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterResolver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterResolver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterResolver.Merge(m, src)
}
func (m *MsgRegisterResolver) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterResolver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterResolver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterResolver proto.InternalMessageInfo

func (m *MsgRegisterResolver) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRegisterResolver) GetResolverUrl() string {
	if m != nil {
		return m.ResolverUrl
	}
	return ""
}

func (m *MsgRegisterResolver) GetData() []*ContentHash_Graph {
	if m != nil {
		return m.Data
	}
	return nil
}

type MsgRegisterResolverResponse struct {
}

func (m *MsgRegisterResolverResponse) Reset()         { *m = MsgRegisterResolverResponse{} }
func (m *MsgRegisterResolverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterResolverResponse) ProtoMessage()    {}
func (*MsgRegisterResolverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff31907a513a4b24, []int{5}
}
func (m *MsgRegisterResolverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterResolverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterResolverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterResolverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterResolverResponse.Merge(m, src)
}
func (m *MsgRegisterResolverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterResolverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterResolverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterResolverResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAnchorData)(nil), "regen.data.v1alpha2.MsgAnchorData")
	proto.RegisterType((*MsgAnchorDataResponse)(nil), "regen.data.v1alpha2.MsgAnchorDataResponse")
	proto.RegisterType((*MsgSignData)(nil), "regen.data.v1alpha2.MsgSignData")
	proto.RegisterType((*MsgSignDataResponse)(nil), "regen.data.v1alpha2.MsgSignDataResponse")
	proto.RegisterType((*MsgRegisterResolver)(nil), "regen.data.v1alpha2.MsgRegisterResolver")
	proto.RegisterType((*MsgRegisterResolverResponse)(nil), "regen.data.v1alpha2.MsgRegisterResolverResponse")
}

func init() { proto.RegisterFile("regen/data/v1alpha2/tx.proto", fileDescriptor_ff31907a513a4b24) }

var fileDescriptor_ff31907a513a4b24 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0x9b, 0xc9, 0x68, 0xa0, 0xb7, 0x20, 0x8d, 0x32, 0x0c, 0x8a, 0x02, 0x64, 0x42, 0x16,
	0xa8, 0x42, 0xe0, 0x40, 0x61, 0x81, 0x66, 0xc7, 0x8f, 0x80, 0x4d, 0x37, 0xe1, 0x67, 0x81, 0x40,
	0xc8, 0x6d, 0x2f, 0x4e, 0x44, 0x6a, 0x47, 0xb6, 0x3b, 0x0c, 0x6f, 0xc0, 0x82, 0x05, 0x8f, 0xc0,
	0x9e, 0x17, 0x61, 0x39, 0x4b, 0x96, 0xa8, 0x7d, 0x11, 0x14, 0x37, 0x0e, 0x53, 0x48, 0x55, 0xd8,
	0xf9, 0xfa, 0x7e, 0xf6, 0x39, 0xc7, 0x37, 0x81, 0xcb, 0x12, 0x19, 0xf2, 0x64, 0x42, 0x35, 0x4d,
	0x8e, 0x6e, 0xd3, 0xa2, 0xcc, 0xe8, 0x20, 0xd1, 0xc7, 0xa4, 0x94, 0x42, 0x0b, 0x6f, 0xcf, 0x74,
	0x49, 0xd5, 0x25, 0xb6, 0x1b, 0x5c, 0x60, 0x82, 0x09, 0xd3, 0x4f, 0xaa, 0xd5, 0x12, 0x0d, 0x0e,
	0x98, 0x10, 0xac, 0xc0, 0xc4, 0x54, 0xa3, 0xd9, 0xbb, 0x44, 0xe7, 0x53, 0x54, 0x9a, 0x4e, 0x4b,
	0x0b, 0xb4, 0x2a, 0x7d, 0x2c, 0x51, 0x2d, 0x81, 0xf8, 0x0d, 0x9c, 0x1f, 0x2a, 0x76, 0x9f, 0x8f,
	0x33, 0x21, 0x1f, 0x51, 0x4d, 0xbd, 0x8b, 0xb0, 0xa3, 0x90, 0x4f, 0x50, 0xfa, 0x4e, 0xe4, 0xf4,
	0xbb, 0x69, 0x5d, 0x79, 0x77, 0x61, 0x3b, 0xa3, 0x2a, 0xf3, 0xb7, 0x22, 0xa7, 0xdf, 0x1b, 0x44,
	0xa4, 0xc5, 0x24, 0x79, 0x28, 0xb8, 0x46, 0xae, 0x9f, 0x52, 0x95, 0xa5, 0x86, 0x8e, 0xc7, 0xb0,
	0xbf, 0x72, 0x7d, 0x8a, 0xaa, 0x14, 0x5c, 0xa1, 0x77, 0x0f, 0xba, 0x8d, 0x57, 0xa3, 0xd4, 0x1b,
	0x04, 0x64, 0x99, 0x86, 0xd8, 0x34, 0xe4, 0xb9, 0x25, 0xd2, 0xdf, 0xb0, 0xb7, 0x0b, 0x6e, 0x2e,
	0x73, 0xe3, 0xa3, 0x9b, 0x56, 0xcb, 0x38, 0x87, 0xde, 0x50, 0xb1, 0x67, 0x39, 0xe3, 0x26, 0x81,
	0x0f, 0x67, 0x54, 0xce, 0x38, 0x4a, 0xe5, 0x3b, 0x91, 0xdb, 0xef, 0xa6, 0xb6, 0xf4, 0x0e, 0x57,
	0x32, 0x5c, 0xdb, 0x94, 0x81, 0x3c, 0x91, 0xb4, 0xac, 0x93, 0x1c, 0x6e, 0x7f, 0xfa, 0x7a, 0xd0,
	0x89, 0xf7, 0x61, 0xef, 0x94, 0x94, 0x4d, 0x13, 0x7f, 0x76, 0xcc, 0x7e, 0x8a, 0x2c, 0x57, 0x1a,
	0x65, 0x8a, 0x4a, 0x14, 0x47, 0x28, 0xcd, 0x63, 0x1a, 0xed, 0xe6, 0x31, 0x4d, 0xe5, 0x5d, 0x85,
	0x73, 0xb2, 0x66, 0xde, 0xce, 0x64, 0x51, 0x87, 0xe9, 0xd9, 0xbd, 0x17, 0xb2, 0xa8, 0xbc, 0x56,
	0xc6, 0x7c, 0x37, 0x72, 0xff, 0xc7, 0x6b, 0x05, 0xc4, 0x57, 0xe0, 0x52, 0x8b, 0x1b, 0xeb, 0x76,
	0xf0, 0x6d, 0x0b, 0xdc, 0xa1, 0x62, 0xde, 0x6b, 0x80, 0x53, 0x83, 0x8f, 0x5b, 0x25, 0x56, 0xa6,
	0x17, 0x5c, 0xdf, 0xcc, 0x34, 0x13, 0x7e, 0x09, 0x67, 0x9b, 0x91, 0x44, 0xeb, 0xce, 0x59, 0x22,
	0xe8, 0x6f, 0x22, 0x9a, 0x7b, 0x39, 0xec, 0xfe, 0xf5, 0xce, 0x6b, 0x4f, 0xff, 0x49, 0x06, 0xb7,
	0xfe, 0x95, 0xb4, 0x7a, 0x0f, 0x1e, 0x7f, 0x9f, 0x87, 0xce, 0xc9, 0x3c, 0x74, 0x7e, 0xce, 0x43,
	0xe7, 0xcb, 0x22, 0xec, 0x9c, 0x2c, 0xc2, 0xce, 0x8f, 0x45, 0xd8, 0x79, 0x75, 0x83, 0xe5, 0x3a,
	0x9b, 0x8d, 0xc8, 0x58, 0x4c, 0x13, 0x73, 0xeb, 0x4d, 0x8e, 0xfa, 0x83, 0x90, 0xef, 0xeb, 0xaa,
	0xc0, 0x09, 0x43, 0x99, 0x1c, 0x9b, 0xdf, 0x6f, 0xb4, 0x63, 0x3e, 0xeb, 0x3b, 0xbf, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x8d, 0x18, 0x9a, 0xfe, 0xfd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AnchorData "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in AnchorData is not attesting to the veracity of the underlying
	// data. They can simply be a intermediary providing timestamp services.
	// SignData should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	AnchorData(ctx context.Context, in *MsgAnchorData, opts ...grpc.CallOption) (*MsgAnchorDataResponse, error)
	// SignData allows for signing of an arbitrary piece of data on the
	// blockchain. By "signing" data the signers are making a statement about the
	// veracity of the data itself. It is like signing a legal document, meaning
	// that I agree to all conditions and to the best of my knowledge everything
	// is true. When anchoring data, the sender is not attesting to the veracity
	// of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// SignData implicitly calls AnchorData if the data was not already anchored.
	//
	// SignData can be called multiple times for the same content hash with different
	// signers and those signers will be appended to the list of signers.
	SignData(ctx context.Context, in *MsgSignData, opts ...grpc.CallOption) (*MsgSignDataResponse, error)
	RegisterResolver(ctx context.Context, in *MsgRegisterResolver, opts ...grpc.CallOption) (*MsgRegisterResolverResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AnchorData(ctx context.Context, in *MsgAnchorData, opts ...grpc.CallOption) (*MsgAnchorDataResponse, error) {
	out := new(MsgAnchorDataResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v1alpha2.Msg/AnchorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignData(ctx context.Context, in *MsgSignData, opts ...grpc.CallOption) (*MsgSignDataResponse, error) {
	out := new(MsgSignDataResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v1alpha2.Msg/SignData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterResolver(ctx context.Context, in *MsgRegisterResolver, opts ...grpc.CallOption) (*MsgRegisterResolverResponse, error) {
	out := new(MsgRegisterResolverResponse)
	err := c.cc.Invoke(ctx, "/regen.data.v1alpha2.Msg/RegisterResolver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AnchorData "anchors" a piece of data to the blockchain based on its secure
	// hash, effectively providing a tamper resistant timestamp.
	//
	// The sender in AnchorData is not attesting to the veracity of the underlying
	// data. They can simply be a intermediary providing timestamp services.
	// SignData should be used to create a digital signature attesting to the
	// veracity of some piece of data.
	AnchorData(context.Context, *MsgAnchorData) (*MsgAnchorDataResponse, error)
	// SignData allows for signing of an arbitrary piece of data on the
	// blockchain. By "signing" data the signers are making a statement about the
	// veracity of the data itself. It is like signing a legal document, meaning
	// that I agree to all conditions and to the best of my knowledge everything
	// is true. When anchoring data, the sender is not attesting to the veracity
	// of the data, they are simply communicating that it exists.
	//
	// On-chain signatures have the following benefits:
	// - on-chain identities can be managed using different cryptographic keys
	//   that change over time through key rotation practices
	// - an on-chain identity may represent an organization and through delegation
	//   individual members may sign on behalf of the group
	// - the blockchain transaction envelope provides built-in replay protection
	//   and timestamping
	//
	// SignData implicitly calls AnchorData if the data was not already anchored.
	//
	// SignData can be called multiple times for the same content hash with different
	// signers and those signers will be appended to the list of signers.
	SignData(context.Context, *MsgSignData) (*MsgSignDataResponse, error)
	RegisterResolver(context.Context, *MsgRegisterResolver) (*MsgRegisterResolverResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AnchorData(ctx context.Context, req *MsgAnchorData) (*MsgAnchorDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorData not implemented")
}
func (*UnimplementedMsgServer) SignData(ctx context.Context, req *MsgSignData) (*MsgSignDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignData not implemented")
}
func (*UnimplementedMsgServer) RegisterResolver(ctx context.Context, req *MsgRegisterResolver) (*MsgRegisterResolverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResolver not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AnchorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAnchorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AnchorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v1alpha2.Msg/AnchorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AnchorData(ctx, req.(*MsgAnchorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v1alpha2.Msg/SignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignData(ctx, req.(*MsgSignData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterResolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterResolver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterResolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.data.v1alpha2.Msg/RegisterResolver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterResolver(ctx, req.(*MsgRegisterResolver))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "regen.data.v1alpha2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnchorData",
			Handler:    _Msg_AnchorData_Handler,
		},
		{
			MethodName: "SignData",
			Handler:    _Msg_SignData_Handler,
		},
		{
			MethodName: "RegisterResolver",
			Handler:    _Msg_RegisterResolver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/data/v1alpha2/tx.proto",
}

func (m *MsgAnchorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAnchorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAnchorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != nil {
		{
			size, err := m.Hash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAnchorDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAnchorDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAnchorDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Iri) > 0 {
		i -= len(m.Iri)
		copy(dAtA[i:], m.Iri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Iri)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != nil {
		{
			size, err := m.Hash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterResolver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterResolver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterResolver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResolverUrl) > 0 {
		i -= len(m.ResolverUrl)
		copy(dAtA[i:], m.ResolverUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResolverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterResolverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterResolverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterResolverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAnchorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAnchorDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Iri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterResolver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResolverUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRegisterResolverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAnchorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAnchorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAnchorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &ContentHash{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAnchorDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAnchorDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAnchorDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &ContentHash_Graph{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterResolver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterResolver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterResolver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ContentHash_Graph{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterResolverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterResolverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterResolverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
