// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/ecocredit/marketplace/v1/types.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AllowDenomProposal is a gov Content type for approving a denom for use in the
// marketplace.
//
// Deprecated (Since Revision 1): This message is no longer used and will be
// removed in the next version. See MsgAddAllowedDenom.
type AllowDenomProposal struct {
	// title is the title of the proposal.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// description is the description of the proposal.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// denom contains coin denom information that will be added to the
	// list of allowed denoms for use in the marketplace.
	Denom *AllowedDenom `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *AllowDenomProposal) Reset()      { *m = AllowDenomProposal{} }
func (*AllowDenomProposal) ProtoMessage() {}
func (*AllowDenomProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_eff2ca0c007ee426, []int{0}
}
func (m *AllowDenomProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowDenomProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowDenomProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowDenomProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowDenomProposal.Merge(m, src)
}
func (m *AllowDenomProposal) XXX_Size() int {
	return m.Size()
}
func (m *AllowDenomProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowDenomProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AllowDenomProposal proto.InternalMessageInfo

func (m *AllowDenomProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AllowDenomProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AllowDenomProposal) GetDenom() *AllowedDenom {
	if m != nil {
		return m.Denom
	}
	return nil
}

func init() {
	proto.RegisterType((*AllowDenomProposal)(nil), "regen.ecocredit.marketplace.v1.AllowDenomProposal")
}

func init() {
	proto.RegisterFile("regen/ecocredit/marketplace/v1/types.proto", fileDescriptor_eff2ca0c007ee426)
}

var fileDescriptor_eff2ca0c007ee426 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x63, 0xa0, 0x48, 0xa4, 0x5b, 0xd4, 0xa1, 0xea, 0x60, 0x22, 0xa6, 0x0a, 0x81, 0xad,
	0xc0, 0xc6, 0x46, 0x85, 0x98, 0x51, 0x47, 0x26, 0xd2, 0xf8, 0x97, 0xb1, 0xea, 0xe4, 0xb7, 0x9c,
	0x9f, 0x14, 0xde, 0x82, 0x09, 0x31, 0xf2, 0x38, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0xa8, 0x0e,
	0x42, 0x5d, 0x80, 0xcd, 0x67, 0x7f, 0x77, 0x27, 0x5f, 0x7c, 0xec, 0x41, 0x43, 0x25, 0xa1, 0xc0,
	0xc2, 0x83, 0x32, 0x24, 0xcb, 0xdc, 0x2f, 0x81, 0x9c, 0xcd, 0x0b, 0x90, 0x4d, 0x26, 0xe9, 0xc9,
	0x41, 0x2d, 0x9c, 0x47, 0xc2, 0x84, 0x07, 0x56, 0xfc, 0xb0, 0x62, 0x8b, 0x15, 0x4d, 0x36, 0x19,
	0x69, 0xd4, 0x18, 0x50, 0xb9, 0x39, 0xf5, 0xae, 0xc9, 0x7f, 0x0d, 0x35, 0xe5, 0x04, 0x3d, 0x7b,
	0xf4, 0xc2, 0xe2, 0xe4, 0xd2, 0x5a, 0x5c, 0x5d, 0x41, 0x85, 0xe5, 0x8d, 0x47, 0x87, 0x75, 0x6e,
	0x93, 0x51, 0x3c, 0x20, 0x43, 0x16, 0xc6, 0x2c, 0x65, 0xd3, 0x83, 0x79, 0x2f, 0x92, 0x34, 0x1e,
	0x2a, 0xa8, 0x0b, 0x6f, 0x1c, 0x19, 0xac, 0xc6, 0x3b, 0xe1, 0x6d, 0xfb, 0x2a, 0x99, 0xc5, 0x03,
	0xb5, 0x09, 0x1a, 0xef, 0xa6, 0x6c, 0x3a, 0x3c, 0x3b, 0x11, 0x7f, 0x7f, 0x40, 0x84, 0x6a, 0x50,
	0xa1, 0x7c, 0xde, 0x5b, 0x2f, 0xf6, 0x5e, 0xdf, 0x0e, 0xa3, 0xd9, 0xdd, 0x7b, 0xcb, 0xd9, 0xba,
	0xe5, 0xec, 0xb3, 0xe5, 0xec, 0xb9, 0xe3, 0xd1, 0xba, 0xe3, 0xd1, 0x47, 0xc7, 0xa3, 0xdb, 0x6b,
	0x6d, 0xe8, 0xfe, 0x61, 0x21, 0x0a, 0x2c, 0x65, 0x88, 0x3f, 0xad, 0x80, 0x56, 0xe8, 0x97, 0xdf,
	0xca, 0x82, 0xd2, 0xe0, 0xe5, 0xe3, 0x2f, 0x03, 0x84, 0x7d, 0x65, 0x93, 0x2d, 0xf6, 0xc3, 0x02,
	0xe7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xd5, 0x66, 0x2d, 0x91, 0x01, 0x00, 0x00,
}

func (m *AllowDenomProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowDenomProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowDenomProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denom != nil {
		{
			size, err := m.Denom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllowDenomProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Denom != nil {
		l = m.Denom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllowDenomProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowDenomProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowDenomProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Denom == nil {
				m.Denom = &AllowedDenom{}
			}
			if err := m.Denom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
