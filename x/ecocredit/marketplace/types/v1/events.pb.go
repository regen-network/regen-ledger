// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/ecocredit/marketplace/v1/events.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventSell is an event emitted when a sell order is created.
type EventSell struct {
	// sell_order_id is the unique identifier of the sell order that was created.
	SellOrderId uint64 `protobuf:"varint,1,opt,name=sell_order_id,json=sellOrderId,proto3" json:"sell_order_id,omitempty"`
}

func (m *EventSell) Reset()         { *m = EventSell{} }
func (m *EventSell) String() string { return proto.CompactTextString(m) }
func (*EventSell) ProtoMessage()    {}
func (*EventSell) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{0}
}
func (m *EventSell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSell.Merge(m, src)
}
func (m *EventSell) XXX_Size() int {
	return m.Size()
}
func (m *EventSell) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSell.DiscardUnknown(m)
}

var xxx_messageInfo_EventSell proto.InternalMessageInfo

func (m *EventSell) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

// EventBuyDirect is an event emitted when a direct buy order is processed.
type EventBuyDirect struct {
	// sell_order_id is the unique identifier of the sell order that credits were
	// purchased from.
	SellOrderId uint64 `protobuf:"varint,1,opt,name=sell_order_id,json=sellOrderId,proto3" json:"sell_order_id,omitempty"`
}

func (m *EventBuyDirect) Reset()         { *m = EventBuyDirect{} }
func (m *EventBuyDirect) String() string { return proto.CompactTextString(m) }
func (*EventBuyDirect) ProtoMessage()    {}
func (*EventBuyDirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{1}
}
func (m *EventBuyDirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBuyDirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBuyDirect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBuyDirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBuyDirect.Merge(m, src)
}
func (m *EventBuyDirect) XXX_Size() int {
	return m.Size()
}
func (m *EventBuyDirect) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBuyDirect.DiscardUnknown(m)
}

var xxx_messageInfo_EventBuyDirect proto.InternalMessageInfo

func (m *EventBuyDirect) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

// EventUpdateSellOrder is an event emitted when a sell order is updated.
type EventUpdateSellOrder struct {
	//  sell_order_id is the unique identifier of the sell order that was updated.
	SellOrderId uint64 `protobuf:"varint,1,opt,name=sell_order_id,json=sellOrderId,proto3" json:"sell_order_id,omitempty"`
}

func (m *EventUpdateSellOrder) Reset()         { *m = EventUpdateSellOrder{} }
func (m *EventUpdateSellOrder) String() string { return proto.CompactTextString(m) }
func (*EventUpdateSellOrder) ProtoMessage()    {}
func (*EventUpdateSellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{2}
}
func (m *EventUpdateSellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateSellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateSellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateSellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateSellOrder.Merge(m, src)
}
func (m *EventUpdateSellOrder) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateSellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateSellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateSellOrder proto.InternalMessageInfo

func (m *EventUpdateSellOrder) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

// EventCancelSellOrder is an event emitted when a sell order is cancelled.
type EventCancelSellOrder struct {
	// sell_order_id is the unique identifier of the sell order that was
	// cancelled.
	SellOrderId uint64 `protobuf:"varint,1,opt,name=sell_order_id,json=sellOrderId,proto3" json:"sell_order_id,omitempty"`
}

func (m *EventCancelSellOrder) Reset()         { *m = EventCancelSellOrder{} }
func (m *EventCancelSellOrder) String() string { return proto.CompactTextString(m) }
func (*EventCancelSellOrder) ProtoMessage()    {}
func (*EventCancelSellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{3}
}
func (m *EventCancelSellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelSellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelSellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelSellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelSellOrder.Merge(m, src)
}
func (m *EventCancelSellOrder) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelSellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelSellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelSellOrder proto.InternalMessageInfo

func (m *EventCancelSellOrder) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

// EventAllowDenom is an event emitted when a new denom is added for use in the
// marketplace.
type EventAllowDenom struct {
	// denom is the bank denom (e.g. ibc/GLKHDSG423SGS) added to the list of
	// allowed denoms for use in the marketplace.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *EventAllowDenom) Reset()         { *m = EventAllowDenom{} }
func (m *EventAllowDenom) String() string { return proto.CompactTextString(m) }
func (*EventAllowDenom) ProtoMessage()    {}
func (*EventAllowDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{4}
}
func (m *EventAllowDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAllowDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAllowDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAllowDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAllowDenom.Merge(m, src)
}
func (m *EventAllowDenom) XXX_Size() int {
	return m.Size()
}
func (m *EventAllowDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAllowDenom.DiscardUnknown(m)
}

var xxx_messageInfo_EventAllowDenom proto.InternalMessageInfo

func (m *EventAllowDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// EventRemoveAllowedDenom is an event emitted when a denom is removed from use
// in the marketplace.
//
// Since Revision 1
type EventRemoveAllowedDenom struct {
	// denom is the bank denom (e.g. ibc/GLKHDSG423SGS) removed from the list of
	// allowed denoms for use in the marketplace.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *EventRemoveAllowedDenom) Reset()         { *m = EventRemoveAllowedDenom{} }
func (m *EventRemoveAllowedDenom) String() string { return proto.CompactTextString(m) }
func (*EventRemoveAllowedDenom) ProtoMessage()    {}
func (*EventRemoveAllowedDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{5}
}
func (m *EventRemoveAllowedDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRemoveAllowedDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRemoveAllowedDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRemoveAllowedDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRemoveAllowedDenom.Merge(m, src)
}
func (m *EventRemoveAllowedDenom) XXX_Size() int {
	return m.Size()
}
func (m *EventRemoveAllowedDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRemoveAllowedDenom.DiscardUnknown(m)
}

var xxx_messageInfo_EventRemoveAllowedDenom proto.InternalMessageInfo

func (m *EventRemoveAllowedDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSell)(nil), "regen.ecocredit.marketplace.v1.EventSell")
	proto.RegisterType((*EventBuyDirect)(nil), "regen.ecocredit.marketplace.v1.EventBuyDirect")
	proto.RegisterType((*EventUpdateSellOrder)(nil), "regen.ecocredit.marketplace.v1.EventUpdateSellOrder")
	proto.RegisterType((*EventCancelSellOrder)(nil), "regen.ecocredit.marketplace.v1.EventCancelSellOrder")
	proto.RegisterType((*EventAllowDenom)(nil), "regen.ecocredit.marketplace.v1.EventAllowDenom")
	proto.RegisterType((*EventRemoveAllowedDenom)(nil), "regen.ecocredit.marketplace.v1.EventRemoveAllowedDenom")
}

func init() {
	proto.RegisterFile("regen/ecocredit/marketplace/v1/events.proto", fileDescriptor_68b71b54d42cf1d9)
}

var fileDescriptor_68b71b54d42cf1d9 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x3f, 0x4b, 0xc3, 0x40,
	0x1c, 0x86, 0x13, 0x50, 0xa1, 0x27, 0x2a, 0x84, 0x82, 0x4e, 0x87, 0x64, 0x51, 0x10, 0x73, 0x04,
	0x9d, 0xdc, 0xac, 0x55, 0x70, 0x12, 0x52, 0x5c, 0x5c, 0x6a, 0x7a, 0xf7, 0x12, 0x43, 0x2f, 0xb9,
	0x70, 0xb9, 0x5e, 0xed, 0xb7, 0xf0, 0x63, 0x39, 0x76, 0x74, 0x94, 0xe4, 0x8b, 0x48, 0xce, 0x3f,
	0xb8, 0x28, 0xed, 0x76, 0xef, 0x7b, 0xcf, 0xb3, 0xfc, 0x5e, 0x72, 0xa2, 0x91, 0xa1, 0x64, 0xe0,
	0x8a, 0x6b, 0x88, 0xdc, 0xb0, 0x22, 0xd5, 0x53, 0x98, 0x4a, 0xa6, 0x1c, 0xcc, 0xc6, 0x0c, 0x16,
	0xa5, 0xa9, 0xa3, 0x4a, 0x2b, 0xa3, 0x02, 0xea, 0xe0, 0xe8, 0x07, 0x8e, 0x7e, 0xc1, 0x91, 0x8d,
	0x43, 0x46, 0x7a, 0xd7, 0x1d, 0x3f, 0x82, 0x94, 0x41, 0x48, 0x76, 0x6a, 0x48, 0x39, 0x56, 0x5a,
	0x40, 0x8f, 0x73, 0x71, 0xe0, 0x1f, 0xfa, 0xc7, 0x1b, 0xc9, 0x76, 0x57, 0xde, 0x75, 0xdd, 0xad,
	0x08, 0xcf, 0xc9, 0xae, 0x13, 0x06, 0xb3, 0xc5, 0x30, 0xd7, 0xe0, 0x66, 0x25, 0xeb, 0x82, 0xf4,
	0x9d, 0x75, 0x5f, 0x89, 0xd4, 0x60, 0xf4, 0xfd, 0xb3, 0x96, 0x7b, 0x95, 0x96, 0x1c, 0x72, 0x3d,
	0xf7, 0x88, 0xec, 0x39, 0xf7, 0x52, 0x4a, 0x35, 0x1f, 0xa2, 0x54, 0x45, 0xd0, 0x27, 0x9b, 0xa2,
	0x7b, 0x38, 0xbc, 0x97, 0x7c, 0x86, 0x90, 0x91, 0x7d, 0x07, 0x26, 0x28, 0x94, 0x85, 0xc3, 0x21,
	0xfe, 0x11, 0x06, 0x8f, 0xaf, 0x0d, 0xf5, 0x97, 0x0d, 0xf5, 0xdf, 0x1b, 0xea, 0xbf, 0xb4, 0xd4,
	0x5b, 0xb6, 0xd4, 0x7b, 0x6b, 0xa9, 0xf7, 0x70, 0x93, 0xe5, 0xe6, 0x69, 0x36, 0x89, 0xb8, 0x2a,
	0x98, 0xbb, 0xfe, 0x69, 0x09, 0x33, 0x57, 0x7a, 0xfa, 0x95, 0x24, 0x44, 0x06, 0xcd, 0x9e, 0xff,
	0x58, 0xd0, 0x2c, 0x2a, 0xd4, 0xcc, 0xc6, 0x93, 0x2d, 0xb7, 0xe0, 0xd9, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x33, 0xb9, 0xd9, 0xe6, 0xf0, 0x01, 0x00, 0x00,
}

func (m *EventSell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOrderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventBuyDirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBuyDirect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBuyDirect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOrderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateSellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateSellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateSellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOrderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelSellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelSellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelSellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOrderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventAllowDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAllowDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAllowDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRemoveAllowedDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRemoveAllowedDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRemoveAllowedDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderId != 0 {
		n += 1 + sovEvents(uint64(m.SellOrderId))
	}
	return n
}

func (m *EventBuyDirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderId != 0 {
		n += 1 + sovEvents(uint64(m.SellOrderId))
	}
	return n
}

func (m *EventUpdateSellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderId != 0 {
		n += 1 + sovEvents(uint64(m.SellOrderId))
	}
	return n
}

func (m *EventCancelSellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderId != 0 {
		n += 1 + sovEvents(uint64(m.SellOrderId))
	}
	return n
}

func (m *EventAllowDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRemoveAllowedDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBuyDirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBuyDirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBuyDirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateSellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateSellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateSellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelSellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelSellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelSellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAllowDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAllowDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAllowDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRemoveAllowedDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRemoveAllowedDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRemoveAllowedDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
