// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/ecocredit/marketplace/v1/events.proto

package marketplace

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventSell is an event emitted when a sell order is created.
type EventSell struct {
	// seller is the owner of the sell order.
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	// order_id is the unique ID of sell order.
	OrderId uint64 `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *EventSell) Reset()         { *m = EventSell{} }
func (m *EventSell) String() string { return proto.CompactTextString(m) }
func (*EventSell) ProtoMessage()    {}
func (*EventSell) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{0}
}
func (m *EventSell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSell.Merge(m, src)
}
func (m *EventSell) XXX_Size() int {
	return m.Size()
}
func (m *EventSell) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSell.DiscardUnknown(m)
}

var xxx_messageInfo_EventSell proto.InternalMessageInfo

func (m *EventSell) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *EventSell) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

// EventUpdateSellOrder is an event emitted when a sell order is updated.
type EventUpdateSellOrder struct {
	// seller is the owner of the sell order.
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	//  sell_order_id is the ID of an existing sell order.
	SellOrderId uint64 `protobuf:"varint,2,opt,name=sell_order_id,json=sellOrderId,proto3" json:"sell_order_id,omitempty"`
	// batch_denom is the credit batch being sold.
	BatchDenom string `protobuf:"bytes,3,opt,name=batch_denom,json=batchDenom,proto3" json:"batch_denom,omitempty"`
	// new_quantity is the updated quantity of credits available to sell, if it
	// is set to zero then the order is cancelled.
	NewQuantity string `protobuf:"bytes,4,opt,name=new_quantity,json=newQuantity,proto3" json:"new_quantity,omitempty"`
	// new_ask_price is the new ask price for this sell order
	NewAskPrice *types.Coin `protobuf:"bytes,5,opt,name=new_ask_price,json=newAskPrice,proto3" json:"new_ask_price,omitempty"`
	// disable_auto_retire updates the disable_auto_retire field in the sell
	// order.
	DisableAutoRetire bool `protobuf:"varint,6,opt,name=disable_auto_retire,json=disableAutoRetire,proto3" json:"disable_auto_retire,omitempty"`
	// new_expiration is an optional timestamp when the sell order expires. When
	// the expiration time is reached, the sell order is removed from state.
	NewExpiration *time.Time `protobuf:"bytes,7,opt,name=new_expiration,json=newExpiration,proto3,stdtime" json:"new_expiration,omitempty"`
}

func (m *EventUpdateSellOrder) Reset()         { *m = EventUpdateSellOrder{} }
func (m *EventUpdateSellOrder) String() string { return proto.CompactTextString(m) }
func (*EventUpdateSellOrder) ProtoMessage()    {}
func (*EventUpdateSellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{1}
}
func (m *EventUpdateSellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateSellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateSellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateSellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateSellOrder.Merge(m, src)
}
func (m *EventUpdateSellOrder) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateSellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateSellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateSellOrder proto.InternalMessageInfo

func (m *EventUpdateSellOrder) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *EventUpdateSellOrder) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

func (m *EventUpdateSellOrder) GetBatchDenom() string {
	if m != nil {
		return m.BatchDenom
	}
	return ""
}

func (m *EventUpdateSellOrder) GetNewQuantity() string {
	if m != nil {
		return m.NewQuantity
	}
	return ""
}

func (m *EventUpdateSellOrder) GetNewAskPrice() *types.Coin {
	if m != nil {
		return m.NewAskPrice
	}
	return nil
}

func (m *EventUpdateSellOrder) GetDisableAutoRetire() bool {
	if m != nil {
		return m.DisableAutoRetire
	}
	return false
}

func (m *EventUpdateSellOrder) GetNewExpiration() *time.Time {
	if m != nil {
		return m.NewExpiration
	}
	return nil
}

// EventAllowAskDenom is an event emitted when an ask denom is added.
type EventAllowAskDenom struct {
	// denom is the denom to allow (ex. ibc/GLKHDSG423SGS)
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *EventAllowAskDenom) Reset()         { *m = EventAllowAskDenom{} }
func (m *EventAllowAskDenom) String() string { return proto.CompactTextString(m) }
func (*EventAllowAskDenom) ProtoMessage()    {}
func (*EventAllowAskDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b71b54d42cf1d9, []int{2}
}
func (m *EventAllowAskDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAllowAskDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAllowAskDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAllowAskDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAllowAskDenom.Merge(m, src)
}
func (m *EventAllowAskDenom) XXX_Size() int {
	return m.Size()
}
func (m *EventAllowAskDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAllowAskDenom.DiscardUnknown(m)
}

var xxx_messageInfo_EventAllowAskDenom proto.InternalMessageInfo

func (m *EventAllowAskDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSell)(nil), "regen.ecocredit.marketplace.v1.EventSell")
	proto.RegisterType((*EventUpdateSellOrder)(nil), "regen.ecocredit.marketplace.v1.EventUpdateSellOrder")
	proto.RegisterType((*EventAllowAskDenom)(nil), "regen.ecocredit.marketplace.v1.EventAllowAskDenom")
}

func init() {
	proto.RegisterFile("regen/ecocredit/marketplace/v1/events.proto", fileDescriptor_68b71b54d42cf1d9)
}

var fileDescriptor_68b71b54d42cf1d9 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x41, 0x6f, 0x13, 0x3d,
	0x10, 0xcd, 0xf6, 0x4b, 0xd3, 0xd6, 0xf9, 0x8a, 0xc4, 0x12, 0xa1, 0x6d, 0x0e, 0x9b, 0x90, 0x53,
	0x04, 0xc2, 0x56, 0xe0, 0x5c, 0xa4, 0x14, 0x2a, 0xd4, 0x13, 0x10, 0x40, 0x48, 0x5c, 0x56, 0xde,
	0xdd, 0x61, 0x6b, 0xc5, 0xeb, 0x59, 0x6c, 0x6f, 0x52, 0xfe, 0x45, 0x7f, 0x16, 0x27, 0xd4, 0x23,
	0x37, 0x50, 0xf2, 0x47, 0x90, 0xbd, 0x9b, 0x0a, 0x21, 0xb8, 0xf9, 0xcd, 0xbc, 0x79, 0x7e, 0x7e,
	0x63, 0xf2, 0x48, 0x43, 0x01, 0x8a, 0x41, 0x86, 0x99, 0x86, 0x5c, 0x58, 0x56, 0x72, 0xbd, 0x04,
	0x5b, 0x49, 0x9e, 0x01, 0x5b, 0xcd, 0x18, 0xac, 0x40, 0x59, 0x43, 0x2b, 0x8d, 0x16, 0xc3, 0xd8,
	0x93, 0xe9, 0x2d, 0x99, 0xfe, 0x46, 0xa6, 0xab, 0xd9, 0x70, 0x50, 0x60, 0x81, 0x9e, 0xca, 0xdc,
	0xa9, 0x99, 0x1a, 0xc6, 0x19, 0x9a, 0x12, 0x0d, 0x4b, 0xb9, 0x71, 0x92, 0x29, 0x58, 0x3e, 0x63,
	0x19, 0x0a, 0xd5, 0xf6, 0x47, 0x05, 0x62, 0x21, 0x81, 0x79, 0x94, 0xd6, 0x9f, 0x98, 0x15, 0x25,
	0x18, 0xcb, 0xcb, 0xaa, 0x21, 0x4c, 0x9e, 0x91, 0xa3, 0x73, 0x67, 0xe3, 0x2d, 0x48, 0x19, 0xde,
	0x27, 0x3d, 0x03, 0x52, 0x82, 0x8e, 0x82, 0x71, 0x30, 0x3d, 0x5a, 0xb4, 0x28, 0x3c, 0x21, 0x87,
	0xa8, 0x73, 0xd0, 0x89, 0xc8, 0xa3, 0xbd, 0x71, 0x30, 0xed, 0x2e, 0x0e, 0x3c, 0xbe, 0xc8, 0x27,
	0xdf, 0xf6, 0xc8, 0xc0, 0x0b, 0xbc, 0xaf, 0x72, 0x6e, 0xc1, 0xc9, 0xbc, 0x72, 0xad, 0x7f, 0x6a,
	0x4d, 0xc8, 0xb1, 0x3b, 0x25, 0x7f, 0x08, 0xf6, 0xcd, 0x6e, 0xf2, 0x22, 0x0f, 0x47, 0xa4, 0x9f,
	0x72, 0x9b, 0x5d, 0x26, 0x39, 0x28, 0x2c, 0xa3, 0xff, 0xbc, 0x00, 0xf1, 0xa5, 0x17, 0xae, 0x12,
	0x3e, 0x20, 0xff, 0x2b, 0x58, 0x27, 0x9f, 0x6b, 0xae, 0xac, 0xb0, 0x5f, 0xa2, 0xae, 0x67, 0xf4,
	0x15, 0xac, 0xdf, 0xb4, 0xa5, 0xf0, 0x94, 0x1c, 0x3b, 0x0a, 0x37, 0xcb, 0xa4, 0xd2, 0x22, 0x83,
	0x68, 0x7f, 0x1c, 0x4c, 0xfb, 0x4f, 0x4e, 0x68, 0x93, 0x18, 0x75, 0x89, 0xd1, 0x36, 0x31, 0xfa,
	0x1c, 0x85, 0xf2, 0xe3, 0x73, 0xb3, 0x7c, 0xed, 0xd8, 0x21, 0x25, 0xf7, 0x72, 0x61, 0x78, 0x2a,
	0x21, 0xe1, 0xb5, 0xc5, 0x44, 0x83, 0x15, 0x1a, 0xa2, 0xde, 0x38, 0x98, 0x1e, 0x2e, 0xee, 0xb6,
	0xad, 0x79, 0x6d, 0x71, 0xe1, 0x1b, 0xe1, 0x4b, 0x72, 0xc7, 0x5d, 0x07, 0x57, 0x95, 0xd0, 0xdc,
	0x0a, 0x54, 0xd1, 0x81, 0xbf, 0x6f, 0x48, 0x9b, 0x0d, 0xd0, 0xdd, 0x06, 0xe8, 0xbb, 0xdd, 0x06,
	0xce, 0xba, 0xd7, 0x3f, 0x46, 0xc1, 0xc2, 0xd9, 0x3c, 0xbf, 0x1d, 0x9b, 0x3c, 0x24, 0xa1, 0xcf,
	0x73, 0x2e, 0x25, 0x3a, 0x3b, 0xcd, 0x83, 0x07, 0x64, 0xbf, 0xc9, 0xa2, 0x09, 0xb3, 0x01, 0x67,
	0x1f, 0xbe, 0x6e, 0xe2, 0xe0, 0x66, 0x13, 0x07, 0x3f, 0x37, 0x71, 0x70, 0xbd, 0x8d, 0x3b, 0x37,
	0xdb, 0xb8, 0xf3, 0x7d, 0x1b, 0x77, 0x3e, 0x9e, 0x16, 0xc2, 0x5e, 0xd6, 0x29, 0xcd, 0xb0, 0x64,
	0xfe, 0x63, 0x3d, 0x56, 0x60, 0xd7, 0xa8, 0x97, 0x2d, 0x92, 0x90, 0x17, 0xa0, 0xd9, 0xd5, 0xdf,
	0x3f, 0x67, 0xda, 0xf3, 0x6e, 0x9f, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xc5, 0xba, 0x59,
	0xc2, 0x02, 0x00, 0x00,
}

func (m *EventSell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateSellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateSellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateSellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewExpiration != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.NewExpiration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.NewExpiration):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEvents(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x3a
	}
	if m.DisableAutoRetire {
		i--
		if m.DisableAutoRetire {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.NewAskPrice != nil {
		{
			size, err := m.NewAskPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewQuantity) > 0 {
		i -= len(m.NewQuantity)
		copy(dAtA[i:], m.NewQuantity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewQuantity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BatchDenom) > 0 {
		i -= len(m.BatchDenom)
		copy(dAtA[i:], m.BatchDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BatchDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SellOrderId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAllowAskDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAllowAskDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAllowAskDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovEvents(uint64(m.OrderId))
	}
	return n
}

func (m *EventUpdateSellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SellOrderId != 0 {
		n += 1 + sovEvents(uint64(m.SellOrderId))
	}
	l = len(m.BatchDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewQuantity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.NewAskPrice != nil {
		l = m.NewAskPrice.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DisableAutoRetire {
		n += 2
	}
	if m.NewExpiration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.NewExpiration)
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAllowAskDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateSellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateSellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateSellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewQuantity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAskPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewAskPrice == nil {
				m.NewAskPrice = &types.Coin{}
			}
			if err := m.NewAskPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAutoRetire", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableAutoRetire = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExpiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewExpiration == nil {
				m.NewExpiration = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.NewExpiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAllowAskDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAllowAskDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAllowAskDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
