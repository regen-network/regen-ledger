// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/ecocredit/orderbook/v1alpha1/memory.proto

package orderbook

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	_ "github.com/regen-network/regen-ledger/api/v2/regen/orm/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BuyOrderSellOrderMatch defines the data the FIFO/price-time-priority matching
// algorithm used to actually match buy and sell orders.
type BuyOrderSellOrderMatch struct {
	// market_id defines the market within which this match exists.
	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// buy_order_id is the buy order ID.
	BuyOrderId uint64 `protobuf:"varint,2,opt,name=buy_order_id,json=buyOrderId,proto3" json:"buy_order_id,omitempty"`
	// sell_order_id is the sell order ID.
	SellOrderId uint64 `protobuf:"varint,3,opt,name=sell_order_id,json=sellOrderId,proto3" json:"sell_order_id,omitempty"`
	// bid_price_complement is the the complement (^ operator) of the bid price
	// encoded as a uint32 (which should have sufficient precision) - effectively
	// ~price * 10^exponent (usually 10^6). The complement is used so that bids
	// can be sorted high to low.
	BidPriceComplement uint32 `protobuf:"fixed32,4,opt,name=bid_price_complement,json=bidPriceComplement,proto3" json:"bid_price_complement,omitempty"`
	// ask_price is the ask price encoded to a uint32. Ask prices are sorted low
	// to high.
	AskPrice uint32 `protobuf:"fixed32,5,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
}

func (m *BuyOrderSellOrderMatch) Reset()         { *m = BuyOrderSellOrderMatch{} }
func (m *BuyOrderSellOrderMatch) String() string { return proto.CompactTextString(m) }
func (*BuyOrderSellOrderMatch) ProtoMessage()    {}
func (*BuyOrderSellOrderMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c0285db5dc9271c, []int{0}
}
func (m *BuyOrderSellOrderMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderSellOrderMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderSellOrderMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderSellOrderMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderSellOrderMatch.Merge(m, src)
}
func (m *BuyOrderSellOrderMatch) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderSellOrderMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderSellOrderMatch.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderSellOrderMatch proto.InternalMessageInfo

func (m *BuyOrderSellOrderMatch) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *BuyOrderSellOrderMatch) GetBuyOrderId() uint64 {
	if m != nil {
		return m.BuyOrderId
	}
	return 0
}

func (m *BuyOrderSellOrderMatch) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

func (m *BuyOrderSellOrderMatch) GetBidPriceComplement() uint32 {
	if m != nil {
		return m.BidPriceComplement
	}
	return 0
}

func (m *BuyOrderSellOrderMatch) GetAskPrice() uint32 {
	if m != nil {
		return m.AskPrice
	}
	return 0
}

// BuyOrderClassSelector indexes a buy order with class selector.
type BuyOrderClassSelector struct {
	// buy_order_id is the buy order ID.
	BuyOrderId uint64 `protobuf:"varint,1,opt,name=buy_order_id,json=buyOrderId,proto3" json:"buy_order_id,omitempty"`
	// class_id is the class ID.
	ClassId uint64 `protobuf:"varint,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	// project_location is the project location in the selector's criteria.
	ProjectLocation string `protobuf:"bytes,3,opt,name=project_location,json=projectLocation,proto3" json:"project_location,omitempty"`
	// min_start_date is the minimum start date in the selector's criteria.
	MinStartDate *types.Timestamp `protobuf:"bytes,4,opt,name=min_start_date,json=minStartDate,proto3" json:"min_start_date,omitempty"`
	// max_end_date is the maximum end date in the selector's criteria.
	MaxEndDate *types.Timestamp `protobuf:"bytes,5,opt,name=max_end_date,json=maxEndDate,proto3" json:"max_end_date,omitempty"`
}

func (m *BuyOrderClassSelector) Reset()         { *m = BuyOrderClassSelector{} }
func (m *BuyOrderClassSelector) String() string { return proto.CompactTextString(m) }
func (*BuyOrderClassSelector) ProtoMessage()    {}
func (*BuyOrderClassSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c0285db5dc9271c, []int{1}
}
func (m *BuyOrderClassSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderClassSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderClassSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderClassSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderClassSelector.Merge(m, src)
}
func (m *BuyOrderClassSelector) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderClassSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderClassSelector.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderClassSelector proto.InternalMessageInfo

func (m *BuyOrderClassSelector) GetBuyOrderId() uint64 {
	if m != nil {
		return m.BuyOrderId
	}
	return 0
}

func (m *BuyOrderClassSelector) GetClassId() uint64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *BuyOrderClassSelector) GetProjectLocation() string {
	if m != nil {
		return m.ProjectLocation
	}
	return ""
}

func (m *BuyOrderClassSelector) GetMinStartDate() *types.Timestamp {
	if m != nil {
		return m.MinStartDate
	}
	return nil
}

func (m *BuyOrderClassSelector) GetMaxEndDate() *types.Timestamp {
	if m != nil {
		return m.MaxEndDate
	}
	return nil
}

// BuyOrderProjectSelector indexes a buy order with project selector.
type BuyOrderProjectSelector struct {
	// buy_order_id is the buy order ID.
	BuyOrderId uint64 `protobuf:"varint,1,opt,name=buy_order_id,json=buyOrderId,proto3" json:"buy_order_id,omitempty"`
	// project_id is the project ID.
	ProjectId uint64 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// min_start_date is the minimum start date in the selector's criteria.
	MinStartDate *types.Timestamp `protobuf:"bytes,3,opt,name=min_start_date,json=minStartDate,proto3" json:"min_start_date,omitempty"`
	// max_end_date is the maximum end date in the selector's criteria.
	MaxEndDate *types.Timestamp `protobuf:"bytes,4,opt,name=max_end_date,json=maxEndDate,proto3" json:"max_end_date,omitempty"`
}

func (m *BuyOrderProjectSelector) Reset()         { *m = BuyOrderProjectSelector{} }
func (m *BuyOrderProjectSelector) String() string { return proto.CompactTextString(m) }
func (*BuyOrderProjectSelector) ProtoMessage()    {}
func (*BuyOrderProjectSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c0285db5dc9271c, []int{2}
}
func (m *BuyOrderProjectSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderProjectSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderProjectSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderProjectSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderProjectSelector.Merge(m, src)
}
func (m *BuyOrderProjectSelector) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderProjectSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderProjectSelector.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderProjectSelector proto.InternalMessageInfo

func (m *BuyOrderProjectSelector) GetBuyOrderId() uint64 {
	if m != nil {
		return m.BuyOrderId
	}
	return 0
}

func (m *BuyOrderProjectSelector) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *BuyOrderProjectSelector) GetMinStartDate() *types.Timestamp {
	if m != nil {
		return m.MinStartDate
	}
	return nil
}

func (m *BuyOrderProjectSelector) GetMaxEndDate() *types.Timestamp {
	if m != nil {
		return m.MaxEndDate
	}
	return nil
}

// BuyOrderBatchSelector indexes a buy order with batch selector.
type BuyOrderBatchSelector struct {
	// buy_order_id is the buy order ID.
	BuyOrderId uint64 `protobuf:"varint,1,opt,name=buy_order_id,json=buyOrderId,proto3" json:"buy_order_id,omitempty"`
	// batch_id is the batch ID.
	BatchId uint64 `protobuf:"varint,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (m *BuyOrderBatchSelector) Reset()         { *m = BuyOrderBatchSelector{} }
func (m *BuyOrderBatchSelector) String() string { return proto.CompactTextString(m) }
func (*BuyOrderBatchSelector) ProtoMessage()    {}
func (*BuyOrderBatchSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c0285db5dc9271c, []int{3}
}
func (m *BuyOrderBatchSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderBatchSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderBatchSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderBatchSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderBatchSelector.Merge(m, src)
}
func (m *BuyOrderBatchSelector) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderBatchSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderBatchSelector.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderBatchSelector proto.InternalMessageInfo

func (m *BuyOrderBatchSelector) GetBuyOrderId() uint64 {
	if m != nil {
		return m.BuyOrderId
	}
	return 0
}

func (m *BuyOrderBatchSelector) GetBatchId() uint64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func init() {
	proto.RegisterType((*BuyOrderSellOrderMatch)(nil), "regen.ecocredit.orderbook.v1alpha1.BuyOrderSellOrderMatch")
	proto.RegisterType((*BuyOrderClassSelector)(nil), "regen.ecocredit.orderbook.v1alpha1.BuyOrderClassSelector")
	proto.RegisterType((*BuyOrderProjectSelector)(nil), "regen.ecocredit.orderbook.v1alpha1.BuyOrderProjectSelector")
	proto.RegisterType((*BuyOrderBatchSelector)(nil), "regen.ecocredit.orderbook.v1alpha1.BuyOrderBatchSelector")
}

func init() {
	proto.RegisterFile("regen/ecocredit/orderbook/v1alpha1/memory.proto", fileDescriptor_6c0285db5dc9271c)
}

var fileDescriptor_6c0285db5dc9271c = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x6e, 0xd3, 0x4e,
	0x14, 0xc7, 0x3b, 0x4e, 0xfa, 0x6b, 0x3b, 0xcd, 0xaf, 0x98, 0x11, 0x6d, 0xdd, 0x00, 0xa6, 0xf2,
	0xaa, 0x95, 0x5a, 0x9b, 0xd2, 0x5d, 0x61, 0x81, 0x1a, 0x10, 0xb2, 0x04, 0xa2, 0x4a, 0x60, 0xc3,
	0xc6, 0x1a, 0x7b, 0x86, 0xc4, 0xc4, 0xe3, 0xb1, 0xc6, 0x93, 0x92, 0x48, 0xac, 0x90, 0xd8, 0x02,
	0x27, 0xe0, 0x0c, 0x1c, 0x83, 0x1d, 0x95, 0xd8, 0xb0, 0x44, 0xc9, 0x0d, 0x38, 0x01, 0xf2, 0x38,
	0x76, 0x12, 0x1a, 0x84, 0x22, 0x56, 0xf1, 0xbc, 0xf7, 0xbe, 0xef, 0xcf, 0x67, 0x5e, 0x06, 0x3a,
	0x82, 0xb6, 0x69, 0xec, 0xd0, 0x80, 0x07, 0x82, 0x92, 0x50, 0x3a, 0x5c, 0x10, 0x2a, 0x7c, 0xce,
	0xbb, 0xce, 0xf9, 0x11, 0x8e, 0x92, 0x0e, 0x3e, 0x72, 0x18, 0x65, 0x5c, 0x0c, 0xec, 0x44, 0x70,
	0xc9, 0x91, 0xa5, 0x04, 0x76, 0x29, 0xb0, 0x4b, 0x81, 0x5d, 0x08, 0xea, 0xb7, 0xda, 0x9c, 0xb7,
	0x23, 0xea, 0x28, 0x85, 0xdf, 0x7b, 0xe9, 0xc8, 0x90, 0xd1, 0x54, 0x62, 0x96, 0xe4, 0x49, 0xea,
	0x5b, 0x79, 0x55, 0x2e, 0x98, 0x73, 0x7e, 0x94, 0xfd, 0xe4, 0x76, 0xeb, 0xab, 0x06, 0xb7, 0x4e,
	0x7b, 0x83, 0xa7, 0x59, 0xca, 0x16, 0x8d, 0x22, 0xf5, 0xf1, 0x04, 0xcb, 0xa0, 0x83, 0xae, 0xc3,
	0x35, 0x86, 0x45, 0x97, 0x4a, 0x2f, 0x24, 0x06, 0xd8, 0x05, 0x7b, 0xd5, 0xe6, 0x6a, 0x6e, 0x70,
	0x09, 0xda, 0x85, 0x35, 0xbf, 0x37, 0xf0, 0x54, 0x2b, 0x99, 0x5f, 0x53, 0x7e, 0xe8, 0x8f, 0x53,
	0xb9, 0x04, 0x59, 0xf0, 0xff, 0x94, 0x46, 0xd1, 0x24, 0xa4, 0xa2, 0x42, 0xd6, 0xd3, 0xa2, 0x8a,
	0x4b, 0xd0, 0x6d, 0x78, 0xcd, 0x0f, 0x89, 0x97, 0x88, 0x30, 0xa0, 0x5e, 0xc0, 0x59, 0x12, 0x51,
	0x46, 0x63, 0x69, 0x54, 0x77, 0xc1, 0xde, 0x4a, 0x13, 0xf9, 0x21, 0x39, 0xcb, 0x5c, 0x8d, 0xd2,
	0x93, 0x35, 0x85, 0xd3, 0x6e, 0xae, 0x30, 0x96, 0x55, 0xd8, 0x2a, 0x4e, 0xbb, 0x2a, 0xec, 0xe4,
	0x2d, 0xf8, 0xf9, 0xe9, 0xdb, 0xfb, 0xca, 0x1b, 0x78, 0x03, 0xd6, 0xa7, 0xbb, 0x3b, 0x98, 0x69,
	0x04, 0x3d, 0x82, 0x8d, 0x72, 0xb0, 0x83, 0x79, 0xf5, 0x0f, 0x66, 0xc4, 0x65, 0xbd, 0xd9, 0x34,
	0x3a, 0x40, 0x57, 0x7f, 0x1b, 0x51, 0xd7, 0x0c, 0x60, 0x7d, 0xd6, 0xe0, 0x66, 0x41, 0xb4, 0x11,
	0xe1, 0x34, 0x6d, 0xd1, 0x88, 0x06, 0x92, 0x8b, 0x4b, 0xcc, 0xc0, 0x25, 0x66, 0x3b, 0x70, 0x35,
	0xc8, 0x24, 0x13, 0xa2, 0x2b, 0xea, 0xec, 0x12, 0xb4, 0x0f, 0xf5, 0x44, 0xf0, 0x57, 0x34, 0x90,
	0x5e, 0xc4, 0x03, 0x2c, 0x43, 0x1e, 0x2b, 0xa2, 0x6b, 0xcd, 0x2b, 0x63, 0xfb, 0xe3, 0xb1, 0x19,
	0xdd, 0x87, 0x1b, 0x2c, 0x8c, 0xbd, 0x54, 0x62, 0x21, 0x3d, 0x82, 0x25, 0x55, 0x3c, 0xd7, 0xef,
	0xd4, 0xed, 0x7c, 0x4b, 0xec, 0x62, 0x4b, 0xec, 0x67, 0xc5, 0x96, 0x34, 0x6b, 0x2c, 0x8c, 0x5b,
	0x99, 0xe0, 0x01, 0x96, 0x14, 0xdd, 0x83, 0x35, 0x86, 0xfb, 0x1e, 0x8d, 0x49, 0xae, 0x5f, 0xfe,
	0xab, 0x1e, 0x32, 0xdc, 0x7f, 0x18, 0x93, 0x4c, 0x7d, 0xe2, 0xa8, 0x5b, 0xd8, 0x87, 0xdb, 0x70,
	0x73, 0x06, 0x64, 0x31, 0x1a, 0xaa, 0x4d, 0xc6, 0xd4, 0x81, 0xa1, 0x59, 0x1f, 0x34, 0xb8, 0x5d,
	0x20, 0x3b, 0xcb, 0x87, 0x59, 0x00, 0xda, 0x4d, 0x08, 0x0b, 0x32, 0x25, 0xb6, 0xb5, 0xb1, 0xc5,
	0x25, 0x73, 0x68, 0x54, 0xfe, 0x91, 0x46, 0x75, 0x21, 0x1a, 0xc7, 0x8a, 0xc6, 0x21, 0xdc, 0x81,
	0xdb, 0x33, 0x34, 0x26, 0x3d, 0xa3, 0x8d, 0xe9, 0x09, 0x74, 0x60, 0x54, 0xac, 0x77, 0x60, 0xb2,
	0x44, 0xa7, 0xd9, 0xbf, 0x71, 0xb1, 0x25, 0xf2, 0x33, 0xc9, 0xd4, 0x12, 0xa9, 0xb3, 0x4b, 0xfe,
	0x78, 0x33, 0x45, 0x7c, 0x76, 0x33, 0xc5, 0xb7, 0x0e, 0x8c, 0xea, 0xe9, 0xf3, 0x2f, 0x43, 0x13,
	0x5c, 0x0c, 0x4d, 0xf0, 0x63, 0x68, 0x82, 0x8f, 0x23, 0x73, 0xe9, 0x62, 0x64, 0x2e, 0x7d, 0x1f,
	0x99, 0x4b, 0x2f, 0xee, 0xb6, 0x43, 0xd9, 0xe9, 0xf9, 0x76, 0xc0, 0x59, 0xfe, 0xa2, 0x1d, 0xc6,
	0x54, 0xbe, 0xe6, 0xa2, 0x3b, 0x3e, 0x45, 0x94, 0xb4, 0xa9, 0x70, 0xfa, 0xf3, 0x1e, 0x3a, 0xff,
	0x3f, 0xc5, 0xec, 0xf8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x2b, 0x62, 0x8b, 0x0c, 0x05,
	0x00, 0x00,
}

func (m *BuyOrderSellOrderMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderSellOrderMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderSellOrderMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AskPrice != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.AskPrice))
		i--
		dAtA[i] = 0x2d
	}
	if m.BidPriceComplement != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.BidPriceComplement))
		i--
		dAtA[i] = 0x25
	}
	if m.SellOrderId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.BuyOrderId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.BuyOrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrderClassSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderClassSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderClassSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxEndDate != nil {
		{
			size, err := m.MaxEndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MinStartDate != nil {
		{
			size, err := m.MinStartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectLocation) > 0 {
		i -= len(m.ProjectLocation)
		copy(dAtA[i:], m.ProjectLocation)
		i = encodeVarintMemory(dAtA, i, uint64(len(m.ProjectLocation)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ClassId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x10
	}
	if m.BuyOrderId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.BuyOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrderProjectSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderProjectSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderProjectSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxEndDate != nil {
		{
			size, err := m.MaxEndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MinStartDate != nil {
		{
			size, err := m.MinStartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ProjectId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x10
	}
	if m.BuyOrderId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.BuyOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrderBatchSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderBatchSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderBatchSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.BuyOrderId != 0 {
		i = encodeVarintMemory(dAtA, i, uint64(m.BuyOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMemory(dAtA []byte, offset int, v uint64) int {
	offset -= sovMemory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BuyOrderSellOrderMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovMemory(uint64(m.MarketId))
	}
	if m.BuyOrderId != 0 {
		n += 1 + sovMemory(uint64(m.BuyOrderId))
	}
	if m.SellOrderId != 0 {
		n += 1 + sovMemory(uint64(m.SellOrderId))
	}
	if m.BidPriceComplement != 0 {
		n += 5
	}
	if m.AskPrice != 0 {
		n += 5
	}
	return n
}

func (m *BuyOrderClassSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyOrderId != 0 {
		n += 1 + sovMemory(uint64(m.BuyOrderId))
	}
	if m.ClassId != 0 {
		n += 1 + sovMemory(uint64(m.ClassId))
	}
	l = len(m.ProjectLocation)
	if l > 0 {
		n += 1 + l + sovMemory(uint64(l))
	}
	if m.MinStartDate != nil {
		l = m.MinStartDate.Size()
		n += 1 + l + sovMemory(uint64(l))
	}
	if m.MaxEndDate != nil {
		l = m.MaxEndDate.Size()
		n += 1 + l + sovMemory(uint64(l))
	}
	return n
}

func (m *BuyOrderProjectSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyOrderId != 0 {
		n += 1 + sovMemory(uint64(m.BuyOrderId))
	}
	if m.ProjectId != 0 {
		n += 1 + sovMemory(uint64(m.ProjectId))
	}
	if m.MinStartDate != nil {
		l = m.MinStartDate.Size()
		n += 1 + l + sovMemory(uint64(l))
	}
	if m.MaxEndDate != nil {
		l = m.MaxEndDate.Size()
		n += 1 + l + sovMemory(uint64(l))
	}
	return n
}

func (m *BuyOrderBatchSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyOrderId != 0 {
		n += 1 + sovMemory(uint64(m.BuyOrderId))
	}
	if m.BatchId != 0 {
		n += 1 + sovMemory(uint64(m.BatchId))
	}
	return n
}

func sovMemory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMemory(x uint64) (n int) {
	return sovMemory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuyOrderSellOrderMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderSellOrderMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderSellOrderMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderId", wireType)
			}
			m.BuyOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPriceComplement", wireType)
			}
			m.BidPriceComplement = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.BidPriceComplement = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskPrice", wireType)
			}
			m.AskPrice = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.AskPrice = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipMemory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrderClassSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderClassSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderClassSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderId", wireType)
			}
			m.BuyOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMemory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinStartDate == nil {
				m.MinStartDate = &types.Timestamp{}
			}
			if err := m.MinStartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxEndDate == nil {
				m.MaxEndDate = &types.Timestamp{}
			}
			if err := m.MaxEndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrderProjectSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderProjectSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderProjectSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderId", wireType)
			}
			m.BuyOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinStartDate == nil {
				m.MinStartDate = &types.Timestamp{}
			}
			if err := m.MinStartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxEndDate == nil {
				m.MaxEndDate = &types.Timestamp{}
			}
			if err := m.MaxEndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrderBatchSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderBatchSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderBatchSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderId", wireType)
			}
			m.BuyOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMemory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMemory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMemory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMemory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMemory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMemory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMemory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMemory = fmt.Errorf("proto: unexpected end of group")
)
