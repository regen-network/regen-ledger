// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/ecocredit/curation/v1beta1/tx.proto

package curationv1beta1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDefineTag is the Msg/DefineTag request type.
type MsgDefineTag struct {
	// curator is the address of the curator that will be able to tag and untag
	// this tag.
	Curator string `protobuf:"bytes,1,opt,name=curator,proto3" json:"curator,omitempty"`
	// meta is the metadata associated with the tag.
	Meta *TagMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// type defines the type of the tag.
	Type *TagType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *MsgDefineTag) Reset()         { *m = MsgDefineTag{} }
func (m *MsgDefineTag) String() string { return proto.CompactTextString(m) }
func (*MsgDefineTag) ProtoMessage()    {}
func (*MsgDefineTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{0}
}
func (m *MsgDefineTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDefineTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDefineTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDefineTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDefineTag.Merge(m, src)
}
func (m *MsgDefineTag) XXX_Size() int {
	return m.Size()
}
func (m *MsgDefineTag) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDefineTag.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDefineTag proto.InternalMessageInfo

func (m *MsgDefineTag) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

func (m *MsgDefineTag) GetMeta() *TagMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MsgDefineTag) GetType() *TagType {
	if m != nil {
		return m.Type
	}
	return nil
}

// MsgDefineTagResponse is the Msg/DefineTag response type.
type MsgDefineTagResponse struct {
	// tag_id is the unique identifier of the tag.
	TagId string `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
}

func (m *MsgDefineTagResponse) Reset()         { *m = MsgDefineTagResponse{} }
func (m *MsgDefineTagResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDefineTagResponse) ProtoMessage()    {}
func (*MsgDefineTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{1}
}
func (m *MsgDefineTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDefineTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDefineTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDefineTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDefineTagResponse.Merge(m, src)
}
func (m *MsgDefineTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDefineTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDefineTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDefineTagResponse proto.InternalMessageInfo

func (m *MsgDefineTagResponse) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

// MsgTag is the Msg/Tag request type.
type MsgTag struct {
	// curator is the address of the tag curator.
	Curator string `protobuf:"bytes,1,opt,name=curator,proto3" json:"curator,omitempty"`
	// tag_id is the unique identifier of the tag.
	TagId string `protobuf:"bytes,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	// target is the target of the tag.
	Target *TagTarget `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// value is the decimal string representation of the numeric value to set
	// when the tag is a numeric tag. It should not be set when the tag is a
	// not a numeric tag.
	// value must be within the range of the attribute's min and max values
	// and must not exceed the attribute's precision.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgTag) Reset()         { *m = MsgTag{} }
func (m *MsgTag) String() string { return proto.CompactTextString(m) }
func (*MsgTag) ProtoMessage()    {}
func (*MsgTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{2}
}
func (m *MsgTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTag.Merge(m, src)
}
func (m *MsgTag) XXX_Size() int {
	return m.Size()
}
func (m *MsgTag) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTag.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTag proto.InternalMessageInfo

func (m *MsgTag) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

func (m *MsgTag) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *MsgTag) GetTarget() *TagTarget {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *MsgTag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// MsgTagResponse is the Msg/Tag response type.
type MsgTagResponse struct {
}

func (m *MsgTagResponse) Reset()         { *m = MsgTagResponse{} }
func (m *MsgTagResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTagResponse) ProtoMessage()    {}
func (*MsgTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{3}
}
func (m *MsgTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTagResponse.Merge(m, src)
}
func (m *MsgTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTagResponse proto.InternalMessageInfo

// MsgUntag is the Msg/Untag request type.
type MsgUntag struct {
	// curator is the address of the tag curator.
	Curator string `protobuf:"bytes,1,opt,name=curator,proto3" json:"curator,omitempty"`
	// tag_id is the unique identifier of the tag.
	TagId string `protobuf:"bytes,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	// target is the target of the tag.
	Target *TagTarget `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *MsgUntag) Reset()         { *m = MsgUntag{} }
func (m *MsgUntag) String() string { return proto.CompactTextString(m) }
func (*MsgUntag) ProtoMessage()    {}
func (*MsgUntag) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{4}
}
func (m *MsgUntag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUntag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUntag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUntag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUntag.Merge(m, src)
}
func (m *MsgUntag) XXX_Size() int {
	return m.Size()
}
func (m *MsgUntag) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUntag.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUntag proto.InternalMessageInfo

func (m *MsgUntag) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

func (m *MsgUntag) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *MsgUntag) GetTarget() *TagTarget {
	if m != nil {
		return m.Target
	}
	return nil
}

// MsgUntagResponse is the Msg/Untag response type.
type MsgUntagResponse struct {
}

func (m *MsgUntagResponse) Reset()         { *m = MsgUntagResponse{} }
func (m *MsgUntagResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUntagResponse) ProtoMessage()    {}
func (*MsgUntagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{5}
}
func (m *MsgUntagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUntagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUntagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUntagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUntagResponse.Merge(m, src)
}
func (m *MsgUntagResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUntagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUntagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUntagResponse proto.InternalMessageInfo

// MsgUpdateCurator is the Msg/UpdateCurator request type.
type MsgUpdateCurator struct {
	// curator is the address of the tag curator.
	Curator string `protobuf:"bytes,1,opt,name=curator,proto3" json:"curator,omitempty"`
	// tag_id is the unique identifier of the tag.
	TagId string `protobuf:"bytes,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	// new_curator is the new curator address.
	NewCurator string `protobuf:"bytes,3,opt,name=new_curator,json=newCurator,proto3" json:"new_curator,omitempty"`
}

func (m *MsgUpdateCurator) Reset()         { *m = MsgUpdateCurator{} }
func (m *MsgUpdateCurator) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCurator) ProtoMessage()    {}
func (*MsgUpdateCurator) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{6}
}
func (m *MsgUpdateCurator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCurator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCurator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCurator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCurator.Merge(m, src)
}
func (m *MsgUpdateCurator) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCurator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCurator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCurator proto.InternalMessageInfo

func (m *MsgUpdateCurator) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

func (m *MsgUpdateCurator) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *MsgUpdateCurator) GetNewCurator() string {
	if m != nil {
		return m.NewCurator
	}
	return ""
}

// MsgUpdateCuratorResponse is the Msg/UpdateCurator response type.
type MsgUpdateCuratorResponse struct {
}

func (m *MsgUpdateCuratorResponse) Reset()         { *m = MsgUpdateCuratorResponse{} }
func (m *MsgUpdateCuratorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCuratorResponse) ProtoMessage()    {}
func (*MsgUpdateCuratorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{7}
}
func (m *MsgUpdateCuratorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCuratorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCuratorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCuratorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCuratorResponse.Merge(m, src)
}
func (m *MsgUpdateCuratorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCuratorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCuratorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCuratorResponse proto.InternalMessageInfo

// MsgUpdateMetadata is the Msg/UpdateMetadata request type.
type MsgUpdateMetadata struct {
	// curator is the address of the tag curator.
	Curator string `protobuf:"bytes,1,opt,name=curator,proto3" json:"curator,omitempty"`
	// tag_id is the unique identifier of the tag.
	TagId string `protobuf:"bytes,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	// meta is the new metadata.
	Meta *TagMeta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *MsgUpdateMetadata) Reset()         { *m = MsgUpdateMetadata{} }
func (m *MsgUpdateMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMetadata) ProtoMessage()    {}
func (*MsgUpdateMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{8}
}
func (m *MsgUpdateMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMetadata.Merge(m, src)
}
func (m *MsgUpdateMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMetadata proto.InternalMessageInfo

func (m *MsgUpdateMetadata) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

func (m *MsgUpdateMetadata) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *MsgUpdateMetadata) GetMeta() *TagMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

// MsgUpdateMetadataResponse is the Msg/UpdateMetadata response type.
type MsgUpdateMetadataResponse struct {
}

func (m *MsgUpdateMetadataResponse) Reset()         { *m = MsgUpdateMetadataResponse{} }
func (m *MsgUpdateMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMetadataResponse) ProtoMessage()    {}
func (*MsgUpdateMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f00a918b59c18e, []int{9}
}
func (m *MsgUpdateMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMetadataResponse.Merge(m, src)
}
func (m *MsgUpdateMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMetadataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDefineTag)(nil), "regen.ecocredit.curation.v1beta1.MsgDefineTag")
	proto.RegisterType((*MsgDefineTagResponse)(nil), "regen.ecocredit.curation.v1beta1.MsgDefineTagResponse")
	proto.RegisterType((*MsgTag)(nil), "regen.ecocredit.curation.v1beta1.MsgTag")
	proto.RegisterType((*MsgTagResponse)(nil), "regen.ecocredit.curation.v1beta1.MsgTagResponse")
	proto.RegisterType((*MsgUntag)(nil), "regen.ecocredit.curation.v1beta1.MsgUntag")
	proto.RegisterType((*MsgUntagResponse)(nil), "regen.ecocredit.curation.v1beta1.MsgUntagResponse")
	proto.RegisterType((*MsgUpdateCurator)(nil), "regen.ecocredit.curation.v1beta1.MsgUpdateCurator")
	proto.RegisterType((*MsgUpdateCuratorResponse)(nil), "regen.ecocredit.curation.v1beta1.MsgUpdateCuratorResponse")
	proto.RegisterType((*MsgUpdateMetadata)(nil), "regen.ecocredit.curation.v1beta1.MsgUpdateMetadata")
	proto.RegisterType((*MsgUpdateMetadataResponse)(nil), "regen.ecocredit.curation.v1beta1.MsgUpdateMetadataResponse")
}

func init() {
	proto.RegisterFile("regen/ecocredit/curation/v1beta1/tx.proto", fileDescriptor_22f00a918b59c18e)
}

var fileDescriptor_22f00a918b59c18e = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x75, 0x12, 0xe8, 0x2b, 0x54, 0xc5, 0x2a, 0x92, 0x31, 0x92, 0x89, 0x3c, 0xa5,
	0x40, 0x6d, 0x9a, 0x4a, 0x0c, 0x54, 0x2c, 0x94, 0x85, 0xc1, 0x8b, 0x15, 0x24, 0xc4, 0x52, 0x5d,
	0xec, 0xc7, 0x61, 0xd1, 0xda, 0xd6, 0xf9, 0xd2, 0xb4, 0x1b, 0x08, 0x3e, 0x00, 0x03, 0x9f, 0x81,
	0xcf, 0xc2, 0xd8, 0x0d, 0x46, 0x94, 0x7c, 0x11, 0xe4, 0xb3, 0xcf, 0x31, 0x05, 0x11, 0xbb, 0x0b,
	0xe3, 0xbb, 0x7b, 0xbf, 0xf7, 0xff, 0x25, 0x7a, 0xc9, 0xc1, 0x0e, 0x47, 0x86, 0xb1, 0x8b, 0x41,
	0x12, 0x70, 0x0c, 0x23, 0xe1, 0x06, 0x53, 0x4e, 0x45, 0x94, 0xc4, 0xee, 0xe9, 0xde, 0x04, 0x05,
	0xdd, 0x73, 0xc5, 0x99, 0x93, 0xf2, 0x44, 0x24, 0xfa, 0x40, 0xb6, 0x3a, 0x55, 0xab, 0xa3, 0x5a,
	0x9d, 0xb2, 0xd5, 0x7c, 0xb8, 0x7a, 0xd8, 0x79, 0x8a, 0x59, 0x31, 0xcf, 0xfe, 0x4a, 0xe0, 0x86,
	0x97, 0xb1, 0xe7, 0xf8, 0x26, 0x8a, 0x71, 0x4c, 0x99, 0x6e, 0xc0, 0x35, 0x09, 0x24, 0xdc, 0x20,
	0x03, 0x32, 0x5c, 0xf7, 0x55, 0xa9, 0x3f, 0x85, 0xee, 0x09, 0x0a, 0x6a, 0xac, 0x0d, 0xc8, 0x70,
	0x63, 0xb4, 0xe3, 0xac, 0x32, 0x71, 0xc6, 0x94, 0x79, 0x28, 0xa8, 0x2f, 0xb1, 0x1c, 0xcf, 0x83,
	0x0d, 0xad, 0x05, 0x3e, 0x3e, 0x4f, 0xd1, 0x97, 0x98, 0xbd, 0x0b, 0xdb, 0x75, 0x4f, 0x1f, 0xb3,
	0x34, 0x89, 0x33, 0xd4, 0x6f, 0x43, 0x5f, 0x50, 0x76, 0x14, 0x85, 0xa5, 0x6e, 0x4f, 0x50, 0xf6,
	0x22, 0xb4, 0xbf, 0x10, 0xe8, 0x7b, 0x19, 0xfb, 0xf7, 0x27, 0x5a, 0xb2, 0x6b, 0x35, 0x56, 0x3f,
	0xcc, 0x8f, 0x39, 0x43, 0x51, 0xba, 0x3e, 0x68, 0xe6, 0x2a, 0x11, 0xbf, 0x44, 0xf5, 0x6d, 0xe8,
	0x9d, 0xd2, 0xe3, 0x29, 0x1a, 0xdd, 0x62, 0xb4, 0x2c, 0xec, 0x2d, 0xd8, 0x2c, 0xac, 0x94, 0xbf,
	0xfd, 0x9e, 0xc0, 0x75, 0x2f, 0x63, 0x2f, 0x63, 0xf1, 0xbf, 0x54, 0x6d, 0x1d, 0xb6, 0x94, 0x41,
	0xa5, 0x15, 0x16, 0x67, 0x69, 0x48, 0x05, 0x1e, 0x96, 0x0e, 0xad, 0xed, 0xee, 0xc1, 0x46, 0x8c,
	0xb3, 0x23, 0x05, 0x69, 0xf2, 0x0e, 0x62, 0x9c, 0x95, 0x13, 0x6d, 0x13, 0x8c, 0xcb, 0x29, 0x95,
	0xc1, 0x47, 0x02, 0xb7, 0xaa, 0xcb, 0x7c, 0x8f, 0x42, 0x2a, 0x68, 0x7b, 0x07, 0xb5, 0xb5, 0xda,
	0x95, 0xb6, 0xd6, 0xbe, 0x0b, 0x77, 0xfe, 0x90, 0x50, 0x8a, 0xa3, 0xef, 0x5d, 0xd0, 0xbc, 0x8c,
	0xe9, 0x53, 0x58, 0x5f, 0xfe, 0x80, 0x9c, 0xd5, 0x11, 0xf5, 0x45, 0x36, 0x1f, 0xb7, 0xeb, 0xaf,
	0xbe, 0x9f, 0x8e, 0x1e, 0x80, 0x96, 0x07, 0x0e, 0x1b, 0x0d, 0xc8, 0xa3, 0x1e, 0x35, 0xed, 0xac,
	0x85, 0x44, 0xd0, 0x2b, 0x76, 0xf3, 0x7e, 0x23, 0x58, 0xf6, 0x9a, 0xa3, 0xe6, 0xbd, 0xb5, 0xa8,
	0x0f, 0x04, 0x6e, 0xfe, 0xbe, 0x71, 0x0d, 0xe7, 0xd4, 0x19, 0xf3, 0x49, 0x7b, 0xa6, 0xe6, 0xf0,
	0x89, 0xc0, 0xe6, 0xa5, 0x95, 0xdb, 0x6f, 0x31, 0x50, 0x41, 0xe6, 0xc1, 0x15, 0xa0, 0xa5, 0xc6,
	0x33, 0xfe, 0x6d, 0x6e, 0x91, 0x8b, 0xb9, 0x45, 0x7e, 0xce, 0x2d, 0xf2, 0x79, 0x61, 0x75, 0x2e,
	0x16, 0x56, 0xe7, 0xc7, 0xc2, 0xea, 0xbc, 0x7e, 0xc5, 0x22, 0xf1, 0x76, 0x3a, 0x71, 0x82, 0xe4,
	0xc4, 0x95, 0x11, 0xbb, 0x31, 0x8a, 0x59, 0xc2, 0xdf, 0x95, 0xd5, 0x31, 0x86, 0x0c, 0xb9, 0x7b,
	0xf6, 0xb7, 0x07, 0x40, 0xfe, 0xf1, 0xab, 0x67, 0xe0, 0x40, 0x1d, 0x97, 0xf5, 0xa4, 0x2f, 0x5f,
	0x84, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x84, 0xad, 0x50, 0x8e, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DefineTag defines a new tag.
	DefineTag(ctx context.Context, in *MsgDefineTag, opts ...grpc.CallOption) (*MsgDefineTagResponse, error)
	// Tag tags a target with a tag.
	Tag(ctx context.Context, in *MsgTag, opts ...grpc.CallOption) (*MsgTagResponse, error)
	// Untag removes a tag from a target.
	Untag(ctx context.Context, in *MsgUntag, opts ...grpc.CallOption) (*MsgUntagResponse, error)
	// UpdateCurator updates the curator of a tag.
	UpdateCurator(ctx context.Context, in *MsgUpdateCurator, opts ...grpc.CallOption) (*MsgUpdateCuratorResponse, error)
	// UpdateMetadata updates the metadata of a tag.
	UpdateMetadata(ctx context.Context, in *MsgUpdateMetadata, opts ...grpc.CallOption) (*MsgUpdateMetadataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DefineTag(ctx context.Context, in *MsgDefineTag, opts ...grpc.CallOption) (*MsgDefineTagResponse, error) {
	out := new(MsgDefineTagResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.curation.v1beta1.Msg/DefineTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Tag(ctx context.Context, in *MsgTag, opts ...grpc.CallOption) (*MsgTagResponse, error) {
	out := new(MsgTagResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.curation.v1beta1.Msg/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Untag(ctx context.Context, in *MsgUntag, opts ...grpc.CallOption) (*MsgUntagResponse, error) {
	out := new(MsgUntagResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.curation.v1beta1.Msg/Untag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCurator(ctx context.Context, in *MsgUpdateCurator, opts ...grpc.CallOption) (*MsgUpdateCuratorResponse, error) {
	out := new(MsgUpdateCuratorResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.curation.v1beta1.Msg/UpdateCurator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMetadata(ctx context.Context, in *MsgUpdateMetadata, opts ...grpc.CallOption) (*MsgUpdateMetadataResponse, error) {
	out := new(MsgUpdateMetadataResponse)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.curation.v1beta1.Msg/UpdateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DefineTag defines a new tag.
	DefineTag(context.Context, *MsgDefineTag) (*MsgDefineTagResponse, error)
	// Tag tags a target with a tag.
	Tag(context.Context, *MsgTag) (*MsgTagResponse, error)
	// Untag removes a tag from a target.
	Untag(context.Context, *MsgUntag) (*MsgUntagResponse, error)
	// UpdateCurator updates the curator of a tag.
	UpdateCurator(context.Context, *MsgUpdateCurator) (*MsgUpdateCuratorResponse, error)
	// UpdateMetadata updates the metadata of a tag.
	UpdateMetadata(context.Context, *MsgUpdateMetadata) (*MsgUpdateMetadataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DefineTag(ctx context.Context, req *MsgDefineTag) (*MsgDefineTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineTag not implemented")
}
func (*UnimplementedMsgServer) Tag(ctx context.Context, req *MsgTag) (*MsgTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (*UnimplementedMsgServer) Untag(ctx context.Context, req *MsgUntag) (*MsgUntagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Untag not implemented")
}
func (*UnimplementedMsgServer) UpdateCurator(ctx context.Context, req *MsgUpdateCurator) (*MsgUpdateCuratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurator not implemented")
}
func (*UnimplementedMsgServer) UpdateMetadata(ctx context.Context, req *MsgUpdateMetadata) (*MsgUpdateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DefineTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDefineTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DefineTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.curation.v1beta1.Msg/DefineTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DefineTag(ctx, req.(*MsgDefineTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.curation.v1beta1.Msg/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Tag(ctx, req.(*MsgTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Untag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUntag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Untag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.curation.v1beta1.Msg/Untag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Untag(ctx, req.(*MsgUntag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCurator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCurator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCurator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.curation.v1beta1.Msg/UpdateCurator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCurator(ctx, req.(*MsgUpdateCurator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.curation.v1beta1.Msg/UpdateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMetadata(ctx, req.(*MsgUpdateMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "regen.ecocredit.curation.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefineTag",
			Handler:    _Msg_DefineTag_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _Msg_Tag_Handler,
		},
		{
			MethodName: "Untag",
			Handler:    _Msg_Untag_Handler,
		},
		{
			MethodName: "UpdateCurator",
			Handler:    _Msg_UpdateCurator_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _Msg_UpdateMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/ecocredit/curation/v1beta1/tx.proto",
}

func (m *MsgDefineTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDefineTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDefineTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDefineTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDefineTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDefineTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TagId) > 0 {
		i -= len(m.TagId)
		copy(dAtA[i:], m.TagId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TagId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TagId) > 0 {
		i -= len(m.TagId)
		copy(dAtA[i:], m.TagId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TagId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUntag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUntag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUntag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TagId) > 0 {
		i -= len(m.TagId)
		copy(dAtA[i:], m.TagId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TagId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUntagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUntagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUntagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCurator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCurator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCurator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewCurator) > 0 {
		i -= len(m.NewCurator)
		copy(dAtA[i:], m.NewCurator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewCurator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TagId) > 0 {
		i -= len(m.TagId)
		copy(dAtA[i:], m.TagId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TagId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCuratorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCuratorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCuratorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TagId) > 0 {
		i -= len(m.TagId)
		copy(dAtA[i:], m.TagId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TagId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDefineTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDefineTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TagId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TagId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUntag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TagId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUntagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCurator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TagId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewCurator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCuratorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TagId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDefineTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDefineTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDefineTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &TagMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &TagType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDefineTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDefineTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDefineTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &TagTarget{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUntag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUntag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUntag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &TagTarget{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUntagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUntagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUntagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCurator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCurator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCurator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCurator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCurator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCuratorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCuratorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCuratorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &TagMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
